/**
 * This file was autogenerated by glgen (https://github.com/seshbot/glgen) on 2015-03-10
 * Command line: src/gen.py assets/gl.xml -p assets/gl-patch.xml -o ../glpp/ --includesubdir include/glpp --sourcesubdir src --namespace gl2 --force --cpp --gl2only
 */

#include <glad/glad.h>
#include <string.h>
#include <glpp/gl2/commands.h>


namespace gl2 {
    void accum(accum_op_t op, gl::float_t value) {
      glAccum(static_cast<GLenum>(op), value);
    }

    void active_texture(texture_unit_t texture) {
      glActiveTexture(static_cast<GLenum>(texture));
    }

    void alpha_func(alpha_function_t func, gl::float_t ref) {
      glAlphaFunc(static_cast<GLenum>(func), ref);
    }

    gl::boolean_t are_textures_resident(gl::sizei_t n, const  gl::uint_t * textures, gl::boolean_t * residences) {
      return glAreTexturesResident(n, textures, residences);
    }

    void array_element(gl::int_t i) {
      glArrayElement(i);
    }

    void attach_shader(gl::uint_t program, gl::uint_t shader) {
      glAttachShader(program, shader);
    }

    void begin(primitive_type_t mode) {
      glBegin(static_cast<GLenum>(mode));
    }

    void begin_query(gl::enum_t target, gl::uint_t id) {
      glBeginQuery(target, id);
    }

    void bind_attrib_location(gl::uint_t program, gl::uint_t index, const  gl::char_t * name) {
      glBindAttribLocation(program, index, name);
    }

    void bind_buffer(buffer_target_arb_t target, gl::uint_t buffer) {
      glBindBuffer(static_cast<GLenum>(target), buffer);
    }

    void bind_texture(texture_target_t target, gl::uint_t texture) {
      glBindTexture(static_cast<GLenum>(target), texture);
    }

    void bitmap(gl::sizei_t width, gl::sizei_t height, gl::float_t xorig, gl::float_t yorig, gl::float_t xmove, gl::float_t ymove, const  gl::ubyte_t * bitmap) {
      glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
    }

    void blend_color(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha) {
      glBlendColor(red, green, blue, alpha);
    }

    void blend_equation(blend_equation_mode_t mode) {
      glBlendEquation(static_cast<GLenum>(mode));
    }

    void blend_equation_separate(blend_equation_mode_ext_t modeRGB, blend_equation_mode_ext_t modeAlpha) {
      glBlendEquationSeparate(static_cast<GLenum>(modeRGB), static_cast<GLenum>(modeAlpha));
    }

    void blend_func(blending_factor_src_t sfactor, blending_factor_dest_t dfactor) {
      glBlendFunc(static_cast<GLenum>(sfactor), static_cast<GLenum>(dfactor));
    }

    void blend_func_separate(blend_func_separate_parameter_ext_t sfactorRGB, blend_func_separate_parameter_ext_t dfactorRGB, blend_func_separate_parameter_ext_t sfactorAlpha, blend_func_separate_parameter_ext_t dfactorAlpha) {
      glBlendFuncSeparate(static_cast<GLenum>(sfactorRGB), static_cast<GLenum>(dfactorRGB), static_cast<GLenum>(sfactorAlpha), static_cast<GLenum>(dfactorAlpha));
    }

    void buffer_data(buffer_target_arb_t target, gl::sizeiptr_t size, const  void * data, buffer_usage_arb_t usage) {
      glBufferData(static_cast<GLenum>(target), size, data, static_cast<GLenum>(usage));
    }

    void buffer_sub_data(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t size, const  void * data) {
      glBufferSubData(static_cast<GLenum>(target), offset, size, data);
    }

    void call_list(gl::uint_t list) {
      glCallList(list);
    }

    void call_lists(gl::sizei_t n, list_name_type_t type, const  void * lists) {
      glCallLists(n, static_cast<GLenum>(type), lists);
    }

    void clear(gl::bitmask<clear_buffer_flags_t> mask) {
      glClear(static_cast<GLbitfield>(mask.value));
    }

    void clear_accum(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha) {
      glClearAccum(red, green, blue, alpha);
    }

    void clear_color(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha) {
      glClearColor(red, green, blue, alpha);
    }

    void clear_depth(gl::double_t depth) {
      glClearDepth(depth);
    }

    void clear_index(gl::float_t c) {
      glClearIndex(c);
    }

    void clear_stencil(gl::int_t s) {
      glClearStencil(s);
    }

    void client_active_texture(texture_unit_t texture) {
      glClientActiveTexture(static_cast<GLenum>(texture));
    }

    void clip_plane(clip_plane_name_t plane, const  gl::double_t * equation) {
      glClipPlane(static_cast<GLenum>(plane), equation);
    }

    void color_3b(gl::byte_t red, gl::byte_t green, gl::byte_t blue) {
      glColor3b(red, green, blue);
    }

    void color_3bv(const  gl::byte_t * v) {
      glColor3bv(v);
    }

    void color_3d(gl::double_t red, gl::double_t green, gl::double_t blue) {
      glColor3d(red, green, blue);
    }

    void color_3dv(const  gl::double_t * v) {
      glColor3dv(v);
    }

    void color_3f(gl::float_t red, gl::float_t green, gl::float_t blue) {
      glColor3f(red, green, blue);
    }

    void color_3fv(const  gl::float_t * v) {
      glColor3fv(v);
    }

    void color_3i(gl::int_t red, gl::int_t green, gl::int_t blue) {
      glColor3i(red, green, blue);
    }

    void color_3iv(const  gl::int_t * v) {
      glColor3iv(v);
    }

    void color_3s(gl::short_t red, gl::short_t green, gl::short_t blue) {
      glColor3s(red, green, blue);
    }

    void color_3sv(const  gl::short_t * v) {
      glColor3sv(v);
    }

    void color_3ub(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue) {
      glColor3ub(red, green, blue);
    }

    void color_3ubv(const  gl::ubyte_t * v) {
      glColor3ubv(v);
    }

    void color_3ui(gl::uint_t red, gl::uint_t green, gl::uint_t blue) {
      glColor3ui(red, green, blue);
    }

    void color_3uiv(const  gl::uint_t * v) {
      glColor3uiv(v);
    }

    void color_3us(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue) {
      glColor3us(red, green, blue);
    }

    void color_3usv(const  gl::ushort_t * v) {
      glColor3usv(v);
    }

    void color_4b(gl::byte_t red, gl::byte_t green, gl::byte_t blue, gl::byte_t alpha) {
      glColor4b(red, green, blue, alpha);
    }

    void color_4bv(const  gl::byte_t * v) {
      glColor4bv(v);
    }

    void color_4d(gl::double_t red, gl::double_t green, gl::double_t blue, gl::double_t alpha) {
      glColor4d(red, green, blue, alpha);
    }

    void color_4dv(const  gl::double_t * v) {
      glColor4dv(v);
    }

    void color_4f(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha) {
      glColor4f(red, green, blue, alpha);
    }

    void color_4fv(const  gl::float_t * v) {
      glColor4fv(v);
    }

    void color_4i(gl::int_t red, gl::int_t green, gl::int_t blue, gl::int_t alpha) {
      glColor4i(red, green, blue, alpha);
    }

    void color_4iv(const  gl::int_t * v) {
      glColor4iv(v);
    }

    void color_4s(gl::short_t red, gl::short_t green, gl::short_t blue, gl::short_t alpha) {
      glColor4s(red, green, blue, alpha);
    }

    void color_4sv(const  gl::short_t * v) {
      glColor4sv(v);
    }

    void color_4ub(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue, gl::ubyte_t alpha) {
      glColor4ub(red, green, blue, alpha);
    }

    void color_4ubv(const  gl::ubyte_t * v) {
      glColor4ubv(v);
    }

    void color_4ui(gl::uint_t red, gl::uint_t green, gl::uint_t blue, gl::uint_t alpha) {
      glColor4ui(red, green, blue, alpha);
    }

    void color_4uiv(const  gl::uint_t * v) {
      glColor4uiv(v);
    }

    void color_4us(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue, gl::ushort_t alpha) {
      glColor4us(red, green, blue, alpha);
    }

    void color_4usv(const  gl::ushort_t * v) {
      glColor4usv(v);
    }

    void color_mask(gl::boolean_t red, gl::boolean_t green, gl::boolean_t blue, gl::boolean_t alpha) {
      glColorMask(red, green, blue, alpha);
    }

    void color_material(material_face_t face, color_material_parameter_t mode) {
      glColorMaterial(static_cast<GLenum>(face), static_cast<GLenum>(mode));
    }

    void color_pointer(gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, const  void * pointer) {
      glColorPointer(size, static_cast<GLenum>(type), stride, pointer);
    }

    void compile_shader(gl::uint_t shader) {
      glCompileShader(shader);
    }

    void compressed_tex_image_1d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::int_t border, gl::sizei_t imageSize, const  void * data) {
      glCompressedTexImage1D(static_cast<GLenum>(target), level, internalformat, width, border, imageSize, data);
    }

    void compressed_tex_image_2d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, gl::sizei_t imageSize, const  void * data) {
      glCompressedTexImage2D(static_cast<GLenum>(target), level, internalformat, width, height, border, imageSize, data);
    }

    void compressed_tex_image_3d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, gl::sizei_t imageSize, const  void * data) {
      glCompressedTexImage3D(static_cast<GLenum>(target), level, internalformat, width, height, depth, border, imageSize, data);
    }

    void compressed_tex_sub_image_1d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, gl::sizei_t imageSize, const  void * data) {
      glCompressedTexSubImage1D(static_cast<GLenum>(target), level, xoffset, width, static_cast<GLenum>(format), imageSize, data);
    }

    void compressed_tex_sub_image_2d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, gl::sizei_t imageSize, const  void * data) {
      glCompressedTexSubImage2D(static_cast<GLenum>(target), level, xoffset, yoffset, width, height, static_cast<GLenum>(format), imageSize, data);
    }

    void compressed_tex_sub_image_3d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, gl::sizei_t imageSize, const  void * data) {
      glCompressedTexSubImage3D(static_cast<GLenum>(target), level, xoffset, yoffset, zoffset, width, height, depth, static_cast<GLenum>(format), imageSize, data);
    }

    void copy_pixels(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, pixel_copy_type_t type) {
      glCopyPixels(x, y, width, height, static_cast<GLenum>(type));
    }

    void copy_tex_image_1d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::int_t border) {
      glCopyTexImage1D(static_cast<GLenum>(target), level, internalformat, x, y, width, border);
    }

    void copy_tex_image_2d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, gl::int_t border) {
      glCopyTexImage2D(static_cast<GLenum>(target), level, internalformat, x, y, width, height, border);
    }

    void copy_tex_sub_image_1d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t x, gl::int_t y, gl::sizei_t width) {
      glCopyTexSubImage1D(static_cast<GLenum>(target), level, xoffset, x, y, width);
    }

    void copy_tex_sub_image_2d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height) {
      glCopyTexSubImage2D(static_cast<GLenum>(target), level, xoffset, yoffset, x, y, width, height);
    }

    void copy_tex_sub_image_3d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height) {
      glCopyTexSubImage3D(static_cast<GLenum>(target), level, xoffset, yoffset, zoffset, x, y, width, height);
    }

    gl::uint_t create_program() {
      return glCreateProgram();
    }

    gl::uint_t create_shader(shader_type_t type) {
      return glCreateShader(static_cast<GLenum>(type));
    }

    void cull_face(cull_face_mode_t mode) {
      glCullFace(static_cast<GLenum>(mode));
    }

    void delete_buffers(gl::sizei_t n, const  gl::uint_t * buffers) {
      glDeleteBuffers(n, buffers);
    }

    void delete_lists(gl::uint_t list, gl::sizei_t range) {
      glDeleteLists(list, range);
    }

    void delete_program(gl::uint_t program) {
      glDeleteProgram(program);
    }

    void delete_queries(gl::sizei_t n, const  gl::uint_t * ids) {
      glDeleteQueries(n, ids);
    }

    void delete_shader(gl::uint_t shader) {
      glDeleteShader(shader);
    }

    void delete_textures(gl::sizei_t n, const  gl::uint_t * textures) {
      glDeleteTextures(n, textures);
    }

    void depth_func(depth_function_t func) {
      glDepthFunc(static_cast<GLenum>(func));
    }

    void depth_mask(gl::boolean_t flag) {
      glDepthMask(flag);
    }

    void depth_range(gl::double_t near_, gl::double_t far_) {
      glDepthRange(near_, far_);
    }

    void detach_shader(gl::uint_t program, gl::uint_t shader) {
      glDetachShader(program, shader);
    }

    void disable(enable_cap_t cap) {
      glDisable(static_cast<GLenum>(cap));
    }

    void disable_client_state(enable_cap_t array) {
      glDisableClientState(static_cast<GLenum>(array));
    }

    void disable_vertex_attrib_array(gl::uint_t index) {
      glDisableVertexAttribArray(index);
    }

    void draw_arrays(primitive_type_t mode, gl::int_t first, gl::sizei_t count) {
      glDrawArrays(static_cast<GLenum>(mode), first, count);
    }

    void draw_buffer(draw_buffer_mode_t buf) {
      glDrawBuffer(static_cast<GLenum>(buf));
    }

    void draw_buffers(gl::sizei_t n, const  gl::enum_t * bufs) {
      glDrawBuffers(n, bufs);
    }

    void draw_elements(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices) {
      glDrawElements(static_cast<GLenum>(mode), count, static_cast<GLenum>(type), indices);
    }

    void draw_pixels(gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * pixels) {
      glDrawPixels(width, height, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void draw_range_elements(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::sizei_t count, draw_elements_type_t type, const  void * indices) {
      glDrawRangeElements(static_cast<GLenum>(mode), start, end, count, static_cast<GLenum>(type), indices);
    }

    void edge_flag(gl::boolean_t flag) {
      glEdgeFlag(flag);
    }

    void edge_flag_pointer(gl::sizei_t stride, const  void * pointer) {
      glEdgeFlagPointer(stride, pointer);
    }

    void edge_flagv(const  gl::boolean_t * flag) {
      glEdgeFlagv(flag);
    }

    void enable(enable_cap_t cap) {
      glEnable(static_cast<GLenum>(cap));
    }

    void enable_client_state(enable_cap_t array) {
      glEnableClientState(static_cast<GLenum>(array));
    }

    void enable_vertex_attrib_array(gl::uint_t index) {
      glEnableVertexAttribArray(index);
    }

    void end() {
      glEnd();
    }

    void end_list() {
      glEndList();
    }

    void end_query(gl::enum_t target) {
      glEndQuery(target);
    }

    void eval_coord_1d(gl::double_t u) {
      glEvalCoord1d(u);
    }

    void eval_coord_1dv(const  gl::double_t * u) {
      glEvalCoord1dv(u);
    }

    void eval_coord_1f(gl::float_t u) {
      glEvalCoord1f(u);
    }

    void eval_coord_1fv(const  gl::float_t * u) {
      glEvalCoord1fv(u);
    }

    void eval_coord_2d(gl::double_t u, gl::double_t v) {
      glEvalCoord2d(u, v);
    }

    void eval_coord_2dv(const  gl::double_t * u) {
      glEvalCoord2dv(u);
    }

    void eval_coord_2f(gl::float_t u, gl::float_t v) {
      glEvalCoord2f(u, v);
    }

    void eval_coord_2fv(const  gl::float_t * u) {
      glEvalCoord2fv(u);
    }

    void eval_mesh_1(mesh_mode_1_t mode, gl::int_t i1, gl::int_t i2) {
      glEvalMesh1(static_cast<GLenum>(mode), i1, i2);
    }

    void eval_mesh_2(mesh_mode_2_t mode, gl::int_t i1, gl::int_t i2, gl::int_t j1, gl::int_t j2) {
      glEvalMesh2(static_cast<GLenum>(mode), i1, i2, j1, j2);
    }

    void eval_point_1(gl::int_t i) {
      glEvalPoint1(i);
    }

    void eval_point_2(gl::int_t i, gl::int_t j) {
      glEvalPoint2(i, j);
    }

    void feedback_buffer(gl::sizei_t size, feedback_type_t type, gl::float_t * buffer) {
      glFeedbackBuffer(size, static_cast<GLenum>(type), buffer);
    }

    void finish() {
      glFinish();
    }

    void flush() {
      glFlush();
    }

    void fog_coord_pointer(fog_pointer_type_ext_t type, gl::sizei_t stride, const  void * pointer) {
      glFogCoordPointer(static_cast<GLenum>(type), stride, pointer);
    }

    void fog_coordd(gl::double_t coord) {
      glFogCoordd(coord);
    }

    void fog_coorddv(const  gl::double_t * coord) {
      glFogCoorddv(coord);
    }

    void fog_coordf(gl::float_t coord) {
      glFogCoordf(coord);
    }

    void fog_coordfv(const  gl::float_t * coord) {
      glFogCoordfv(coord);
    }

    void fogf(fog_parameter_t pname, gl::float_t param) {
      glFogf(static_cast<GLenum>(pname), param);
    }

    void fogfv(fog_parameter_t pname, const  gl::float_t * params) {
      glFogfv(static_cast<GLenum>(pname), params);
    }

    void fogi(fog_parameter_t pname, gl::int_t param) {
      glFogi(static_cast<GLenum>(pname), param);
    }

    void fogiv(fog_parameter_t pname, const  gl::int_t * params) {
      glFogiv(static_cast<GLenum>(pname), params);
    }

    void front_face(front_face_direction_t mode) {
      glFrontFace(static_cast<GLenum>(mode));
    }

    void frustum(gl::double_t left, gl::double_t right, gl::double_t bottom, gl::double_t top, gl::double_t zNear, gl::double_t zFar) {
      glFrustum(left, right, bottom, top, zNear, zFar);
    }

    void gen_buffers(gl::sizei_t n, gl::uint_t * buffers) {
      glGenBuffers(n, buffers);
    }

    gl::uint_t gen_lists(gl::sizei_t range) {
      return glGenLists(range);
    }

    void gen_queries(gl::sizei_t n, gl::uint_t * ids) {
      glGenQueries(n, ids);
    }

    void gen_textures(gl::sizei_t n, gl::uint_t * textures) {
      glGenTextures(n, textures);
    }

    void get_active_attrib(gl::uint_t program, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::int_t * size, attrib_type_t * type, gl::char_t * name) {
      glGetActiveAttrib(program, index, bufSize, length, size, reinterpret_cast<GLenum *>(type), name);
    }

    void get_active_uniform(gl::uint_t program, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::int_t * size, uniform_type_t * type, gl::char_t * name) {
      glGetActiveUniform(program, index, bufSize, length, size, reinterpret_cast<GLenum *>(type), name);
    }

    void get_attached_shaders(gl::uint_t program, gl::sizei_t maxCount, gl::sizei_t * count, gl::uint_t * shaders) {
      glGetAttachedShaders(program, maxCount, count, shaders);
    }

    gl::int_t get_attrib_location(gl::uint_t program, const  gl::char_t * name) {
      return glGetAttribLocation(program, name);
    }

    void get_booleanv(get_p_name_t pname, gl::boolean_t * data) {
      glGetBooleanv(static_cast<GLenum>(pname), data);
    }

    void get_buffer_parameteriv(buffer_target_arb_t target, buffer_p_name_arb_t pname, gl::int_t * params) {
      glGetBufferParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    void get_buffer_pointerv(buffer_target_arb_t target, gl::enum_t pname, void ** params) {
      glGetBufferPointerv(static_cast<GLenum>(target), pname, params);
    }

    void get_buffer_sub_data(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t size, void * data) {
      glGetBufferSubData(static_cast<GLenum>(target), offset, size, data);
    }

    void get_clip_plane(clip_plane_name_t plane, gl::double_t * equation) {
      glGetClipPlane(static_cast<GLenum>(plane), equation);
    }

    void get_compressed_tex_image(texture_target_t target, gl::int_t level, void * img) {
      glGetCompressedTexImage(static_cast<GLenum>(target), level, img);
    }

    void get_doublev(get_p_name_t pname, gl::double_t * data) {
      glGetDoublev(static_cast<GLenum>(pname), data);
    }

    error_code_t get_error() {
      return static_cast<error_code_t>(glGetError());
    }

    void get_floatv(get_p_name_t pname, gl::float_t * data) {
      glGetFloatv(static_cast<GLenum>(pname), data);
    }

    void get_integerv(get_p_name_t pname, gl::int_t * data) {
      glGetIntegerv(static_cast<GLenum>(pname), data);
    }

    void get_lightfv(light_name_t light, light_parameter_t pname, gl::float_t * params) {
      glGetLightfv(static_cast<GLenum>(light), static_cast<GLenum>(pname), params);
    }

    void get_lightiv(light_name_t light, light_parameter_t pname, gl::int_t * params) {
      glGetLightiv(static_cast<GLenum>(light), static_cast<GLenum>(pname), params);
    }

    void get_mapdv(map_target_t target, get_map_query_t query, gl::double_t * v) {
      glGetMapdv(static_cast<GLenum>(target), static_cast<GLenum>(query), v);
    }

    void get_mapfv(map_target_t target, get_map_query_t query, gl::float_t * v) {
      glGetMapfv(static_cast<GLenum>(target), static_cast<GLenum>(query), v);
    }

    void get_mapiv(map_target_t target, get_map_query_t query, gl::int_t * v) {
      glGetMapiv(static_cast<GLenum>(target), static_cast<GLenum>(query), v);
    }

    void get_materialfv(material_face_t face, material_parameter_t pname, gl::float_t * params) {
      glGetMaterialfv(static_cast<GLenum>(face), static_cast<GLenum>(pname), params);
    }

    void get_materialiv(material_face_t face, material_parameter_t pname, gl::int_t * params) {
      glGetMaterialiv(static_cast<GLenum>(face), static_cast<GLenum>(pname), params);
    }

    void get_pixel_mapfv(pixel_map_t map, gl::float_t * values) {
      glGetPixelMapfv(static_cast<GLenum>(map), values);
    }

    void get_pixel_mapuiv(pixel_map_t map, gl::uint_t * values) {
      glGetPixelMapuiv(static_cast<GLenum>(map), values);
    }

    void get_pixel_mapusv(pixel_map_t map, gl::ushort_t * values) {
      glGetPixelMapusv(static_cast<GLenum>(map), values);
    }

    void get_pointerv(get_pointerv_p_name_t pname, void ** params) {
      glGetPointerv(static_cast<GLenum>(pname), params);
    }

    void get_polygon_stipple(gl::ubyte_t * mask) {
      glGetPolygonStipple(mask);
    }

    void get_program_info_log(gl::uint_t program, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * infoLog) {
      glGetProgramInfoLog(program, bufSize, length, infoLog);
    }

    void get_programiv(gl::uint_t program, get_programiv_p_name_t pname, gl::int_t * params) {
      glGetProgramiv(program, static_cast<GLenum>(pname), params);
    }

    void get_query_objectiv(gl::uint_t id, gl::enum_t pname, gl::int_t * params) {
      glGetQueryObjectiv(id, pname, params);
    }

    void get_query_objectuiv(gl::uint_t id, gl::enum_t pname, gl::uint_t * params) {
      glGetQueryObjectuiv(id, pname, params);
    }

    void get_queryiv(gl::enum_t target, gl::enum_t pname, gl::int_t * params) {
      glGetQueryiv(target, pname, params);
    }

    void get_shader_info_log(gl::uint_t shader, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * infoLog) {
      glGetShaderInfoLog(shader, bufSize, length, infoLog);
    }

    void get_shader_source(gl::uint_t shader, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * source) {
      glGetShaderSource(shader, bufSize, length, source);
    }

    void get_shaderiv(gl::uint_t shader, get_shaderiv_p_name_t pname, gl::int_t * params) {
      glGetShaderiv(shader, static_cast<GLenum>(pname), params);
    }

    const gl::ubyte_t * get_string(string_name_t name) {
      return glGetString(static_cast<GLenum>(name));
    }

    void get_tex_envfv(texture_env_target_t target, texture_env_parameter_t pname, gl::float_t * params) {
      glGetTexEnvfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    void get_tex_enviv(texture_env_target_t target, texture_env_parameter_t pname, gl::int_t * params) {
      glGetTexEnviv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    void get_tex_gendv(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::double_t * params) {
      glGetTexGendv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
    }

    void get_tex_genfv(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::float_t * params) {
      glGetTexGenfv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
    }

    void get_tex_geniv(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::int_t * params) {
      glGetTexGeniv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
    }

    void get_tex_image(texture_target_t target, gl::int_t level, pixel_format_t format, pixel_type_t type, void * pixels) {
      glGetTexImage(static_cast<GLenum>(target), level, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void get_tex_level_parameterfv(texture_target_t target, gl::int_t level, get_texture_parameter_t pname, gl::float_t * params) {
      glGetTexLevelParameterfv(static_cast<GLenum>(target), level, static_cast<GLenum>(pname), params);
    }

    void get_tex_level_parameteriv(texture_target_t target, gl::int_t level, get_texture_parameter_t pname, gl::int_t * params) {
      glGetTexLevelParameteriv(static_cast<GLenum>(target), level, static_cast<GLenum>(pname), params);
    }

    void get_tex_parameterfv(texture_target_t target, get_texture_parameter_t pname, gl::float_t * params) {
      glGetTexParameterfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    void get_tex_parameteriv(texture_target_t target, get_texture_parameter_t pname, gl::int_t * params) {
      glGetTexParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    gl::int_t get_uniform_location(gl::uint_t program, const  gl::char_t * name) {
      return glGetUniformLocation(program, name);
    }

    void get_uniformfv(gl::uint_t program, gl::int_t location, gl::float_t * params) {
      glGetUniformfv(program, location, params);
    }

    void get_uniformiv(gl::uint_t program, gl::int_t location, gl::int_t * params) {
      glGetUniformiv(program, location, params);
    }

    void get_vertex_attrib_pointerv(gl::uint_t index, vertex_attrib_pointer_property_arb_t pname, void ** pointer) {
      glGetVertexAttribPointerv(index, static_cast<GLenum>(pname), pointer);
    }

    void get_vertex_attribdv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::double_t * params) {
      glGetVertexAttribdv(index, static_cast<GLenum>(pname), params);
    }

    void get_vertex_attribfv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::float_t * params) {
      glGetVertexAttribfv(index, static_cast<GLenum>(pname), params);
    }

    void get_vertex_attribiv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::int_t * params) {
      glGetVertexAttribiv(index, static_cast<GLenum>(pname), params);
    }

    void hint(hint_target_t target, hint_mode_t mode) {
      glHint(static_cast<GLenum>(target), static_cast<GLenum>(mode));
    }

    void index_mask(gl::uint_t mask) {
      glIndexMask(mask);
    }

    void index_pointer(index_pointer_type_t type, gl::sizei_t stride, const  void * pointer) {
      glIndexPointer(static_cast<GLenum>(type), stride, pointer);
    }

    void indexd(gl::double_t c) {
      glIndexd(c);
    }

    void indexdv(const  gl::double_t * c) {
      glIndexdv(c);
    }

    void indexf(gl::float_t c) {
      glIndexf(c);
    }

    void indexfv(const  gl::float_t * c) {
      glIndexfv(c);
    }

    void indexi(gl::int_t c) {
      glIndexi(c);
    }

    void indexiv(const  gl::int_t * c) {
      glIndexiv(c);
    }

    void indexs(gl::short_t c) {
      glIndexs(c);
    }

    void indexsv(const  gl::short_t * c) {
      glIndexsv(c);
    }

    void indexub(gl::ubyte_t c) {
      glIndexub(c);
    }

    void indexubv(const  gl::ubyte_t * c) {
      glIndexubv(c);
    }

    void init_names() {
      glInitNames();
    }

    void interleaved_arrays(interleaved_array_format_t format, gl::sizei_t stride, const  void * pointer) {
      glInterleavedArrays(static_cast<GLenum>(format), stride, pointer);
    }

    gl::boolean_t is_buffer(gl::uint_t buffer) {
      return glIsBuffer(buffer);
    }

    gl::boolean_t is_enabled(enable_cap_t cap) {
      return glIsEnabled(static_cast<GLenum>(cap));
    }

    gl::boolean_t is_list(gl::uint_t list) {
      return glIsList(list);
    }

    gl::boolean_t is_program(gl::uint_t program) {
      return glIsProgram(program);
    }

    gl::boolean_t is_query(gl::uint_t id) {
      return glIsQuery(id);
    }

    gl::boolean_t is_shader(gl::uint_t shader) {
      return glIsShader(shader);
    }

    gl::boolean_t is_texture(gl::uint_t texture) {
      return glIsTexture(texture);
    }

    void light_modelf(light_model_parameter_t pname, gl::float_t param) {
      glLightModelf(static_cast<GLenum>(pname), param);
    }

    void light_modelfv(light_model_parameter_t pname, const  gl::float_t * params) {
      glLightModelfv(static_cast<GLenum>(pname), params);
    }

    void light_modeli(light_model_parameter_t pname, gl::int_t param) {
      glLightModeli(static_cast<GLenum>(pname), param);
    }

    void light_modeliv(light_model_parameter_t pname, const  gl::int_t * params) {
      glLightModeliv(static_cast<GLenum>(pname), params);
    }

    void lightf(light_name_t light, light_parameter_t pname, gl::float_t param) {
      glLightf(static_cast<GLenum>(light), static_cast<GLenum>(pname), param);
    }

    void lightfv(light_name_t light, light_parameter_t pname, const  gl::float_t * params) {
      glLightfv(static_cast<GLenum>(light), static_cast<GLenum>(pname), params);
    }

    void lighti(light_name_t light, light_parameter_t pname, gl::int_t param) {
      glLighti(static_cast<GLenum>(light), static_cast<GLenum>(pname), param);
    }

    void lightiv(light_name_t light, light_parameter_t pname, const  gl::int_t * params) {
      glLightiv(static_cast<GLenum>(light), static_cast<GLenum>(pname), params);
    }

    void line_stipple(gl::int_t factor, gl::ushort_t pattern) {
      glLineStipple(factor, pattern);
    }

    void line_width(gl::float_t width) {
      glLineWidth(width);
    }

    void link_program(gl::uint_t program) {
      glLinkProgram(program);
    }

    void list_base(gl::uint_t base) {
      glListBase(base);
    }

    void load_identity() {
      glLoadIdentity();
    }

    void load_matrixd(const  gl::double_t * m) {
      glLoadMatrixd(m);
    }

    void load_matrixf(const  gl::float_t * m) {
      glLoadMatrixf(m);
    }

    void load_name(gl::uint_t name) {
      glLoadName(name);
    }

    void load_transpose_matrixd(const  gl::double_t * m) {
      glLoadTransposeMatrixd(m);
    }

    void load_transpose_matrixf(const  gl::float_t * m) {
      glLoadTransposeMatrixf(m);
    }

    void logic_op(logic_op_t opcode) {
      glLogicOp(static_cast<GLenum>(opcode));
    }

    void map_1d(map_target_t target, gl::double_t u1, gl::double_t u2, gl::int_t stride, gl::int_t order, const  gl::double_t * points) {
      glMap1d(static_cast<GLenum>(target), u1, u2, stride, order, points);
    }

    void map_1f(map_target_t target, gl::float_t u1, gl::float_t u2, gl::int_t stride, gl::int_t order, const  gl::float_t * points) {
      glMap1f(static_cast<GLenum>(target), u1, u2, stride, order, points);
    }

    void map_2d(map_target_t target, gl::double_t u1, gl::double_t u2, gl::int_t ustride, gl::int_t uorder, gl::double_t v1, gl::double_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::double_t * points) {
      glMap2d(static_cast<GLenum>(target), u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    }

    void map_2f(map_target_t target, gl::float_t u1, gl::float_t u2, gl::int_t ustride, gl::int_t uorder, gl::float_t v1, gl::float_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::float_t * points) {
      glMap2f(static_cast<GLenum>(target), u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    }

    void * map_buffer(buffer_target_arb_t target, gl::enum_t access) {
      return glMapBuffer(static_cast<GLenum>(target), access);
    }

    void map_grid_1d(gl::int_t un, gl::double_t u1, gl::double_t u2) {
      glMapGrid1d(un, u1, u2);
    }

    void map_grid_1f(gl::int_t un, gl::float_t u1, gl::float_t u2) {
      glMapGrid1f(un, u1, u2);
    }

    void map_grid_2d(gl::int_t un, gl::double_t u1, gl::double_t u2, gl::int_t vn, gl::double_t v1, gl::double_t v2) {
      glMapGrid2d(un, u1, u2, vn, v1, v2);
    }

    void map_grid_2f(gl::int_t un, gl::float_t u1, gl::float_t u2, gl::int_t vn, gl::float_t v1, gl::float_t v2) {
      glMapGrid2f(un, u1, u2, vn, v1, v2);
    }

    void materialf(material_face_t face, material_parameter_t pname, gl::float_t param) {
      glMaterialf(static_cast<GLenum>(face), static_cast<GLenum>(pname), param);
    }

    void materialfv(material_face_t face, material_parameter_t pname, const  gl::float_t * params) {
      glMaterialfv(static_cast<GLenum>(face), static_cast<GLenum>(pname), params);
    }

    void materiali(material_face_t face, material_parameter_t pname, gl::int_t param) {
      glMateriali(static_cast<GLenum>(face), static_cast<GLenum>(pname), param);
    }

    void materialiv(material_face_t face, material_parameter_t pname, const  gl::int_t * params) {
      glMaterialiv(static_cast<GLenum>(face), static_cast<GLenum>(pname), params);
    }

    void matrix_mode(matrix_mode_t mode) {
      glMatrixMode(static_cast<GLenum>(mode));
    }

    void mult_matrixd(const  gl::double_t * m) {
      glMultMatrixd(m);
    }

    void mult_matrixf(const  gl::float_t * m) {
      glMultMatrixf(m);
    }

    void mult_transpose_matrixd(const  gl::double_t * m) {
      glMultTransposeMatrixd(m);
    }

    void mult_transpose_matrixf(const  gl::float_t * m) {
      glMultTransposeMatrixf(m);
    }

    void multi_draw_arrays(primitive_type_t mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t drawcount) {
      glMultiDrawArrays(static_cast<GLenum>(mode), first, count, drawcount);
    }

    void multi_draw_elements(primitive_type_t mode, const  gl::sizei_t * count, draw_elements_type_t type, const  void ** indices, gl::sizei_t drawcount) {
      glMultiDrawElements(static_cast<GLenum>(mode), count, static_cast<GLenum>(type), indices, drawcount);
    }

    void multi_tex_coord_1d(texture_unit_t target, gl::double_t s) {
      glMultiTexCoord1d(static_cast<GLenum>(target), s);
    }

    void multi_tex_coord_1dv(texture_unit_t target, const  gl::double_t * v) {
      glMultiTexCoord1dv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_1f(texture_unit_t target, gl::float_t s) {
      glMultiTexCoord1f(static_cast<GLenum>(target), s);
    }

    void multi_tex_coord_1fv(texture_unit_t target, const  gl::float_t * v) {
      glMultiTexCoord1fv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_1i(texture_unit_t target, gl::int_t s) {
      glMultiTexCoord1i(static_cast<GLenum>(target), s);
    }

    void multi_tex_coord_1iv(texture_unit_t target, const  gl::int_t * v) {
      glMultiTexCoord1iv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_1s(texture_unit_t target, gl::short_t s) {
      glMultiTexCoord1s(static_cast<GLenum>(target), s);
    }

    void multi_tex_coord_1sv(texture_unit_t target, const  gl::short_t * v) {
      glMultiTexCoord1sv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_2d(texture_unit_t target, gl::double_t s, gl::double_t t) {
      glMultiTexCoord2d(static_cast<GLenum>(target), s, t);
    }

    void multi_tex_coord_2dv(texture_unit_t target, const  gl::double_t * v) {
      glMultiTexCoord2dv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_2f(texture_unit_t target, gl::float_t s, gl::float_t t) {
      glMultiTexCoord2f(static_cast<GLenum>(target), s, t);
    }

    void multi_tex_coord_2fv(texture_unit_t target, const  gl::float_t * v) {
      glMultiTexCoord2fv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_2i(texture_unit_t target, gl::int_t s, gl::int_t t) {
      glMultiTexCoord2i(static_cast<GLenum>(target), s, t);
    }

    void multi_tex_coord_2iv(texture_unit_t target, const  gl::int_t * v) {
      glMultiTexCoord2iv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_2s(texture_unit_t target, gl::short_t s, gl::short_t t) {
      glMultiTexCoord2s(static_cast<GLenum>(target), s, t);
    }

    void multi_tex_coord_2sv(texture_unit_t target, const  gl::short_t * v) {
      glMultiTexCoord2sv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_3d(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r) {
      glMultiTexCoord3d(static_cast<GLenum>(target), s, t, r);
    }

    void multi_tex_coord_3dv(texture_unit_t target, const  gl::double_t * v) {
      glMultiTexCoord3dv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_3f(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r) {
      glMultiTexCoord3f(static_cast<GLenum>(target), s, t, r);
    }

    void multi_tex_coord_3fv(texture_unit_t target, const  gl::float_t * v) {
      glMultiTexCoord3fv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_3i(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r) {
      glMultiTexCoord3i(static_cast<GLenum>(target), s, t, r);
    }

    void multi_tex_coord_3iv(texture_unit_t target, const  gl::int_t * v) {
      glMultiTexCoord3iv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_3s(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r) {
      glMultiTexCoord3s(static_cast<GLenum>(target), s, t, r);
    }

    void multi_tex_coord_3sv(texture_unit_t target, const  gl::short_t * v) {
      glMultiTexCoord3sv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_4d(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r, gl::double_t q) {
      glMultiTexCoord4d(static_cast<GLenum>(target), s, t, r, q);
    }

    void multi_tex_coord_4dv(texture_unit_t target, const  gl::double_t * v) {
      glMultiTexCoord4dv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_4f(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t q) {
      glMultiTexCoord4f(static_cast<GLenum>(target), s, t, r, q);
    }

    void multi_tex_coord_4fv(texture_unit_t target, const  gl::float_t * v) {
      glMultiTexCoord4fv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_4i(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r, gl::int_t q) {
      glMultiTexCoord4i(static_cast<GLenum>(target), s, t, r, q);
    }

    void multi_tex_coord_4iv(texture_unit_t target, const  gl::int_t * v) {
      glMultiTexCoord4iv(static_cast<GLenum>(target), v);
    }

    void multi_tex_coord_4s(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r, gl::short_t q) {
      glMultiTexCoord4s(static_cast<GLenum>(target), s, t, r, q);
    }

    void multi_tex_coord_4sv(texture_unit_t target, const  gl::short_t * v) {
      glMultiTexCoord4sv(static_cast<GLenum>(target), v);
    }

    void new_list(gl::uint_t list, list_mode_t mode) {
      glNewList(list, static_cast<GLenum>(mode));
    }

    void normal_3b(gl::byte_t nx, gl::byte_t ny, gl::byte_t nz) {
      glNormal3b(nx, ny, nz);
    }

    void normal_3bv(const  gl::byte_t * v) {
      glNormal3bv(v);
    }

    void normal_3d(gl::double_t nx, gl::double_t ny, gl::double_t nz) {
      glNormal3d(nx, ny, nz);
    }

    void normal_3dv(const  gl::double_t * v) {
      glNormal3dv(v);
    }

    void normal_3f(gl::float_t nx, gl::float_t ny, gl::float_t nz) {
      glNormal3f(nx, ny, nz);
    }

    void normal_3fv(const  gl::float_t * v) {
      glNormal3fv(v);
    }

    void normal_3i(gl::int_t nx, gl::int_t ny, gl::int_t nz) {
      glNormal3i(nx, ny, nz);
    }

    void normal_3iv(const  gl::int_t * v) {
      glNormal3iv(v);
    }

    void normal_3s(gl::short_t nx, gl::short_t ny, gl::short_t nz) {
      glNormal3s(nx, ny, nz);
    }

    void normal_3sv(const  gl::short_t * v) {
      glNormal3sv(v);
    }

    void normal_pointer(normal_pointer_type_t type, gl::sizei_t stride, const  void * pointer) {
      glNormalPointer(static_cast<GLenum>(type), stride, pointer);
    }

    void ortho(gl::double_t left, gl::double_t right, gl::double_t bottom, gl::double_t top, gl::double_t zNear, gl::double_t zFar) {
      glOrtho(left, right, bottom, top, zNear, zFar);
    }

    void pass_through(gl::float_t token) {
      glPassThrough(token);
    }

    void pixel_mapfv(pixel_map_t map, gl::sizei_t mapsize, const  gl::float_t * values) {
      glPixelMapfv(static_cast<GLenum>(map), mapsize, values);
    }

    void pixel_mapuiv(pixel_map_t map, gl::sizei_t mapsize, const  gl::uint_t * values) {
      glPixelMapuiv(static_cast<GLenum>(map), mapsize, values);
    }

    void pixel_mapusv(pixel_map_t map, gl::sizei_t mapsize, const  gl::ushort_t * values) {
      glPixelMapusv(static_cast<GLenum>(map), mapsize, values);
    }

    void pixel_storef(pixel_store_parameter_t pname, gl::float_t param) {
      glPixelStoref(static_cast<GLenum>(pname), param);
    }

    void pixel_storei(pixel_store_parameter_t pname, gl::int_t param) {
      glPixelStorei(static_cast<GLenum>(pname), param);
    }

    void pixel_transferf(pixel_transfer_parameter_t pname, gl::float_t param) {
      glPixelTransferf(static_cast<GLenum>(pname), param);
    }

    void pixel_transferi(pixel_transfer_parameter_t pname, gl::int_t param) {
      glPixelTransferi(static_cast<GLenum>(pname), param);
    }

    void pixel_zoom(gl::float_t xfactor, gl::float_t yfactor) {
      glPixelZoom(xfactor, yfactor);
    }

    void point_parameterf(gl::enum_t pname, gl::float_t param) {
      glPointParameterf(pname, param);
    }

    void point_parameterfv(gl::enum_t pname, const  gl::float_t * params) {
      glPointParameterfv(pname, params);
    }

    void point_parameteri(gl::enum_t pname, gl::int_t param) {
      glPointParameteri(pname, param);
    }

    void point_parameteriv(gl::enum_t pname, const  gl::int_t * params) {
      glPointParameteriv(pname, params);
    }

    void point_size(gl::float_t size) {
      glPointSize(size);
    }

    void polygon_mode(material_face_t face, polygon_mode_t mode) {
      glPolygonMode(static_cast<GLenum>(face), static_cast<GLenum>(mode));
    }

    void polygon_offset(gl::float_t factor, gl::float_t units) {
      glPolygonOffset(factor, units);
    }

    void polygon_stipple(const  gl::ubyte_t * mask) {
      glPolygonStipple(mask);
    }

    void pop_attrib() {
      glPopAttrib();
    }

    void pop_client_attrib() {
      glPopClientAttrib();
    }

    void pop_matrix() {
      glPopMatrix();
    }

    void pop_name() {
      glPopName();
    }

    void prioritize_textures(gl::sizei_t n, const  gl::uint_t * textures, const  gl::float_t * priorities) {
      glPrioritizeTextures(n, textures, priorities);
    }

    void push_attrib(gl::bitmask<attrib_flags_t> mask) {
      glPushAttrib(static_cast<GLbitfield>(mask.value));
    }

    void push_client_attrib(gl::bitmask<client_attrib_flags_t> mask) {
      glPushClientAttrib(static_cast<GLbitfield>(mask.value));
    }

    void push_matrix() {
      glPushMatrix();
    }

    void push_name(gl::uint_t name) {
      glPushName(name);
    }

    void raster_pos_2d(gl::double_t x, gl::double_t y) {
      glRasterPos2d(x, y);
    }

    void raster_pos_2dv(const  gl::double_t * v) {
      glRasterPos2dv(v);
    }

    void raster_pos_2f(gl::float_t x, gl::float_t y) {
      glRasterPos2f(x, y);
    }

    void raster_pos_2fv(const  gl::float_t * v) {
      glRasterPos2fv(v);
    }

    void raster_pos_2i(gl::int_t x, gl::int_t y) {
      glRasterPos2i(x, y);
    }

    void raster_pos_2iv(const  gl::int_t * v) {
      glRasterPos2iv(v);
    }

    void raster_pos_2s(gl::short_t x, gl::short_t y) {
      glRasterPos2s(x, y);
    }

    void raster_pos_2sv(const  gl::short_t * v) {
      glRasterPos2sv(v);
    }

    void raster_pos_3d(gl::double_t x, gl::double_t y, gl::double_t z) {
      glRasterPos3d(x, y, z);
    }

    void raster_pos_3dv(const  gl::double_t * v) {
      glRasterPos3dv(v);
    }

    void raster_pos_3f(gl::float_t x, gl::float_t y, gl::float_t z) {
      glRasterPos3f(x, y, z);
    }

    void raster_pos_3fv(const  gl::float_t * v) {
      glRasterPos3fv(v);
    }

    void raster_pos_3i(gl::int_t x, gl::int_t y, gl::int_t z) {
      glRasterPos3i(x, y, z);
    }

    void raster_pos_3iv(const  gl::int_t * v) {
      glRasterPos3iv(v);
    }

    void raster_pos_3s(gl::short_t x, gl::short_t y, gl::short_t z) {
      glRasterPos3s(x, y, z);
    }

    void raster_pos_3sv(const  gl::short_t * v) {
      glRasterPos3sv(v);
    }

    void raster_pos_4d(gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w) {
      glRasterPos4d(x, y, z, w);
    }

    void raster_pos_4dv(const  gl::double_t * v) {
      glRasterPos4dv(v);
    }

    void raster_pos_4f(gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w) {
      glRasterPos4f(x, y, z, w);
    }

    void raster_pos_4fv(const  gl::float_t * v) {
      glRasterPos4fv(v);
    }

    void raster_pos_4i(gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w) {
      glRasterPos4i(x, y, z, w);
    }

    void raster_pos_4iv(const  gl::int_t * v) {
      glRasterPos4iv(v);
    }

    void raster_pos_4s(gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w) {
      glRasterPos4s(x, y, z, w);
    }

    void raster_pos_4sv(const  gl::short_t * v) {
      glRasterPos4sv(v);
    }

    void read_buffer(read_buffer_mode_t src) {
      glReadBuffer(static_cast<GLenum>(src));
    }

    void read_pixels(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, void * pixels) {
      glReadPixels(x, y, width, height, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void rectd(gl::double_t x1, gl::double_t y1, gl::double_t x2, gl::double_t y2) {
      glRectd(x1, y1, x2, y2);
    }

    void rectdv(const  gl::double_t * v1, const  gl::double_t * v2) {
      glRectdv(v1, v2);
    }

    void rectf(gl::float_t x1, gl::float_t y1, gl::float_t x2, gl::float_t y2) {
      glRectf(x1, y1, x2, y2);
    }

    void rectfv(const  gl::float_t * v1, const  gl::float_t * v2) {
      glRectfv(v1, v2);
    }

    void recti(gl::int_t x1, gl::int_t y1, gl::int_t x2, gl::int_t y2) {
      glRecti(x1, y1, x2, y2);
    }

    void rectiv(const  gl::int_t * v1, const  gl::int_t * v2) {
      glRectiv(v1, v2);
    }

    void rects(gl::short_t x1, gl::short_t y1, gl::short_t x2, gl::short_t y2) {
      glRects(x1, y1, x2, y2);
    }

    void rectsv(const  gl::short_t * v1, const  gl::short_t * v2) {
      glRectsv(v1, v2);
    }

    gl::int_t render_mode(rendering_mode_t mode) {
      return glRenderMode(static_cast<GLenum>(mode));
    }

    void rotated(gl::double_t angle, gl::double_t x, gl::double_t y, gl::double_t z) {
      glRotated(angle, x, y, z);
    }

    void rotatef(gl::float_t angle, gl::float_t x, gl::float_t y, gl::float_t z) {
      glRotatef(angle, x, y, z);
    }

    void sample_coverage(gl::float_t value, gl::boolean_t invert) {
      glSampleCoverage(value, invert);
    }

    void scaled(gl::double_t x, gl::double_t y, gl::double_t z) {
      glScaled(x, y, z);
    }

    void scalef(gl::float_t x, gl::float_t y, gl::float_t z) {
      glScalef(x, y, z);
    }

    void scissor(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height) {
      glScissor(x, y, width, height);
    }

    void secondary_color_3b(gl::byte_t red, gl::byte_t green, gl::byte_t blue) {
      glSecondaryColor3b(red, green, blue);
    }

    void secondary_color_3bv(const  gl::byte_t * v) {
      glSecondaryColor3bv(v);
    }

    void secondary_color_3d(gl::double_t red, gl::double_t green, gl::double_t blue) {
      glSecondaryColor3d(red, green, blue);
    }

    void secondary_color_3dv(const  gl::double_t * v) {
      glSecondaryColor3dv(v);
    }

    void secondary_color_3f(gl::float_t red, gl::float_t green, gl::float_t blue) {
      glSecondaryColor3f(red, green, blue);
    }

    void secondary_color_3fv(const  gl::float_t * v) {
      glSecondaryColor3fv(v);
    }

    void secondary_color_3i(gl::int_t red, gl::int_t green, gl::int_t blue) {
      glSecondaryColor3i(red, green, blue);
    }

    void secondary_color_3iv(const  gl::int_t * v) {
      glSecondaryColor3iv(v);
    }

    void secondary_color_3s(gl::short_t red, gl::short_t green, gl::short_t blue) {
      glSecondaryColor3s(red, green, blue);
    }

    void secondary_color_3sv(const  gl::short_t * v) {
      glSecondaryColor3sv(v);
    }

    void secondary_color_3ub(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue) {
      glSecondaryColor3ub(red, green, blue);
    }

    void secondary_color_3ubv(const  gl::ubyte_t * v) {
      glSecondaryColor3ubv(v);
    }

    void secondary_color_3ui(gl::uint_t red, gl::uint_t green, gl::uint_t blue) {
      glSecondaryColor3ui(red, green, blue);
    }

    void secondary_color_3uiv(const  gl::uint_t * v) {
      glSecondaryColor3uiv(v);
    }

    void secondary_color_3us(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue) {
      glSecondaryColor3us(red, green, blue);
    }

    void secondary_color_3usv(const  gl::ushort_t * v) {
      glSecondaryColor3usv(v);
    }

    void secondary_color_pointer(gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, const  void * pointer) {
      glSecondaryColorPointer(size, static_cast<GLenum>(type), stride, pointer);
    }

    void select_buffer(gl::sizei_t size, gl::uint_t * buffer) {
      glSelectBuffer(size, buffer);
    }

    void shade_model(shading_model_t mode) {
      glShadeModel(static_cast<GLenum>(mode));
    }

    void shader_source(gl::uint_t shader, gl::sizei_t count, const  gl::char_t ** string, const  gl::int_t * length) {
      glShaderSource(shader, count, string, length);
    }

    void stencil_func(stencil_function_t func, gl::int_t ref, gl::uint_t mask) {
      glStencilFunc(static_cast<GLenum>(func), ref, mask);
    }

    void stencil_func_separate(stencil_face_direction_t face, stencil_function_t func, gl::int_t ref, gl::uint_t mask) {
      glStencilFuncSeparate(static_cast<GLenum>(face), static_cast<GLenum>(func), ref, mask);
    }

    void stencil_mask(gl::uint_t mask) {
      glStencilMask(mask);
    }

    void stencil_mask_separate(stencil_face_direction_t face, gl::uint_t mask) {
      glStencilMaskSeparate(static_cast<GLenum>(face), mask);
    }

    void stencil_op(stencil_op_t fail, stencil_op_t zfail, stencil_op_t zpass) {
      glStencilOp(static_cast<GLenum>(fail), static_cast<GLenum>(zfail), static_cast<GLenum>(zpass));
    }

    void stencil_op_separate(stencil_face_direction_t face, stencil_op_t sfail, stencil_op_t dpfail, stencil_op_t dppass) {
      glStencilOpSeparate(static_cast<GLenum>(face), static_cast<GLenum>(sfail), static_cast<GLenum>(dpfail), static_cast<GLenum>(dppass));
    }

    void tex_coord_1d(gl::double_t s) {
      glTexCoord1d(s);
    }

    void tex_coord_1dv(const  gl::double_t * v) {
      glTexCoord1dv(v);
    }

    void tex_coord_1f(gl::float_t s) {
      glTexCoord1f(s);
    }

    void tex_coord_1fv(const  gl::float_t * v) {
      glTexCoord1fv(v);
    }

    void tex_coord_1i(gl::int_t s) {
      glTexCoord1i(s);
    }

    void tex_coord_1iv(const  gl::int_t * v) {
      glTexCoord1iv(v);
    }

    void tex_coord_1s(gl::short_t s) {
      glTexCoord1s(s);
    }

    void tex_coord_1sv(const  gl::short_t * v) {
      glTexCoord1sv(v);
    }

    void tex_coord_2d(gl::double_t s, gl::double_t t) {
      glTexCoord2d(s, t);
    }

    void tex_coord_2dv(const  gl::double_t * v) {
      glTexCoord2dv(v);
    }

    void tex_coord_2f(gl::float_t s, gl::float_t t) {
      glTexCoord2f(s, t);
    }

    void tex_coord_2fv(const  gl::float_t * v) {
      glTexCoord2fv(v);
    }

    void tex_coord_2i(gl::int_t s, gl::int_t t) {
      glTexCoord2i(s, t);
    }

    void tex_coord_2iv(const  gl::int_t * v) {
      glTexCoord2iv(v);
    }

    void tex_coord_2s(gl::short_t s, gl::short_t t) {
      glTexCoord2s(s, t);
    }

    void tex_coord_2sv(const  gl::short_t * v) {
      glTexCoord2sv(v);
    }

    void tex_coord_3d(gl::double_t s, gl::double_t t, gl::double_t r) {
      glTexCoord3d(s, t, r);
    }

    void tex_coord_3dv(const  gl::double_t * v) {
      glTexCoord3dv(v);
    }

    void tex_coord_3f(gl::float_t s, gl::float_t t, gl::float_t r) {
      glTexCoord3f(s, t, r);
    }

    void tex_coord_3fv(const  gl::float_t * v) {
      glTexCoord3fv(v);
    }

    void tex_coord_3i(gl::int_t s, gl::int_t t, gl::int_t r) {
      glTexCoord3i(s, t, r);
    }

    void tex_coord_3iv(const  gl::int_t * v) {
      glTexCoord3iv(v);
    }

    void tex_coord_3s(gl::short_t s, gl::short_t t, gl::short_t r) {
      glTexCoord3s(s, t, r);
    }

    void tex_coord_3sv(const  gl::short_t * v) {
      glTexCoord3sv(v);
    }

    void tex_coord_4d(gl::double_t s, gl::double_t t, gl::double_t r, gl::double_t q) {
      glTexCoord4d(s, t, r, q);
    }

    void tex_coord_4dv(const  gl::double_t * v) {
      glTexCoord4dv(v);
    }

    void tex_coord_4f(gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t q) {
      glTexCoord4f(s, t, r, q);
    }

    void tex_coord_4fv(const  gl::float_t * v) {
      glTexCoord4fv(v);
    }

    void tex_coord_4i(gl::int_t s, gl::int_t t, gl::int_t r, gl::int_t q) {
      glTexCoord4i(s, t, r, q);
    }

    void tex_coord_4iv(const  gl::int_t * v) {
      glTexCoord4iv(v);
    }

    void tex_coord_4s(gl::short_t s, gl::short_t t, gl::short_t r, gl::short_t q) {
      glTexCoord4s(s, t, r, q);
    }

    void tex_coord_4sv(const  gl::short_t * v) {
      glTexCoord4sv(v);
    }

    void tex_coord_pointer(gl::int_t size, tex_coord_pointer_type_t type, gl::sizei_t stride, const  void * pointer) {
      glTexCoordPointer(size, static_cast<GLenum>(type), stride, pointer);
    }

    void tex_envf(texture_env_target_t target, texture_env_parameter_t pname, gl::float_t param) {
      glTexEnvf(static_cast<GLenum>(target), static_cast<GLenum>(pname), param);
    }

    void tex_envfv(texture_env_target_t target, texture_env_parameter_t pname, const  gl::float_t * params) {
      glTexEnvfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    void tex_envi(texture_env_target_t target, texture_env_parameter_t pname, gl::int_t param) {
      glTexEnvi(static_cast<GLenum>(target), static_cast<GLenum>(pname), param);
    }

    void tex_enviv(texture_env_target_t target, texture_env_parameter_t pname, const  gl::int_t * params) {
      glTexEnviv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    void tex_gend(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::double_t param) {
      glTexGend(static_cast<GLenum>(coord), static_cast<GLenum>(pname), param);
    }

    void tex_gendv(texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::double_t * params) {
      glTexGendv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
    }

    void tex_genf(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::float_t param) {
      glTexGenf(static_cast<GLenum>(coord), static_cast<GLenum>(pname), param);
    }

    void tex_genfv(texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::float_t * params) {
      glTexGenfv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
    }

    void tex_geni(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::int_t param) {
      glTexGeni(static_cast<GLenum>(coord), static_cast<GLenum>(pname), param);
    }

    void tex_geniv(texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::int_t * params) {
      glTexGeniv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
    }

    void tex_image_1d(texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels) {
      glTexImage1D(static_cast<GLenum>(target), level, static_cast<GLint>(internalformat), width, border, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void tex_image_2d(texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels) {
      glTexImage2D(static_cast<GLenum>(target), level, static_cast<GLint>(internalformat), width, height, border, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void tex_image_3d(texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels) {
      glTexImage3D(static_cast<GLenum>(target), level, static_cast<GLint>(internalformat), width, height, depth, border, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void tex_parameterf(texture_target_t target, texture_parameter_name_t pname, gl::float_t param) {
      glTexParameterf(static_cast<GLenum>(target), static_cast<GLenum>(pname), param);
    }

    void tex_parameterfv(texture_target_t target, texture_parameter_name_t pname, const  gl::float_t * params) {
      glTexParameterfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    void tex_parameteri(texture_target_t target, texture_parameter_name_t pname, gl::int_t param) {
      glTexParameteri(static_cast<GLenum>(target), static_cast<GLenum>(pname), param);
    }

    void tex_parameteriv(texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params) {
      glTexParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
    }

    void tex_sub_image_1d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * pixels) {
      glTexSubImage1D(static_cast<GLenum>(target), level, xoffset, width, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void tex_sub_image_2d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * pixels) {
      glTexSubImage2D(static_cast<GLenum>(target), level, xoffset, yoffset, width, height, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void tex_sub_image_3d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, pixel_type_t type, const  void * pixels) {
      glTexSubImage3D(static_cast<GLenum>(target), level, xoffset, yoffset, zoffset, width, height, depth, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
    }

    void translated(gl::double_t x, gl::double_t y, gl::double_t z) {
      glTranslated(x, y, z);
    }

    void translatef(gl::float_t x, gl::float_t y, gl::float_t z) {
      glTranslatef(x, y, z);
    }

    void uniform_1f(gl::int_t location, gl::float_t v0) {
      glUniform1f(location, v0);
    }

    void uniform_1fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value) {
      glUniform1fv(location, count, value);
    }

    void uniform_1i(gl::int_t location, gl::int_t v0) {
      glUniform1i(location, v0);
    }

    void uniform_1iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value) {
      glUniform1iv(location, count, value);
    }

    void uniform_2f(gl::int_t location, gl::float_t v0, gl::float_t v1) {
      glUniform2f(location, v0, v1);
    }

    void uniform_2fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value) {
      glUniform2fv(location, count, value);
    }

    void uniform_2i(gl::int_t location, gl::int_t v0, gl::int_t v1) {
      glUniform2i(location, v0, v1);
    }

    void uniform_2iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value) {
      glUniform2iv(location, count, value);
    }

    void uniform_3f(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2) {
      glUniform3f(location, v0, v1, v2);
    }

    void uniform_3fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value) {
      glUniform3fv(location, count, value);
    }

    void uniform_3i(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2) {
      glUniform3i(location, v0, v1, v2);
    }

    void uniform_3iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value) {
      glUniform3iv(location, count, value);
    }

    void uniform_4f(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2, gl::float_t v3) {
      glUniform4f(location, v0, v1, v2, v3);
    }

    void uniform_4fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value) {
      glUniform4fv(location, count, value);
    }

    void uniform_4i(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2, gl::int_t v3) {
      glUniform4i(location, v0, v1, v2, v3);
    }

    void uniform_4iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value) {
      glUniform4iv(location, count, value);
    }

    void uniform_matrix_2fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value) {
      glUniformMatrix2fv(location, count, transpose, value);
    }

    void uniform_matrix_3fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value) {
      glUniformMatrix3fv(location, count, transpose, value);
    }

    void uniform_matrix_4fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value) {
      glUniformMatrix4fv(location, count, transpose, value);
    }

    gl::boolean_t unmap_buffer(buffer_target_arb_t target) {
      return glUnmapBuffer(static_cast<GLenum>(target));
    }

    void use_program(gl::uint_t program) {
      glUseProgram(program);
    }

    void validate_program(gl::uint_t program) {
      glValidateProgram(program);
    }

    void vertex_2d(gl::double_t x, gl::double_t y) {
      glVertex2d(x, y);
    }

    void vertex_2dv(const  gl::double_t * v) {
      glVertex2dv(v);
    }

    void vertex_2f(gl::float_t x, gl::float_t y) {
      glVertex2f(x, y);
    }

    void vertex_2fv(const  gl::float_t * v) {
      glVertex2fv(v);
    }

    void vertex_2i(gl::int_t x, gl::int_t y) {
      glVertex2i(x, y);
    }

    void vertex_2iv(const  gl::int_t * v) {
      glVertex2iv(v);
    }

    void vertex_2s(gl::short_t x, gl::short_t y) {
      glVertex2s(x, y);
    }

    void vertex_2sv(const  gl::short_t * v) {
      glVertex2sv(v);
    }

    void vertex_3d(gl::double_t x, gl::double_t y, gl::double_t z) {
      glVertex3d(x, y, z);
    }

    void vertex_3dv(const  gl::double_t * v) {
      glVertex3dv(v);
    }

    void vertex_3f(gl::float_t x, gl::float_t y, gl::float_t z) {
      glVertex3f(x, y, z);
    }

    void vertex_3fv(const  gl::float_t * v) {
      glVertex3fv(v);
    }

    void vertex_3i(gl::int_t x, gl::int_t y, gl::int_t z) {
      glVertex3i(x, y, z);
    }

    void vertex_3iv(const  gl::int_t * v) {
      glVertex3iv(v);
    }

    void vertex_3s(gl::short_t x, gl::short_t y, gl::short_t z) {
      glVertex3s(x, y, z);
    }

    void vertex_3sv(const  gl::short_t * v) {
      glVertex3sv(v);
    }

    void vertex_4d(gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w) {
      glVertex4d(x, y, z, w);
    }

    void vertex_4dv(const  gl::double_t * v) {
      glVertex4dv(v);
    }

    void vertex_4f(gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w) {
      glVertex4f(x, y, z, w);
    }

    void vertex_4fv(const  gl::float_t * v) {
      glVertex4fv(v);
    }

    void vertex_4i(gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w) {
      glVertex4i(x, y, z, w);
    }

    void vertex_4iv(const  gl::int_t * v) {
      glVertex4iv(v);
    }

    void vertex_4s(gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w) {
      glVertex4s(x, y, z, w);
    }

    void vertex_4sv(const  gl::short_t * v) {
      glVertex4sv(v);
    }

    void vertex_attrib_1d(gl::uint_t index, gl::double_t x) {
      glVertexAttrib1d(index, x);
    }

    void vertex_attrib_1dv(gl::uint_t index, const  gl::double_t * v) {
      glVertexAttrib1dv(index, v);
    }

    void vertex_attrib_1f(gl::uint_t index, gl::float_t x) {
      glVertexAttrib1f(index, x);
    }

    void vertex_attrib_1fv(gl::uint_t index, const  gl::float_t * v) {
      glVertexAttrib1fv(index, v);
    }

    void vertex_attrib_1s(gl::uint_t index, gl::short_t x) {
      glVertexAttrib1s(index, x);
    }

    void vertex_attrib_1sv(gl::uint_t index, const  gl::short_t * v) {
      glVertexAttrib1sv(index, v);
    }

    void vertex_attrib_2d(gl::uint_t index, gl::double_t x, gl::double_t y) {
      glVertexAttrib2d(index, x, y);
    }

    void vertex_attrib_2dv(gl::uint_t index, const  gl::double_t * v) {
      glVertexAttrib2dv(index, v);
    }

    void vertex_attrib_2f(gl::uint_t index, gl::float_t x, gl::float_t y) {
      glVertexAttrib2f(index, x, y);
    }

    void vertex_attrib_2fv(gl::uint_t index, const  gl::float_t * v) {
      glVertexAttrib2fv(index, v);
    }

    void vertex_attrib_2s(gl::uint_t index, gl::short_t x, gl::short_t y) {
      glVertexAttrib2s(index, x, y);
    }

    void vertex_attrib_2sv(gl::uint_t index, const  gl::short_t * v) {
      glVertexAttrib2sv(index, v);
    }

    void vertex_attrib_3d(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z) {
      glVertexAttrib3d(index, x, y, z);
    }

    void vertex_attrib_3dv(gl::uint_t index, const  gl::double_t * v) {
      glVertexAttrib3dv(index, v);
    }

    void vertex_attrib_3f(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z) {
      glVertexAttrib3f(index, x, y, z);
    }

    void vertex_attrib_3fv(gl::uint_t index, const  gl::float_t * v) {
      glVertexAttrib3fv(index, v);
    }

    void vertex_attrib_3s(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z) {
      glVertexAttrib3s(index, x, y, z);
    }

    void vertex_attrib_3sv(gl::uint_t index, const  gl::short_t * v) {
      glVertexAttrib3sv(index, v);
    }

    void vertex_attrib_4_nbv(gl::uint_t index, const  gl::byte_t * v) {
      glVertexAttrib4Nbv(index, v);
    }

    void vertex_attrib_4_niv(gl::uint_t index, const  gl::int_t * v) {
      glVertexAttrib4Niv(index, v);
    }

    void vertex_attrib_4_nsv(gl::uint_t index, const  gl::short_t * v) {
      glVertexAttrib4Nsv(index, v);
    }

    void vertex_attrib_4_nub(gl::uint_t index, gl::ubyte_t x, gl::ubyte_t y, gl::ubyte_t z, gl::ubyte_t w) {
      glVertexAttrib4Nub(index, x, y, z, w);
    }

    void vertex_attrib_4_nubv(gl::uint_t index, const  gl::ubyte_t * v) {
      glVertexAttrib4Nubv(index, v);
    }

    void vertex_attrib_4_nuiv(gl::uint_t index, const  gl::uint_t * v) {
      glVertexAttrib4Nuiv(index, v);
    }

    void vertex_attrib_4_nusv(gl::uint_t index, const  gl::ushort_t * v) {
      glVertexAttrib4Nusv(index, v);
    }

    void vertex_attrib_4bv(gl::uint_t index, const  gl::byte_t * v) {
      glVertexAttrib4bv(index, v);
    }

    void vertex_attrib_4d(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w) {
      glVertexAttrib4d(index, x, y, z, w);
    }

    void vertex_attrib_4dv(gl::uint_t index, const  gl::double_t * v) {
      glVertexAttrib4dv(index, v);
    }

    void vertex_attrib_4f(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w) {
      glVertexAttrib4f(index, x, y, z, w);
    }

    void vertex_attrib_4fv(gl::uint_t index, const  gl::float_t * v) {
      glVertexAttrib4fv(index, v);
    }

    void vertex_attrib_4iv(gl::uint_t index, const  gl::int_t * v) {
      glVertexAttrib4iv(index, v);
    }

    void vertex_attrib_4s(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w) {
      glVertexAttrib4s(index, x, y, z, w);
    }

    void vertex_attrib_4sv(gl::uint_t index, const  gl::short_t * v) {
      glVertexAttrib4sv(index, v);
    }

    void vertex_attrib_4ubv(gl::uint_t index, const  gl::ubyte_t * v) {
      glVertexAttrib4ubv(index, v);
    }

    void vertex_attrib_4uiv(gl::uint_t index, const  gl::uint_t * v) {
      glVertexAttrib4uiv(index, v);
    }

    void vertex_attrib_4usv(gl::uint_t index, const  gl::ushort_t * v) {
      glVertexAttrib4usv(index, v);
    }

    void vertex_attrib_pointer(gl::uint_t index, gl::int_t size, vertex_attrib_pointer_type_t type, gl::boolean_t normalized, gl::sizei_t stride, const  void * pointer) {
      glVertexAttribPointer(index, size, static_cast<GLenum>(type), normalized, stride, pointer);
    }

    void vertex_pointer(gl::int_t size, vertex_pointer_type_t type, gl::sizei_t stride, const  void * pointer) {
      glVertexPointer(size, static_cast<GLenum>(type), stride, pointer);
    }

    void viewport(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height) {
      glViewport(x, y, width, height);
    }

    void window_pos_2d(gl::double_t x, gl::double_t y) {
      glWindowPos2d(x, y);
    }

    void window_pos_2dv(const  gl::double_t * v) {
      glWindowPos2dv(v);
    }

    void window_pos_2f(gl::float_t x, gl::float_t y) {
      glWindowPos2f(x, y);
    }

    void window_pos_2fv(const  gl::float_t * v) {
      glWindowPos2fv(v);
    }

    void window_pos_2i(gl::int_t x, gl::int_t y) {
      glWindowPos2i(x, y);
    }

    void window_pos_2iv(const  gl::int_t * v) {
      glWindowPos2iv(v);
    }

    void window_pos_2s(gl::short_t x, gl::short_t y) {
      glWindowPos2s(x, y);
    }

    void window_pos_2sv(const  gl::short_t * v) {
      glWindowPos2sv(v);
    }

    void window_pos_3d(gl::double_t x, gl::double_t y, gl::double_t z) {
      glWindowPos3d(x, y, z);
    }

    void window_pos_3dv(const  gl::double_t * v) {
      glWindowPos3dv(v);
    }

    void window_pos_3f(gl::float_t x, gl::float_t y, gl::float_t z) {
      glWindowPos3f(x, y, z);
    }

    void window_pos_3fv(const  gl::float_t * v) {
      glWindowPos3fv(v);
    }

    void window_pos_3i(gl::int_t x, gl::int_t y, gl::int_t z) {
      glWindowPos3i(x, y, z);
    }

    void window_pos_3iv(const  gl::int_t * v) {
      glWindowPos3iv(v);
    }

    void window_pos_3s(gl::short_t x, gl::short_t y, gl::short_t z) {
      glWindowPos3s(x, y, z);
    }

    void window_pos_3sv(const  gl::short_t * v) {
      glWindowPos3sv(v);
    }

}
