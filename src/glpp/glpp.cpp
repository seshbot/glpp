#include <glpp/glpp.h>

#ifdef _MSC_VER
#  include <glpp/gles2.h>
   namespace gl_ = gles2;
#else
#  include <glpp/gl2.h>
   namespace gl_ = gl2;
#endif

/**
INITIALIZATION: 
 #include <glad.h>   https://github.com/Dav1dde/glad
   - this will load the symbols from the DLL and create macros that point to the symbols
 link against ANGLE - this will ensure GLAD loads ANGLE things

 gles2 namespace:
   - init() 
     - initialises GLAD as above
     - called after context created, assumes that glad header already included

TODO: platforms without GLES2? load GL2.0?
*/


#include <SOIL2/SOIL2.h>
#include <GLFW/glfw3.h>
#include <glm/gtc/type_ptr.hpp>

#include <vector>
#include <algorithm>
#include <utility>
#include <atomic>
#include <mutex>
#include <cassert>

#include <glpp/utils.h>

namespace {
   const char * openGlErrorString(gl_::error_code_t err) {
      // TODO: this should be generated by glgen
      switch (err) {
      case gl_::error_code_t::invalid_enum: return "GL_INVALID_ENUM";
      case gl_::error_code_t::invalid_value: return "GL_INVALID_VALUE";
      case gl_::error_code_t::invalid_operation: return "GL_INVALID_OPERATION";
         //case gl_::error_code_t::stack_overflow: return "GL_STACK_OVERFLOW";
         //case gl_::error_code_t::stack_underflow: return "GL_STACK_UNDERFLOW";
      case gl_::error_code_t::out_of_memory: return "GL_OUT_OF_MEMORY";
#ifdef _MSC_VER
      case gl_::error_code_t::invalid_framebuffer_operation: return "GL_INVALID_FRAMEBUFFER_OPERATION";
#endif
         //case gl_::error_code_t::table_too_large1: return "GL_TABLE_TOO_LARGE1";
      default: return "unrecognised";
      }
   }
}


namespace {
   bool extensionEnabled(std::string const & extName) {
      const char* extString = reinterpret_cast<const char*>(glGetString(GL_EXTENSIONS));
      return strstr(extString, extName.c_str()) != NULL;
   }

   std::string get_shader_info_log(glpp::id_t shader_id)
   {
      gl::int_t length;

      gl_::get_shaderiv(shader_id, gl_::get_shaderiv_p_name_t::info_log_length, &length);

      if (length) {
         char* buffer = new char[length];
         gl_::get_shader_info_log(shader_id, length, NULL, buffer);

         std::string message(buffer);
         delete[] buffer;
         return message;
      }

      return "";
   }

   void delete_program_shaders(glpp::id_t id) {
      if (0 == id) return;

      gl::int_t shader_count;
      gl_::get_programiv(id, gl_::get_programiv_p_name_t::attached_shaders, &shader_count);

      std::vector<GLuint> shaders(shader_count);
      gl_::get_attached_shaders(id, shader_count, nullptr, shaders.data());

      for (auto s : shaders) { gl_::delete_shader(s); }
   }

   gl_::shader_type_t to_glenum(glpp::shader::Type type) {
      switch (type) {
      case glpp::shader::Vertex: return gl_::shader_type_t::vertex_shader;
      case glpp::shader::Fragment: return gl_::shader_type_t::fragment_shader;
      default: throw glpp::error("unsupported shader type");
      }
   }

   glpp::ValueType gl_to_value_type(gl_::attrib_type_t type) {
      switch (type) {
      case gl_::attrib_type_t::float_: return glpp::ValueType::Float;
      case gl_::attrib_type_t::float_vec2: return glpp::ValueType::FloatVec2;
      case gl_::attrib_type_t::float_vec3: return glpp::ValueType::FloatVec3;
      case gl_::attrib_type_t::float_vec4: return glpp::ValueType::FloatVec4;
      case gl_::attrib_type_t::float_mat2: return glpp::ValueType::FloatMat2;
      case gl_::attrib_type_t::float_mat3: return glpp::ValueType::FloatMat3;
      case gl_::attrib_type_t::float_mat4: return glpp::ValueType::FloatMat4;
      default: return glpp::ValueType::Unknown;
      }
   }

   glpp::ValueType gl_to_value_type(gl_::uniform_type_t type) {
      switch (type) {
      case gl_::uniform_type_t::int_: return glpp::ValueType::Int;
      case gl_::uniform_type_t::float_: return glpp::ValueType::Float;
      case gl_::uniform_type_t::float_vec2: return glpp::ValueType::FloatVec2;
      case gl_::uniform_type_t::float_vec3: return glpp::ValueType::FloatVec3;
      case gl_::uniform_type_t::float_vec4: return glpp::ValueType::FloatVec4;
      case gl_::uniform_type_t::int_vec2: return glpp::ValueType::IntVec2;
      case gl_::uniform_type_t::int_vec3: return glpp::ValueType::IntVec3;
      case gl_::uniform_type_t::int_vec4: return glpp::ValueType::IntVec4;
      case gl_::uniform_type_t::bool_: return glpp::ValueType::Bool;
      case gl_::uniform_type_t::bool_vec2: return glpp::ValueType::BoolVec2;
      case gl_::uniform_type_t::bool_vec3: return glpp::ValueType::BoolVec3;
      case gl_::uniform_type_t::bool_vec4: return glpp::ValueType::BoolVec4;
      case gl_::uniform_type_t::float_mat2: return glpp::ValueType::FloatMat2;
      case gl_::uniform_type_t::float_mat3: return glpp::ValueType::FloatMat3;
      case gl_::uniform_type_t::float_mat4: return glpp::ValueType::FloatMat4;
      case gl_::uniform_type_t::sampler_2d: return glpp::ValueType::Sampler2d;
      case gl_::uniform_type_t::sampler_cube: return glpp::ValueType::SamplerCube;

      //case GL_BYTE: return glpp::ValueType::Byte;
      //case GL_UNSIGNED_BYTE: return glpp::ValueType::UByte;
      //case GL_SHORT: return glpp::ValueType::Short;
      //case GL_UNSIGNED_SHORT: return glpp::ValueType::UShort;
      //case GL_INT: return glpp::ValueType::Int;
      //case GL_UNSIGNED_INT: return glpp::ValueType::UInt;
      //case GL_FLOAT: return glpp::ValueType::Float;
      //case GL_FIXED: return glpp::ValueType::Fixed;

      //case GL_FLOAT_VEC2: return glpp::ValueType::FloatVec2;
      //case GL_FLOAT_VEC3: return glpp::ValueType::FloatVec3;
      //case GL_FLOAT_VEC4: return glpp::ValueType::FloatVec4;
      //case GL_INT_VEC2: return glpp::ValueType::IntVec2;
      //case GL_INT_VEC3: return glpp::ValueType::IntVec3;
      //case GL_INT_VEC4: return glpp::ValueType::IntVec4;
      //case GL_BOOL: return glpp::ValueType::Bool;
      //case GL_BOOL_VEC2: return glpp::ValueType::BoolVec2;
      //case GL_BOOL_VEC3: return glpp::ValueType::BoolVec3;
      //case GL_BOOL_VEC4: return glpp::ValueType::BoolVec4;
      //case GL_FLOAT_MAT2: return glpp::ValueType::FloatMat2;
      //case GL_FLOAT_MAT3: return glpp::ValueType::FloatMat3;
      //case GL_FLOAT_MAT4: return glpp::ValueType::FloatMat4;
      //case GL_SAMPLER_2D: return glpp::ValueType::Sampler2d;
      //case GL_SAMPLER_CUBE: return glpp::ValueType::SamplerCube;

      default: return glpp::ValueType::Unknown;
      }
   }

   std::string to_string(glpp::ValueType type) {
      switch (type) {
      case glpp::ValueType::Unknown: return "Unknown";
      case glpp::ValueType::Int: return "Int";
      case glpp::ValueType::UInt: return "UInt";
      case glpp::ValueType::Float: return "Float";
      case glpp::ValueType::FloatVec2: return "FloatVec2";
      case glpp::ValueType::FloatVec3: return "FloatVec3";
      case glpp::ValueType::FloatVec4: return "FloatVec4";
      case glpp::ValueType::IntVec2: return "IntVec2";
      case glpp::ValueType::IntVec3: return "IntVec3";
      case glpp::ValueType::IntVec4: return "IntVec4";
      case glpp::ValueType::FloatMat2: return "FloatMat2";
      case glpp::ValueType::FloatMat3: return "FloatMat3";
      case glpp::ValueType::FloatMat4: return "FloatMat4";

      case glpp::ValueType::Bool: return "Bool";
      case glpp::ValueType::Byte: return "Byte";
      case glpp::ValueType::UByte: return "UByte";
      case glpp::ValueType::Short: return "Short";
      case glpp::ValueType::UShort: return "UShort";
      case glpp::ValueType::Fixed: return "Fixed";
      case glpp::ValueType::BoolVec2: return "BoolVec2";
      case glpp::ValueType::BoolVec3: return "BoolVec3";
      case glpp::ValueType::BoolVec4: return "BoolVec4";
      case glpp::ValueType::Sampler2d: return "Sampler2d";
      case glpp::ValueType::SamplerCube: return "SamplerCube";

      case glpp::ValueType::FloatMat2x3: return "FloatMat2x3";
      case glpp::ValueType::FloatMat2x4: return "FloatMat2x4";
      case glpp::ValueType::FloatMat3x2: return "FloatMat3x2";
      case glpp::ValueType::FloatMat3x4: return "FloatMat3x4";
      case glpp::ValueType::FloatMat4x2: return "FloatMat4x2";
      case glpp::ValueType::FloatMat4x3: return "FloatMat4x3";
      case glpp::ValueType::UIntVec2: return "UIntVec2";
      case glpp::ValueType::UIntVec3: return "UIntVec3";
      case glpp::ValueType::UIntVec4: return "UIntVec4";
      case glpp::ValueType::Double: return "Double";
      case glpp::ValueType::DoubleVec2: return "DoubleVec2";
      case glpp::ValueType::DoubleVec3: return "DoubleVec3";
      case glpp::ValueType::DoubleVec4: return "DoubleVec4";
      case glpp::ValueType::DoubleMat2: return "DoubleMat2";
      case glpp::ValueType::DoubleMat3: return "DoubleMat3";
      case glpp::ValueType::DoubleMat4: return "DoubleMat4";
      case glpp::ValueType::DoubleMat2x3: return "DoubleMat2x3";
      case glpp::ValueType::DoubleMat2x4: return "DoubleMat2x4";
      case glpp::ValueType::DoubleMat3x2: return "DoubleMat3x2";
      case glpp::ValueType::DoubleMat3x4: return "DoubleMat3x4";
      case glpp::ValueType::DoubleMat4x2: return "DoubleMat4x2";
      case glpp::ValueType::DoubleMat4x3: return "DoubleMat4x3";

      default: return "UNRECOGNISED TYPE";
      }
   }

   
   std::size_t attrib_atomic_val_bytes(glpp::ValueType type) {
      switch (type) {
      case glpp::ValueType::Byte:
      case glpp::ValueType::UByte:
         return 1;

      case glpp::ValueType::Short:
      case glpp::ValueType::UShort:
         return 2;

      case glpp::ValueType::Int:
      case glpp::ValueType::UInt:
      case glpp::ValueType::Float:
      case glpp::ValueType::FloatVec2:
      case glpp::ValueType::FloatVec3:
      case glpp::ValueType::FloatVec4:
      case glpp::ValueType::IntVec2:
      case glpp::ValueType::IntVec3:
      case glpp::ValueType::IntVec4:
      case glpp::ValueType::FloatMat2:
      case glpp::ValueType::FloatMat3:
      case glpp::ValueType::FloatMat4:

      case glpp::ValueType::FloatMat2x3:
      case glpp::ValueType::FloatMat2x4:
      case glpp::ValueType::FloatMat3x2:
      case glpp::ValueType::FloatMat3x4:
      case glpp::ValueType::FloatMat4x2:
      case glpp::ValueType::FloatMat4x3:
      case glpp::ValueType::UIntVec2:
      case glpp::ValueType::UIntVec3:
      case glpp::ValueType::UIntVec4:
         return 4;

      case glpp::ValueType::Double:
      case glpp::ValueType::DoubleVec2:
      case glpp::ValueType::DoubleVec3:
      case glpp::ValueType::DoubleVec4:
      case glpp::ValueType::DoubleMat2:
      case glpp::ValueType::DoubleMat3:
      case glpp::ValueType::DoubleMat4:
      case glpp::ValueType::DoubleMat2x3:
      case glpp::ValueType::DoubleMat2x4:
      case glpp::ValueType::DoubleMat3x2:
      case glpp::ValueType::DoubleMat3x4:
      case glpp::ValueType::DoubleMat4x2:
      case glpp::ValueType::DoubleMat4x3:
         return 8;

      default: throw glpp::error("cannot calculate primitive size of invalid attribute type");
      }
   }

   gl_::draw_elements_type_t element_index_gl_type(glpp::ValueType type) {
      switch (type) {
      case glpp::ValueType::UByte: return gl_::draw_elements_type_t::unsigned_byte_;
      case glpp::ValueType::UShort: return gl_::draw_elements_type_t::unsigned_short_;
      case glpp::ValueType::UInt: return gl_::draw_elements_type_t::unsigned_int_;
      default: throw glpp::error("invalid element index type when drawing");
      }
   }

   gl_::vertex_attrib_pointer_type_t attrib_atomic_gl_type(glpp::ValueType type) {
      switch (type) {
      case glpp::ValueType::Byte: return gl_::vertex_attrib_pointer_type_t::byte_;
      case glpp::ValueType::UByte: return gl_::vertex_attrib_pointer_type_t::unsigned_byte_;
      case glpp::ValueType::Short: return gl_::vertex_attrib_pointer_type_t::short_;
      case glpp::ValueType::UShort: return gl_::vertex_attrib_pointer_type_t::unsigned_short_;
      //case glpp::ValueType::Int: return GL_INT;
      //case glpp::ValueType::UInt: return GL_UNSIGNED_INT;
      case glpp::ValueType::Float: return gl_::vertex_attrib_pointer_type_t::float_;
      //case glpp::ValueType::Double: return GL_DOUBLE;

      case glpp::ValueType::FloatVec2: return gl_::vertex_attrib_pointer_type_t::float_;
      case glpp::ValueType::FloatVec3: return gl_::vertex_attrib_pointer_type_t::float_;
      case glpp::ValueType::FloatVec4: return gl_::vertex_attrib_pointer_type_t::float_;
      //case glpp::ValueType::IntVec2: return GL_INT;
      //case glpp::ValueType::IntVec3: return GL_INT;
      //case glpp::ValueType::IntVec4: return GL_INT;

      case glpp::ValueType::FloatMat2: return gl_::vertex_attrib_pointer_type_t::float_;
      case glpp::ValueType::FloatMat3: return gl_::vertex_attrib_pointer_type_t::float_;
      case glpp::ValueType::FloatMat4: return gl_::vertex_attrib_pointer_type_t::float_;

      default: throw glpp::error("invalid data value type when drawing");
      }
   }
}

namespace glpp
{
   /**
    * class context_state
    *
    */

   class context_state {
   public:
      void set_optimistic(bool value) { optimistic_ = value; }

      void use_program(gl::uint_t id);

      void bind_framebuffer(gl_::framebuffer_target_t target, gl::uint_t framebuffer);

      void active_texture(gl_::texture_unit_t id);
      void bind_texture(gl_::texture_target_t target, gl::uint_t id);

      void bind_buffer(gl_::buffer_target_arb_t target, gl::uint_t id);

      void debug_verify_state_COSTLY() const;

   private:
      static context_state from_current_context();

      static const unsigned NUM_TEXTURE_UNITS = 80; // min value, from the spec. can call GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS

      bool optimistic_ = true;
      gl::uint_t bound_program_ = 0;
      gl::uint_t bound_read_framebuffer_ = 0;
      gl::uint_t bound_draw_framebuffer_ = 0;
      gl::uint_t bound_vertex_buffer_ = 0;
      gl::uint_t bound_index_buffer_ = 0;
      unsigned active_texture_unit_idx_ = 0;
      gl_::texture_target_t texture_unit_texture_targets_[NUM_TEXTURE_UNITS] = {};
      gl::uint_t texture_unit_texture_ids_[NUM_TEXTURE_UNITS] = {};

      struct invoke_info {
         unsigned calls = 0;
         unsigned calls_avoided = 0;
      };
      invoke_info bound_program_info_;
      invoke_info bound_framebuffer_info_;
      invoke_info bound_vertex_buffer_info_;
      invoke_info bound_index_buffer_info_;
      invoke_info active_texture_unit_info_;
      invoke_info bound_texture_info_;
   };

   context_state gl_ctx_;

   void context_state::use_program(gl::uint_t id) {
      bound_program_info_.calls++;
      if (optimistic_ && bound_program_ == id) { bound_program_info_.calls_avoided++; return; }

      GL_VERIFY(gl_::use_program(id));
      bound_program_ = id;
   }

   void context_state::bind_framebuffer(gl_::framebuffer_target_t target, gl::uint_t id) {
      bound_framebuffer_info_.calls++;
      if (target == gl_::framebuffer_target_t::framebuffer) {
         if (optimistic_ && bound_read_framebuffer_ == id && bound_draw_framebuffer_ == id) { bound_framebuffer_info_.calls_avoided++; return; }
         bound_read_framebuffer_ = id;
         bound_draw_framebuffer_ = id;
      }
      else if (target == gl_::framebuffer_target_t::draw_framebuffer) {
         if (optimistic_ && bound_draw_framebuffer_ == id) { bound_framebuffer_info_.calls_avoided++; return; }
         bound_draw_framebuffer_ = id;
      }
      else if (target == gl_::framebuffer_target_t::read_framebuffer) {
         if (optimistic_ && bound_read_framebuffer_ == id) { bound_framebuffer_info_.calls_avoided++; return; }
         bound_read_framebuffer_ = id;
      }
      
      GL_VERIFY(gl_::bind_framebuffer(target, id));
   }

   static const unsigned TEXTURE0 = static_cast<unsigned>(gl_::texture_unit_t::texture0);
   void context_state::active_texture(gl_::texture_unit_t id) {
      active_texture_unit_info_.calls++;
      auto idx = static_cast<unsigned>(id) - TEXTURE0;

      if (optimistic_ && active_texture_unit_idx_ == idx) { active_texture_unit_info_.calls_avoided++; return; }

      GL_VERIFY(gl_::active_texture(id));
      active_texture_unit_idx_ = idx;
   }

   void context_state::bind_texture(gl_::texture_target_t target, gl::uint_t id) {
      bound_texture_info_.calls++;

      if (optimistic_ &&
         texture_unit_texture_targets_[active_texture_unit_idx_] == target &&
         texture_unit_texture_ids_[active_texture_unit_idx_] == id)
      {
         bound_texture_info_.calls_avoided++; return;
      }

      // TODO: what if the texture is updated? should we not do this?
      GL_VERIFY(gl_::bind_texture(target, id));
      texture_unit_texture_targets_[active_texture_unit_idx_] = target;
      texture_unit_texture_ids_[active_texture_unit_idx_] = id;
   }

   void context_state::bind_buffer(gl_::buffer_target_arb_t target, gl::uint_t id) {
      if (target == gl_::buffer_target_arb_t::element_array_buffer) {
         bound_index_buffer_info_.calls++;
         if (optimistic_ && bound_index_buffer_ == id) { bound_index_buffer_info_.calls_avoided++; return; }
         bound_index_buffer_ = id;
      }
      else if (target == gl_::buffer_target_arb_t::array_buffer) {
         bound_vertex_buffer_info_.calls++;
         if (optimistic_ && bound_vertex_buffer_ == id) { bound_vertex_buffer_info_.calls_avoided++; return; }
         bound_vertex_buffer_ = id;
      }
      
      GL_VERIFY(gl_::bind_buffer(target, id));
   }

   namespace {
      gl::float_t get_gl_version() {
         static auto result = std::stof(std::string((char*)gl_::get_string(gl_::string_name_t::version)));
         return result;
      }
   }

   context_state context_state::from_current_context() {
#ifndef GL_CURRENT_PROGRAM
#     define GL_CURRENT_PROGRAM                0x8B8D
#endif
#ifndef GL_DRAW_FRAMEBUFFER_BINDING
#     define GL_DRAW_FRAMEBUFFER_BINDING       0x8CA6
#endif
#ifndef GL_READ_FRAMEBUFFER_BINDING
#     define GL_READ_FRAMEBUFFER_BINDING       0x8CAA
#endif
#ifndef GL_ARRAY_BUFFER_BINDING
#     define GL_ARRAY_BUFFER_BINDING           0x8894
#endif
#ifndef GL_ELEMENT_ARRAY_BUFFER_BINDING
#     define GL_ELEMENT_ARRAY_BUFFER_BINDING   0x8895
#endif
#ifndef GL_ACTIVE_TEXTURE
#     define GL_ACTIVE_TEXTURE                0x84E0
#endif

      // TODO: GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS ?
      // TODO: GL_TEXTURE_BINDING_2D / GL_TEXTURE_BINDING_2D_MULTISAMPLE for each texture unit?
      //       id_t texture_unit_textures_[NUM_TEXTURE_UNITS] = {};

      context_state result;
      gl::int_t id;
      ::glGetIntegerv(GL_CURRENT_PROGRAM, &id); result.bound_program_ = id;
      ::glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &id); result.bound_draw_framebuffer_ = id;
      if (get_gl_version() >= 3.) {
         ::glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING, &id); result.bound_read_framebuffer_ = id;
      }
      ::glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &id); result.bound_vertex_buffer_ = id;
      ::glGetIntegerv(GL_ELEMENT_ARRAY_BUFFER_BINDING, &id); result.bound_index_buffer_ = id;
      ::glGetIntegerv(GL_ACTIVE_TEXTURE, &id); result.active_texture_unit_idx_ = id - TEXTURE0;

      return result;
   }

   void context_state::debug_verify_state_COSTLY() const {
      auto current_state = from_current_context();

      assert(!bound_program_ || bound_program_ == current_state.bound_program_ &&
         "currently bound to unexpected program!");
      assert(!bound_draw_framebuffer_ || bound_draw_framebuffer_ == current_state.bound_draw_framebuffer_ &&
         "currently bound to unexpected draw framebuffer!");
      if (get_gl_version() >= 3.) {
         assert(!bound_read_framebuffer_ || bound_read_framebuffer_ == current_state.bound_read_framebuffer_ &&
            "currently bound to unexpected read framebuffer!");
      }
      assert(!bound_vertex_buffer_ || bound_vertex_buffer_ == current_state.bound_vertex_buffer_ &&
         "currently bound to unexpected vertex buffer!");
      assert(!bound_index_buffer_ || bound_index_buffer_ == current_state.bound_index_buffer_ &&
         "currently bound to unexpected index buffer!");
      // TODO: verify textures, not current texture unit
      // assert(active_texture_unit_ == current_state.active_texture_unit_ && "currently bound to unexpected texture unit!");
   }


   /**
    * utils
    */

   void checkOpenGLError(const char* function, const char* file, int line)
   {
      auto err = gl_::get_error(); if (err == gl_::error_code_t::no_error) return;

      utils::log(utils::LOG_ERROR, "OpenGL error '%s' (0x%04x) called from %s in file %s line %d\n", openGlErrorString(err), err, function, file, line);
   }

   void checkOpenGLError(const char* stmt, const char* function, const char* file, int line)
   {
      auto err = gl_::get_error(); if (err == gl_::error_code_t::no_error) return;

      utils::log(utils::LOG_ERROR, "OpenGL error '%s' (0x%04x) at %s called from %s in file %s line %d\n", openGlErrorString(err), err, stmt, function, file, line);
   }


  /**
   * class texture
   *
   */
   unsigned int texture_t::to_gl(texture_t::Target target) {
      auto tgt
         = target == texture_t::Target::TEXTURE_2D ? gl_::texture_target_t::texture_2d
         : target == texture_t::Target::TEXTURE_CUBE_MAP ? gl_::texture_target_t::texture_cube_map
         : throw std::runtime_error("unrecognised texture target");

      return static_cast<unsigned int>(tgt);
   }

   texture_t::state::state(std::string const & filename, Target target)
   : format_(texture_format_t::RGBA) { // TODO: this may not be right?
      int width;
      int height;
      int resized_width;
      int resized_height;
      int channels;

      auto tgt = static_cast<gl_::texture_target_t>(to_gl(target));

      id_ = SOIL_load_OGL_texture_and_details(
         filename.c_str(),
         SOIL_LOAD_AUTO,
         SOIL_CREATE_NEW_ID,
         SOIL_FLAG_INVERT_Y, // SOIL_FLAG_MIPMAPS // BEWARE mipmaps make colours bleed! (alters the tex params)
         &width, &height, &resized_width, &resized_height, &channels);

      if (!id_) {
         throw glpp::error(std::string("Could not load texture from '") + filename + "': " + SOIL_last_result());
      }

      dims_.x = width;
      dims_.y = height;

      GL_VERIFY(gl_ctx_.bind_texture(tgt, id_));

      // TODO: these should come from the gles2 API
      gl::int_t TMP_GL_CLAMP_TO_EDGE = 0x812F;
      gl::int_t TMP_GL_NEAREST = 0x2600;

      // set texture parameters
      GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_wrap_s, TMP_GL_CLAMP_TO_EDGE));
      GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_wrap_t, TMP_GL_CLAMP_TO_EDGE));
      //if (tgt == gl_::texture_target_t::texture_cube_map)
      //   GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_wrap_r, TMP_GL_CLAMP_TO_EDGE));
      GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_mag_filter, TMP_GL_NEAREST));
      GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_min_filter, TMP_GL_NEAREST));

      //glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
      //glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

      GL_VERIFY(gl_ctx_.bind_texture(tgt, 0));
   }

   texture_t::state::state(dim_t const & dims, Target target, texture_format_t format)
   : dims_(dims), format_(format) {
      auto tgt = static_cast<gl_::texture_target_t>(to_gl(target));

      GL_VERIFY(gl_::gen_textures(1, &id_));
      GL_VERIFY(gl_ctx_.bind_texture(tgt, id_));

      auto internal_format
         = format == texture_format_t::RGBA ? gl_::texture_component_count_t::rgba
         : format == texture_format_t::RGB ? gl_::texture_component_count_t::rgb
         : format == texture_format_t::DEPTH ? gl_::texture_component_count_t::depth_component
#ifdef _MSC_VER
         : format == texture_format_t::BGRA ? gl_::texture_component_count_t::bgra_ext
#endif
         : throw error("unrecognised image format");

      auto pixel_format
         = format == texture_format_t::RGBA ? gl_::pixel_format_t::rgba
         : format == texture_format_t::RGB ? gl_::pixel_format_t::rgb
         : format == texture_format_t::DEPTH ? gl_::pixel_format_t::depth_component
#ifdef _MSC_VER
         : format == texture_format_t::BGRA ? gl_::pixel_format_t::bgra_ext
#endif
         : throw error("unrecognised image format");


      if (tgt == gl_::texture_target_t::texture_cube_map) {
         assert((dims_.x == dims_.y) && "cube map texture dimensions must be square");

         for (auto i = 0u; i < 6; i++) {
            auto img_tgt = static_cast<gl_::texture_image_target_t>((unsigned int)gl_::texture_image_target_t::texture_cube_map_positive_x + i);

            GL_VERIFY(gl_::tex_image_2d(
               img_tgt,
               0,
               internal_format,
               dims_.x, dims_.y, 0, // MUST BE SQUARE!!!
               pixel_format, gl_::pixel_type_t::unsigned_byte_,
               nullptr));
         }
      }
      else {
         // TODO: allow for other texture targets
         assert(tgt == gl_::texture_target_t::texture_2d && "unexpected texture target");

         // TODO: add GL_ARB_texture_storage, and use e.g., RGB8 etc for storage...
         GL_VERIFY(gl_::tex_image_2d(
            gl_::texture_image_target_t::texture_2d,
            0,
            internal_format,
            dims_.x, dims_.y, 0,
            pixel_format, gl_::pixel_type_t::unsigned_byte_,
            nullptr));
      }

      // glTexImage2D(GL_TEXTURE_2D, 0, fmt, dims_.x, dims_.y, 0, fmt, GL_UNSIGNED_BYTE, NULL));
      //GL_VERIFY(glTexStorage2D(GL_TEXTURE_2D, 1, fmt, dims_.x, dims_.y));
     // GL_VERIFY(glTexSubImage2D(GL_TEXTURE_2D, 1, 0, 0, dims_.x, dims_.y, fmt, GL_UNSIGNED_BYTE, NULL));

      // TODO: these should come from the gles2 API
      gl::int_t TMP_GL_CLAMP_TO_EDGE = 0x812F;
      gl::int_t TMP_GL_NEAREST = 0x2600;

      // set texture parameters
      GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_wrap_s, TMP_GL_CLAMP_TO_EDGE));
      GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_wrap_t, TMP_GL_CLAMP_TO_EDGE));
      // TODO: is it OK to leave this out?
      //if (tgt == gl_::texture_target_t::texture_cube_map)
      //   GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_wrap_r, TMP_GL_CLAMP_TO_EDGE));
      GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_mag_filter, TMP_GL_NEAREST));
      GL_VERIFY(gl_::tex_parameteri(tgt, gl_::texture_parameter_name_t::texture_min_filter, TMP_GL_NEAREST));

      //glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
      //glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

      gl_ctx_.bind_texture(tgt, 0);
   }

   texture_t::state::~state() {
      glDeleteTextures(1, &id_);
   }

   texture_t::texture_t(std::string const & filename)
      : state_(std::make_shared<state>(filename, TEXTURE_2D)) {
   }

   texture_t::texture_t(dim_t const & dims, texture_format_t format)
      : state_(std::make_shared<state>(dims, TEXTURE_2D, format)) {
   }

   void texture_t::save_current_framebuffer_(texture_t::state const & state, std::string const & filename) {

      std::vector<uint8_t> buffer(4 * state.dims_.x * state.dims_.y);

      auto format = state.format_;
      auto fmt
         = format == texture_format_t::RGBA ? GL_RGBA
         : format == texture_format_t::RGB ? GL_RGB
         : format == texture_format_t::DEPTH ? GL_DEPTH_COMPONENT
#ifdef _MSC_VER
         : format == texture_format_t::BGRA ? GL_BGRA_EXT
#endif
         : throw error("unrecognised image format");

      GL_VERIFY(glReadPixels(0, 0, state.dims_.x, state.dims_.y, fmt, GL_UNSIGNED_BYTE, &buffer[0]));

      auto soil_format = [&filename] {
         auto ext = filename.substr(filename.length() - 4);
         if (ext == ".png") return SOIL_SAVE_TYPE_PNG;
         if (ext == ".tga") return SOIL_SAVE_TYPE_TGA;
         if (ext == ".bmp") return SOIL_SAVE_TYPE_BMP;
         if (ext == ".dds") return SOIL_SAVE_TYPE_DDS;
         utils::log(utils::LOG_WARN, "unrecognised extension '%s' when saving %s, defaulting to PNG\n", ext.c_str(), filename.c_str());
         return SOIL_SAVE_TYPE_PNG;
      }();

      SOIL_save_image(
         filename.c_str(), soil_format,
         state.dims_.x, state.dims_.y, 4, // TODO: channels?
         buffer.data());
   }
   
   void texture_t::save_current_framebuffer(std::string const & filename) const {
      save_current_framebuffer_(*state_, filename);
   }

   namespace {
      const int TMP_GL_LINEAR = 0x2601;
      const int TMP_GL_NEAREST = 0x2600;

      const int TMP_GL_CLAMP = 0x2900;
      const int TMP_GL_REPEAT = 0x2901;
      const int TMP_GL_CLAMP_TO_EDGE = 0x812F;
   }

   void texture_t::bind() const {
      GL_VERIFY(gl_::bind_texture(gl_::texture_target_t::texture_2d, id()));

      // TODO: make this stuff configurable via the with() call...
      // TODO: or should this be initialised in texture creation?
      GL_VERIFY(gl_::tex_parameteri(gl_::texture_target_t::texture_2d, gl_::texture_parameter_name_t::texture_min_filter, TMP_GL_LINEAR));
      GL_VERIFY(gl_::tex_parameteri(gl_::texture_target_t::texture_2d, gl_::texture_parameter_name_t::texture_mag_filter, TMP_GL_NEAREST));

      GL_VERIFY(gl_::tex_parameteri(gl_::texture_target_t::texture_2d, gl_::texture_parameter_name_t::texture_wrap_s, TMP_GL_REPEAT));
      GL_VERIFY(gl_::tex_parameteri(gl_::texture_target_t::texture_2d, gl_::texture_parameter_name_t::texture_wrap_t, TMP_GL_REPEAT));
   }


   /**
    * class cube_map_texture_t
    */

   cube_map_texture_t::cube_map_texture_t(int side_length, texture_format_t format)
      : state_(std::make_shared<texture_t::state>(dim_t{side_length, side_length}, texture_t::TEXTURE_CUBE_MAP, format)) {
   }

   void cube_map_texture_t::bind() const {
      gl_::bind_texture(gl_::texture_target_t::texture_cube_map, id());

      // TODO: make this stuff configurable via the with() call...
      // TODO: or should this be initialised in texture creation?
      GL_VERIFY(gl_::tex_parameteri(gl_::texture_target_t::texture_cube_map, gl_::texture_parameter_name_t::texture_min_filter, TMP_GL_LINEAR));
      GL_VERIFY(gl_::tex_parameteri(gl_::texture_target_t::texture_cube_map, gl_::texture_parameter_name_t::texture_mag_filter, TMP_GL_LINEAR));

      GL_VERIFY(gl_::tex_parameteri(gl_::texture_target_t::texture_cube_map, gl_::texture_parameter_name_t::texture_wrap_s, TMP_GL_CLAMP_TO_EDGE));
      GL_VERIFY(gl_::tex_parameteri(gl_::texture_target_t::texture_cube_map, gl_::texture_parameter_name_t::texture_wrap_t, TMP_GL_CLAMP_TO_EDGE));
   }

   void cube_map_texture_t::save_current_framebuffer(std::string const & filename) const {
      texture_t::save_current_framebuffer_(*state_, filename);
   }


   /**
    * class texture_unit_t
    */

   void texture_unit_t::activate() const {
      auto texture_unit = static_cast<gl_::texture_unit_t>(static_cast<unsigned int>(gl_::texture_unit_t::texture0) + id);
      GL_VERIFY(gl_ctx_.active_texture(texture_unit));
   }

  /**
   * class frame_buffer_t
   *
   */

   frame_buffer_t::frame_buffer_t(cube_map_texture_t const & tex)
      : cube_map_texture_id_(tex.id()), dims_(tex.face_dims()), samples_(0) {
      GL_VERIFY(gl_::gen_framebuffers(1, &fbo_id_));
      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::framebuffer, fbo_id_));

      // attach images (texture objects and renderbuffer objects) for each buffer (color, depth, stencil or a combination of depth and stencil)

      // bind texture at 
      //GL_VERIFY(gl_::framebuffer_texture_2d(gl_::framebuffer_target_t::framebuffer, gl_::framebuffer_attachment_t::color_attachment0, gl_::framebuffer_texture_target_t::texture_2d, tex.id(), 0));

      // create render buffer for stencil and depth (we arent interested in reading it)
      GL_VERIFY(gl_::gen_renderbuffers(1, &depth_rbo_id_));
      GL_VERIFY(gl_::bind_renderbuffer(gl_::renderbuffer_target_t::renderbuffer, depth_rbo_id_));
      GL_VERIFY(gl_::renderbuffer_storage(gl_::renderbuffer_target_t::renderbuffer, gl_::internal_format_t::depth_component16, dims_.x, dims_.y)); // GL_DEPTH24_STENCIL8
      GL_VERIFY(gl_::framebuffer_renderbuffer(gl_::framebuffer_target_t::framebuffer, gl_::framebuffer_attachment_t::depth_attachment, gl_::renderbuffer_target_t::renderbuffer, depth_rbo_id_)); // GL_DEPTH_STENCIL_ATTACHMENT

      GL_VERIFY(gl_::bind_renderbuffer(gl_::renderbuffer_target_t::renderbuffer, 0));

      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::framebuffer, 0));
   }

   frame_buffer_t::frame_buffer_t(texture_t const & tex)
   : dims_(tex.dims()), samples_(0) {
      GL_VERIFY(gl_::gen_framebuffers(1, &fbo_id_));
      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::framebuffer, fbo_id_));

      // attach images (texture objects and renderbuffer objects) for each buffer (color, depth, stencil or a combination of depth and stencil)
      GL_VERIFY(gl_::framebuffer_texture_2d(gl_::framebuffer_target_t::framebuffer, gl_::framebuffer_attachment_t::color_attachment0, gl_::framebuffer_texture_target_t::texture_2d, tex.id(), 0));

      // create render buffer for stencil and depth (we arent interested in reading it)
      GL_VERIFY(gl_::gen_renderbuffers(1, &depth_rbo_id_));
      GL_VERIFY(gl_::bind_renderbuffer(gl_::renderbuffer_target_t::renderbuffer, depth_rbo_id_));
      GL_VERIFY(gl_::renderbuffer_storage(gl_::renderbuffer_target_t::renderbuffer, gl_::internal_format_t::depth_component16, dims_.x, dims_.y)); // GL_DEPTH24_STENCIL8
      GL_VERIFY(gl_::framebuffer_renderbuffer(gl_::framebuffer_target_t::framebuffer, gl_::framebuffer_attachment_t::depth_attachment, gl_::renderbuffer_target_t::renderbuffer, depth_rbo_id_)); // GL_DEPTH_STENCIL_ATTACHMENT

      GL_VERIFY(gl_::bind_renderbuffer(gl_::renderbuffer_target_t::renderbuffer, 0));

      check_fbo();

      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::framebuffer, 0));
   }

   frame_buffer_t::frame_buffer_t(dim_t dims, unsigned samples)
      : dims_(dims), samples_(samples) {
      // NOTE: ANGLE doesn't support glTexImage2DMultisample (for MSAA), only glRenderbufferStorageMultisampleANGLE

      GL_VERIFY(gl_::gen_framebuffers(1, &fbo_id_));
      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::framebuffer, fbo_id_));

      // TODO: verify samples_ is valid
      // must use GL_BGRA8_EXT because thats what the default buffer format is in ANGLE (must match for blitting)
      GL_VERIFY(gl_::gen_renderbuffers(1, &colour_rbo_id_));
      GL_VERIFY(gl_::bind_renderbuffer(gl_::renderbuffer_target_t::renderbuffer, colour_rbo_id_));
#ifdef _MSC_VER
      if (samples_ == 0) GL_VERIFY(gl_::renderbuffer_storage(gl_::renderbuffer_target_t::renderbuffer, gl_::internal_format_t::bgra8_ext, dims_.x, dims_.y));
      else GL_VERIFY(gl_::renderbuffer_storage_multisample_angle(gl_::renderbuffer_target_t::renderbuffer, samples_, gl_::internal_format_t::bgra8_ext, dims_.x, dims_.y));
#else
      if (samples_ == 0) GL_VERIFY(gl_::renderbuffer_storage(gl_::renderbuffer_target_t::renderbuffer, gl_::internal_format_t::rgb8, dims_.x, dims_.y));
      else GL_VERIFY(gl_::renderbuffer_storage_multisample(gl_::renderbuffer_target_t::renderbuffer, samples_, gl_::internal_format_t::rgb8, dims_.x, dims_.y));
#endif
      GL_VERIFY(gl_::framebuffer_renderbuffer(gl_::framebuffer_target_t::framebuffer, gl_::framebuffer_attachment_t::color_attachment0, gl_::renderbuffer_target_t::renderbuffer, colour_rbo_id_));

      GL_VERIFY(gl_::gen_renderbuffers(1, &depth_rbo_id_));
      GL_VERIFY(gl_::bind_renderbuffer(gl_::renderbuffer_target_t::renderbuffer, depth_rbo_id_));
#ifdef _MSC_VER
      if (samples_ == 0) GL_VERIFY(gl_::renderbuffer_storage(gl_::renderbuffer_target_t::renderbuffer, gl_::internal_format_t::depth_component16, dims_.x, dims_.y));
      else GL_VERIFY(gl_::renderbuffer_storage_multisample_angle(gl_::renderbuffer_target_t::renderbuffer, samples_, gl_::internal_format_t::depth_component16, dims_.x, dims_.y));
#else
      if (samples_ == 0) GL_VERIFY(gl_::renderbuffer_storage(gl_::renderbuffer_target_t::renderbuffer, gl_::internal_format_t::depth_component16, dims_.x, dims_.y));
      else GL_VERIFY(gl_::renderbuffer_storage_multisample(gl_::renderbuffer_target_t::renderbuffer, samples_, gl_::internal_format_t::depth_component16, dims_.x, dims_.y));
#endif
      GL_VERIFY(gl_::framebuffer_renderbuffer(gl_::framebuffer_target_t::framebuffer, gl_::framebuffer_attachment_t::depth_attachment, gl_::renderbuffer_target_t::renderbuffer, depth_rbo_id_));

      GL_VERIFY(gl_::bind_renderbuffer(gl_::renderbuffer_target_t::renderbuffer, 0));

      check_fbo();

      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::framebuffer, 0));
   }

   frame_buffer_t::~frame_buffer_t() {
      if (0 != depth_rbo_id_) GL_VERIFY(gl_::delete_renderbuffers(1, &depth_rbo_id_));
      if (0 != colour_rbo_id_) GL_VERIFY(gl_::delete_renderbuffers(1, &colour_rbo_id_));
      GL_VERIFY(gl_::delete_framebuffers(1, &fbo_id_));
   }

   void frame_buffer_t::bind(BindTarget target) const {
      assert(cube_map_texture_id_ == 0 && "wrong bind method called on frame buffer with cube map colour buffer");
      bind_(target);
   }

   namespace {
      gl_::framebuffer_target_t to_gl(frame_buffer_t::BindTarget target) {
         gl_::framebuffer_target_t t
            = target == frame_buffer_t::ReadDraw ? gl_::framebuffer_target_t::framebuffer
            : target == frame_buffer_t::Read ? gl_::framebuffer_target_t::read_framebuffer
            : target == frame_buffer_t::Draw ? gl_::framebuffer_target_t::draw_framebuffer
            : throw error("unrecognised bind target");

         return t;
      }

      gl_::framebuffer_texture_target_t to_gl(frame_buffer_t::CubeFace face) {
         return static_cast<gl_::framebuffer_texture_target_t>(face);
      }
   }

   void frame_buffer_t::bind(CubeFace face, BindTarget target) const {
      assert(cube_map_texture_id_ != 0 && "wrong bind method called on frame buffer without cube map colour buffer");
      bind_(target);
      auto t = to_gl(target);
      auto f = to_gl(face);
      GL_VERIFY(gl_::framebuffer_texture_2d(t, gl_::framebuffer_attachment_t::color_attachment0, f, cube_map_texture_id_, 0));

      check_fbo();

      // TODO: 
      //glDrawBuffer(GL_COLOR_ATTACHMENT0);
   }

   void frame_buffer_t::bind_(BindTarget target) const {
      check_fbo();
      auto t = to_gl(target);
      GL_VERIFY(gl_ctx_.bind_framebuffer(t, fbo_id_));
   }

   void frame_buffer_t::unbind(BindTarget target) const {
      auto t = to_gl(target);
      GL_VERIFY(gl_ctx_.bind_framebuffer(t, 0));
   }

   void frame_buffer_t::blit_to_draw_buffer() const {
      // https://www.opengl.org/wiki/Framebuffer_Object
      // from https://www.opengl.org/wiki/Multisampling

      // you can do a full screen blit from an MSAA fbo to a non - MSAA fbo if they're the same format
      // see BlitFramebufferANGLE on entry_points_gles_2_0_ext.cpp : 667

      //GL_VERIFY(glBindFramebuffer(GL_DRAW_FRAMEBUFFER_ANGLE, 0));   // Make sure no FBO is set as the draw framebuffer
      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::read_framebuffer, fbo_id_)); // Make sure your multisampled FBO is the read framebuffer
#ifdef _MSC_VER
      gl::int_t TMP_GL_NEAREST = 0x2600;
      GL_VERIFY(gl_::blit_framebuffer_angle(0, 0, dims_.x, dims_.y, 0, 0, dims_.x, dims_.y, gl_::clear_buffer_flags_t::color_buffer_bit, TMP_GL_NEAREST));
#else
      gl::int_t TMP_GL_NEAREST = 0x2600;
      GL_VERIFY(gl_::blit_framebuffer(0, 0, dims_.x, dims_.y, 0, 0, dims_.x, dims_.y, gl_::clear_buffer_flags_t::color_buffer_bit, TMP_GL_NEAREST));
#endif
   }

   void frame_buffer_t::blit_to_screen() const {
      // TODO: this was GL_READ_FRAMEBUFFER_ANGLE for some reason
      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::draw_framebuffer, 0));
      blit_to_draw_buffer();
   }

   void frame_buffer_t::check_fbo() const {
      // Your framebuffer can only be used as a render target if memory has been allocated to store the results
      auto status = gl_::check_framebuffer_status(gl_::framebuffer_target_t::framebuffer);
      if (status != gl_::framebuffer_status_t::framebuffer_complete) {
         auto status_msg = [status] {
            switch (status) {
               //case GL_FRAMEBUFFER_UNDEFINED: return "GL_FRAMEBUFFER_UNDEFINED";
            case gl_::framebuffer_status_t::framebuffer_incomplete_attachment: return "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
            case gl_::framebuffer_status_t::framebuffer_incomplete_missing_attachment: return "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
               //case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER : return "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER";
               //case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER : return "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER";
            case gl_::framebuffer_status_t::framebuffer_unsupported: return "GL_FRAMEBUFFER_UNSUPPORTED";
#ifdef _MSC_VER
            case gl_::framebuffer_status_t::framebuffer_incomplete_dimensions: return "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
#else
            case gl_::framebuffer_status_t::framebuffer_incomplete_draw_buffer: return "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER";
#endif
               //case GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : return "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE";
               //case GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS : return "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS";
            default: return "UNRECOGNISED ENUM";
            }
         }();

         utils::log(utils::LOG_ERROR, "framebuffer not initialised correctly: error 0x%x (%s)\n", status, status_msg);
      }

      GL_CHECK();
   }

   id_t current_frame_buffer() {
      int fbo;
      GL_VERIFY(gl_::get_integerv(gl_::get_p_name_t::framebuffer_binding, &fbo));
      return fbo;
   }

   void bind_frame_buffer(id_t new_fbo) {
      GL_VERIFY(gl_ctx_.bind_framebuffer(gl_::framebuffer_target_t::framebuffer, new_fbo));
   }


  /**
   * class shader
   *
   */

   shader_compile_error::shader_compile_error(std::string source_name, shader_compile_error const & parent)
      : error(parent.what()) {
      log_ = std::string(" --- ") + source_name + " --- \n" + parent.log_;
   }

   shader_compile_error::shader_compile_error(id_t shader_id)
      : error("could not compile shader")
      , log_(get_shader_info_log(shader_id)) {
   }

   shader::shader(std::string const & source, shader::Type type)
      : id_(gl_::create_shader(to_glenum(type)))
      , type_(type)
   {
      GL_CHECK();

      const char * srcdata = source.c_str();
      GL_VERIFY(gl_::shader_source(id_, 1, &srcdata, NULL));
      GL_VERIFY(gl_::compile_shader(id_));

      gl::int_t success;
      GL_VERIFY(gl_::get_shaderiv(id_,gl_::get_shaderiv_p_name_t::compile_status, &success));
      if (success != GL_TRUE) {
         throw shader_compile_error(id_);
         // TODO: delete shader?
      }

      compile_log_ = get_shader_info_log(id_);
   }

   shader shader::create_from_file(std::string const & filename, shader::Type type)
   try {
      return create_from_source(utils::read_file(filename), type);
   }
   catch (shader_compile_error & ex) {
      throw shader_compile_error(filename, ex);
   }

   shader shader::create_from_source(std::string const & source, shader::Type type) {
      return{ source, type };
   }

   shader::~shader() {
      gl_::delete_shader(id_);
   }

   shader::shader(shader && other)
      : id_(other.id_)
      , type_(other.type_)
      , compile_log_(std::move(other.compile_log_)) {
      other.id_ = 0;
   }

   shader & shader::operator=(shader && other) {
      std::swap(id_, other.id_);
      type_ = other.type_;
      compile_log_ = std::move(other.compile_log_);
      return *this;
   }

  /**
   * ValueType functions
   **/

   template <> ValueType value_type<int8_t>() { return ValueType::Byte; }
   template <> ValueType value_type<uint8_t>() { return ValueType::UByte; }
   template <> ValueType value_type<int16_t>() { return ValueType::Short; }
   template <> ValueType value_type<uint16_t>() { return ValueType::UShort; }
   template <> ValueType value_type<int32_t>() { return ValueType::Int; }
   template <> ValueType value_type<uint32_t>() { return ValueType::UInt; }
   template <> ValueType value_type<float>() { return ValueType::Float; }
   template <> ValueType value_type<const int8_t>() { return ValueType::Byte; }
   template <> ValueType value_type<const uint8_t>() { return ValueType::UByte; }
   template <> ValueType value_type<const int16_t>() { return ValueType::Short; }
   template <> ValueType value_type<const uint16_t>() { return ValueType::UShort; }
   template <> ValueType value_type<const int32_t>() { return ValueType::Int; }
   template <> ValueType value_type<const uint32_t>() { return ValueType::UInt; }
   template <> ValueType value_type<const float>() { return ValueType::Float; }
   template <> ValueType value_type<glm::ivec2>() { return ValueType::IntVec2; }
   template <> ValueType value_type<glm::ivec3>() { return ValueType::IntVec3; }
   template <> ValueType value_type<glm::ivec4>() { return ValueType::IntVec4; }
   template <> ValueType value_type<glm::vec2>() { return ValueType::FloatVec2; }
   template <> ValueType value_type<glm::vec3>() { return ValueType::FloatVec3; }
   template <> ValueType value_type<glm::vec4>() { return ValueType::FloatVec4; }
   template <> ValueType value_type<glm::mat2>() { return ValueType::FloatMat2; }
   template <> ValueType value_type<glm::mat3>() { return ValueType::FloatMat3; }
   template <> ValueType value_type<glm::mat4>() { return ValueType::FloatMat4; }
   template <> ValueType value_type<texture_unit_t>() { return ValueType::Sampler2d; }


  /**
   * class uniform
   *
   */

   uniform::uniform(std::string const & name, int location, int size, ValueType type)
      : state_{ new state{ name, location, size, type, false } } {
   }

   uniform::uniform(std::string const & name)
      : uniform{ name, -1, 1, ValueType::Unknown } {
   }

   void uniform::reset(int location, int size, ValueType type) {
      state_->location_ = location;
      state_->size_ = size;
      state_->type_ = type;
      state_->error_ = false;
   }

   void uniform::reset() {
      state_->location_ = -1;
      state_->error_ = false;
   }

   namespace {

      template <typename T>
      ValueType uniform_type();
      template <> ValueType uniform_type<int>() { return ValueType::Int; }
      template <> ValueType uniform_type<float>() { return ValueType::Float; }
      template <> ValueType uniform_type<glm::ivec2>() { return ValueType::IntVec2; }
      template <> ValueType uniform_type<glm::ivec3>() { return ValueType::IntVec3; }
      template <> ValueType uniform_type<glm::ivec4>() { return ValueType::IntVec4; }
      template <> ValueType uniform_type<glm::vec2>() { return ValueType::FloatVec2; }
      template <> ValueType uniform_type<glm::vec3>() { return ValueType::FloatVec3; }
      template <> ValueType uniform_type<glm::vec4>() { return ValueType::FloatVec4; }
      template <> ValueType uniform_type<glm::mat2>() { return ValueType::FloatMat2; }
      template <> ValueType uniform_type<glm::mat3>() { return ValueType::FloatMat3; }
      template <> ValueType uniform_type<glm::mat4>() { return ValueType::FloatMat4; }
      template <> ValueType uniform_type<std::vector<glm::vec4>>() { return ValueType::FloatVec4; }
      template <> ValueType uniform_type<std::vector<glm::mat4>>() { return ValueType::FloatMat4; }
      template <> ValueType uniform_type<texture_unit_t>() { return ValueType::Sampler2d; }

      template <typename T>
      bool set_uniform(uniform & u, T const & val, bool report_errors) {
         if (!u.is_valid()) {
            if (report_errors) {
               utils::log(utils::LOG_WARN, "cannot set uniform - either program does not contain '%s' or it has been invalidated\n",
                  u.name().c_str());
            }
            return false;
         }

         if (uniform_type<T>() != u.type()) {
            if (report_errors) {
               utils::log(utils::LOG_WARN, "cannot set uniform - shader uniform '%s' is type %s, app provided %s\n",
                  u.name().c_str(),
                  ::to_string(u.type()).c_str(),
                  ::to_string(uniform_type<T>()).c_str());
            }
            return false;
         }

         glpp::set_uniform(u.location(), val);
         return true;
      }

      template <>
      bool set_uniform(uniform & u, texture_unit_t const & val, bool report_errors) {
         if (!u.is_valid()) {
            if (report_errors) {
               utils::log(utils::LOG_WARN, "cannot set uniform - either program does not contain '%s' or it has been invalidated\n",
                  u.name().c_str());
            }
            return false;
         }

         // TODO: verify type is Sampler2d or SamplerCubeMap etc...
         //if (uniform_type<T>() != u.type()) {
         //   if (report_errors) {
         //      utils::log(utils::LOG_WARN, "cannot set uniform - shader uniform '%s' is type %s, app provided %s\n",
         //         u.name().c_str(),
         //         ::to_string(u.type()).c_str(),
         //         ::to_string(uniform_type<T>()).c_str());
         //   }
         //   return false;
         //}

         glpp::set_uniform(u.location(), val);
         return true;
      }
   }

   void uniform::set(int val) {
      if (!set_uniform(*this, val, !state_->error_))
         state_->error_ = true;
   }

   void uniform::set(float val) {
      if (!set_uniform(*this, val, !state_->error_))
         state_->error_ = true;
   }

   void uniform::set(glm::vec2 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(glm::vec3 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(glm::vec4 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(glm::ivec2 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(glm::ivec3 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(glm::ivec4 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(glm::mat2 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(glm::mat3 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(glm::mat4 const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(texture_unit_t tex) {
      auto success = set_uniform(*this, tex, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(std::vector<glm::mat4> const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }

   void uniform::set(std::vector<glm::vec4> const & val) {
      auto success = set_uniform(*this, val, !state_->error_);
      if (!success) state_->error_ = true;
   }




  /**
   * class attrib
   *
   */

   attrib::attrib(std::string const & name, int location, int size, ValueType type)
      : state_{ new state{ name, location, size, type, false } } {
   }

   attrib::attrib(std::string const & name)
      : attrib{ name, -1, 1, ValueType::Unknown } {
   }

   void attrib::reset(int location, int size, ValueType type) {
      state_->location_ = location;
      state_->size_ = size;
      state_->type_ = type;
      state_->error_ = false;
   }

   void attrib::reset() {
      state_->location_ = -1;
      state_->error_ = false;
   }


  /**
   * buffer management
   *
   */
   
   buffer_t::state::state(Usage usage) : usage_(usage) {
   }

   buffer_t::state::state(void* vertex_data, std::size_t vertex_count, std::size_t vertex_byte_size, Usage usage)
   : state(usage) {
      assign(vertex_data, vertex_count, vertex_byte_size);
   }

   buffer_t::state::state(void* vertex_data, std::size_t vertex_count, std::size_t vertex_byte_size, void* index_data, unsigned index_count, std::size_t index_byte_size, ValueType index_data_type, Usage usage)
   : state(usage) {
      assign(vertex_data, vertex_count, vertex_byte_size, index_data, index_count, index_byte_size, index_data_type);
   }

   buffer_t::state::state(void* index_data, unsigned index_count, std::size_t index_byte_size, ValueType index_data_type, Usage usage)
   : state(usage) {
      assign(index_data, index_count, index_byte_size, index_data_type);
   }

   buffer_t::state::~state() {
      assign(nullptr, 0, 0, nullptr, 0, 0, ValueType::Unknown);
   }

   void buffer_t::state::assign(void* vertex_data, std::size_t vertex_count, std::size_t vertex_byte_size) {
      vertex_count_ = vertex_count;
      vertex_buffer_size_ = vertex_byte_size;

      if (vertex_data == nullptr) {
         if (vertex_id_) gl_::delete_buffers(1, &vertex_id_);
         vertex_id_ = 0;
         return;
      }

      if (!vertex_id_) gl_::gen_buffers(1, &vertex_id_);
      auto usage
         = usage_ == Usage::Static ? gl_::buffer_usage_arb_t::static_draw
         : usage_ == Usage::Dynamic ? gl_::buffer_usage_arb_t::dynamic_draw
         : gl_::buffer_usage_arb_t::stream_draw;
      gl_ctx_.bind_buffer(gl_::buffer_target_arb_t::array_buffer, vertex_id_);
      gl_::buffer_data(gl_::buffer_target_arb_t::array_buffer, vertex_byte_size, vertex_data, usage);
   }

   void buffer_t::state::assign(void* vertex_data, std::size_t vertex_count, std::size_t vertex_byte_size, void* index_data, unsigned index_count, std::size_t index_byte_size, ValueType index_data_type) {
      assign(vertex_data, vertex_count, vertex_byte_size);

      if (index_data == nullptr) {
         if (index_id_) gl_::delete_buffers(1, &index_id_);
         index_id_ = 0;
         return;
      }

      index_data_type_ = index_data_type;
      index_count_ = index_count;

      // TODO: infer byte size?
      assert(index_byte_size == index_count * attrib_atomic_val_bytes(index_data_type));
      if (!index_id_) gl_::gen_buffers(1, &index_id_);
      gl_ctx_.bind_buffer(gl_::buffer_target_arb_t::element_array_buffer, index_id_);
      gl_::buffer_data(gl_::buffer_target_arb_t::element_array_buffer, index_byte_size, index_data, gl_::buffer_usage_arb_t::static_draw);
   }

   void buffer_t::state::assign(void* index_data, unsigned index_count, std::size_t index_byte_size, ValueType index_data_type) {
      assign(nullptr, 0, 0, index_data, index_count, index_byte_size, index_data_type);
   }

   buffer_t::buffer_t(Usage usage)
      : state_(std::make_shared<state>(usage)) {
   }

   buffer_t::buffer_t(Target target, static_array_t data, Usage usage)
      : buffer_t(usage) {
      update(target, data);
   }

   buffer_t::buffer_t(static_array_t vertex_data, Usage usage)
      : buffer_t(usage) {
      update(vertex_data);
   }

   buffer_t::buffer_t(static_array_t vertex_data, static_array_t index_data, Usage usage)
      : buffer_t(usage) {
      update(vertex_data, index_data);
   }

   void buffer_t::update(Target target, static_array_t data) {
      switch (target) {
      case Target::ArrayBuffer:
         state_->assign(data.data(), data.elem_count(), data.size());
         break;
      case Target::IndexBuffer:
         state_->assign(data.data(), data.elem_count(), data.size(), data.data_type());
         break;
      default:
         assert(false && "unrecognised buffer target");
         throw error("unrecognised buffer target");
      }
   }

   void buffer_t::update(static_array_t vertex_data) {
      state_->assign(vertex_data.data(), vertex_data.elem_count(), vertex_data.size());
   }

   void buffer_t::update(static_array_t vertex_data, static_array_t index_data) {
      state_->assign(vertex_data.data(), vertex_data.elem_count(), vertex_data.size(), index_data.data(), index_data.elem_count(), index_data.size(), index_data.data_type());

      assert((index_data.data_type() == ValueType::UInt || index_data.data_type() == ValueType::UShort || index_data.data_type() == ValueType::UByte) && "second buffer parameter must be index buffer (must be integral type)");
   }

   void buffer_t::bind() const {
      if (0 != state_->vertex_id_) {
         gl_ctx_.bind_buffer(gl_::buffer_target_arb_t::array_buffer, state_->vertex_id_);
      }
      if (0 != state_->index_id_) {
         gl_ctx_.bind_buffer(gl_::buffer_target_arb_t::element_array_buffer, state_->index_id_);
      }
   }


   unsigned attrib_info::calc_stride_bytes() const{
      return stride_bytes != 0
         ? stride_bytes
         : attrib_atomic_val_bytes(attrib.type()) * count;
   }

   unsigned num_vertices(buffer_spec_t const & packed) {
      auto block_count = [&](attrib_info const & b) {
         auto stride_bytes = b.calc_stride_bytes();
         assert(packed.buffer.vertex_buffer_size() % stride_bytes == 0);

         return packed.buffer.vertex_buffer_size() / stride_bytes;
      };

      auto min_block_count = block_count(packed.attribs.front());

      for (auto it = packed.attribs.begin() + 1; it != packed.attribs.end(); ++it) {
         auto c = block_count(*it);
         if (c < min_block_count) min_block_count = c;
      }

      assert(min_block_count > 0);

      return min_block_count;
   }

   void bind(buffer_spec_t const & packed) {
      packed.buffer.bind();
      for (auto & attrib_info : packed.attribs) {
         auto gl_type = attrib_atomic_gl_type(attrib_info.attrib.type());

         // TODO: HOLY CRAP get rid of this! we shouldnt need to do this every time!
         GL_VERIFY(gl_::vertex_attrib_pointer(
            attrib_info.attrib.location(), attrib_info.count, gl_type,
            false, attrib_info.stride_bytes, reinterpret_cast<void*>(attrib_info.offset_bytes)));

         // TODO: What about disabling?
         GL_VERIFY(gl_::enable_vertex_attrib_array(attrib_info.attrib.location()));
      }
   }

   void draw(buffer_spec_t const & b, DrawMode mode) {
      unsigned count = b.buffer.has_index_data() ? b.buffer.index_count() : num_vertices(b);
      return draw(b, mode, 0, count);
   }

   namespace {
      gl_::primitive_type_t gl_draw_mode(DrawMode mode) {
         switch (mode) {
         case DrawMode::Points: return gl_::primitive_type_t::points;
         case DrawMode::Lines: return gl_::primitive_type_t::lines;
         case DrawMode::LineLoop: return gl_::primitive_type_t::line_loop;
         case DrawMode::Triangles: return gl_::primitive_type_t::triangles;
         case DrawMode::TriangleStrip: return gl_::primitive_type_t::triangle_strip;
         case DrawMode::TriangleFan: return gl_::primitive_type_t::triangle_fan;
         default: throw error("unrecognised draw type when drawing");
         }
      }
   }

   void draw(buffer_spec_t const & b, DrawMode mode, unsigned first, unsigned count) {
      bind(b);

      if (b.buffer.has_index_data()) {
         assert(count <= b.buffer.index_count() && "index count greater than number of indices in buffer while drawing indexed buffer");
         assert(first <= b.buffer.index_count() && "first index greater than total number of indices in buffer while drawing indexed buffer");
         assert(first + count <= b.buffer.index_count() && "end index greater than total number of indices in buffer while drawing indexed buffer");

         auto gl_mode = gl_draw_mode(mode);
         auto gl_type = element_index_gl_type(b.buffer.index_data_type());
         auto idx_count = count;
         auto idx_start = reinterpret_cast<GLvoid*>(first * attrib_atomic_val_bytes(b.buffer.index_data_type()));
         
         GL_VERIFY(gl_::draw_elements(gl_mode, idx_count, gl_type, idx_start));
      }
      else {
         GL_VERIFY(gl_::draw_arrays(gl_draw_mode(mode), first, count));
      }
   }



   buffer_spec_builder_t::buffer_spec_builder_t(buffer_t buffer)
      : state_(std::make_shared<state>(std::move(buffer))) {
   }

   buffer_spec_builder_t buffer_spec_builder_t::attrib(std::string attrib_name, unsigned count) {
      state_->slices_.push_back({ attrib_name, count });

      return *this;
   }

   buffer_spec_builder_t buffer_spec_builder_t::skip_bytes(unsigned bytes) {
      state_->slices_.push_back({ "", bytes });

      return *this;
   }

   buffer_spec_t buffer_spec_builder_t::build(program & prg) const {
      assert(state_->slices_.size() != 0 && "cannot build buffer spec without any attributes");

      buffer_spec_t::attribs_type attribs_sans_stride;

      unsigned pos_bytes = 0;

      for (auto & s : state_->slices_) {
         // process 'skip bytes' requests
         if (s.attrib_name == "") {
            // count is in bytes in this case
            pos_bytes += s.count;
            continue;
         }

         // assume slice is an attrib specification
         auto attrib = prg.attrib(s.attrib_name);

         if (!attrib.is_valid()) {
            // TODO: parse shader files to determine types (might be elided by compiler)

            utils::log(utils::LOG_WARN, "adding an invalid attribute '%s' when rendering\n", attrib.name().c_str());

            // guess how big it is
            auto elem_size_guess
               = attrib.type() == ValueType::Unknown ? 4
               : attrib_atomic_val_bytes(attrib.type());

            pos_bytes += s.count * elem_size_guess;
            continue;
         }

         // assume slice is valid
         auto slice_size = s.count * attrib_atomic_val_bytes(attrib.type());
         attribs_sans_stride.push_back({ std::move(attrib), s.count, 0, pos_bytes });
         pos_bytes += slice_size;
      }

      buffer_spec_t::attribs_type attribs;
      // prototype doesnt have correct stride
      for (auto & a : attribs_sans_stride) {
         attribs.push_back({ a.attrib, a.count, pos_bytes, a.offset_bytes });
      }

      // validate span divides into buffer nicely, warn if not

      if (0 != state_->buffer_.vertex_buffer_size() % pos_bytes) {
         utils::log(utils::LOG_WARN, "vertex buffer is not a multiple of the vertex data size!");
         assert(false && "vertex buffer is not a multiple of the vertex data size!");
      }

      return{ state_->buffer_, std::move(attribs) };
   }

   buffer_spec_builder_t describe_buffer(buffer_t buffer) {
      return{ buffer };
   }


   //buffer_spec_t buffer(buffer_t b, std::initializer_list<attrib_info> attribs) {
   //   return{ b, { std::begin(attribs), std::end(attribs) } };
   //}

   //buffer_spec_t buffer(std::initializer_list<attrib_info> attribs) {
   //   return{ {}, { std::begin(attribs), std::end(attribs) } };
   //}


  /**
   * pass_t
   *
   */


   struct pass_t::state {
      state(program prg) : prg_(prg) {}
      state(pass_t & parent) : prg_(parent.state_->prg_), parent_(new pass_t(parent)) {}
      state(state const &) = delete;
      state & operator=(state const &) = delete;

      program prg_;
      std::unique_ptr<pass_t> parent_;
      std::vector<buffer_spec_t> vertex_buffers_;
      int index_buffer_idx_ = -1;
      std::vector<std::pair<texture_unit_t, texture_t>> texture_bindings_;
      std::vector<std::pair<glpp::uniform, texture_t>> texture_bindings_without_tex_units_;
      std::vector<std::pair<glpp::uniform, uniform_action_t>> uniform_actions_;
   };


   pass_t::pass_t(program prg)
      : state_(std::make_shared<state>(prg)) {
   }

   pass_t::pass_t(extend_tag, pass_t & parent)
      : state_(std::make_shared<state>(parent)) {
   }

   pass_t::~pass_t() {}

   pass_t pass_t::extend() {
      return{ extend_tag(), *this };
   }

   pass_t & pass_t::with(buffer_spec_t buffer_spec) {
      state_->vertex_buffers_.push_back(std::move(buffer_spec));
      auto & b = state_->vertex_buffers_.back();

      // keep track of which buffer has the index data
      if (b.buffer.has_index_data()) {
         assert(!index_buffer_() && "render pass already has an index buffer");
         state_->index_buffer_idx_ = state_->vertex_buffers_.size() - 1;
      }
      return *this;
   }

   pass_t & pass_t::with(buffer_spec_builder_t const & builder) {
      return with(builder.build(state_->prg_));
   }

   template <>
   pass_t & pass_t::set_uniform<texture_t>(std::string const & name, texture_t val) {
      state_->texture_bindings_without_tex_units_.push_back({ uniform(name), val });
      return *this;
   }

   pass_t & pass_t::set_uniform_action(std::string const & name, uniform_action_t action) {
      // overwrite if existing
      for (auto & upair : state_->uniform_actions_) {
         if (upair.first.name() != name) continue;

         upair.second = action;
         return *this;
      }

      // no binding exists, add to end
      state_->uniform_actions_.push_back({ state_->prg_.uniform(name), action });
      return *this;
   }

   pass_t & pass_t::set_texture_unit(texture_unit_t u, texture_t tex) {
      // overwrite if existing
      for (auto & tpair : state_->texture_bindings_) {
         if (tpair.first.id != u.id) continue;

         tpair.second = tex;
         return *this;
      }

      // no binding exists, add to end
      state_->texture_bindings_.push_back({ u, tex });
      return *this;
   }

   buffer_t const * pass_t::index_buffer_() const {
      if (state_->index_buffer_idx_ != -1) return &state_->vertex_buffers_[state_->index_buffer_idx_].buffer;
      if (state_->parent_) return state_->parent_->index_buffer_();
      return nullptr;
   }


   //pass_t & pass_t::validate_attribs(bool validate) {
   //   if (!validate) return *this;

   //   struct slice_info { unsigned offset; unsigned long size; };
   //   struct array_info { void * const data; unsigned block_size; std::vector<slice_info> slices; };

   //   std::vector<array_info> arrays;
   //   auto find_array_info = [&](void * const p, unsigned block_size) -> array_info & {
   //      for (auto & a : arrays) {
   //         if (a.data == p) {
   //            assert(a.block_size == block_size && "attribute bindings disagree on block sizes");
   //            return a;
   //         }
   //      }
   //      arrays.push_back({ p, block_size });
   //      return arrays.back();
   //   };

   //   for (auto & b : attrib_bindings_) {
   //      // find or add the array info
   //      auto & arrinfo = find_array_info(b.array.data(), b.calc_stride_bytes());

   //      // add the slice info for this attrib in the array
   //      auto ins_it = arrinfo.slices.begin();
   //      while (ins_it != arrinfo.slices.end() && b.offset_bytes > ins_it->offset)
   //         ++ins_it;

   //      arrinfo.slices.insert(ins_it, { b.offset_bytes, b.count * b.array.elem_size() });
   //   }

   //   // validate the structure of the slices within each array
   //   for (auto & arrinfo : arrays) {
   //      auto block_size = arrinfo.block_size;
   //      auto end_of_last_attrib = 0U;
   //      for (auto & slice : arrinfo.slices) {
   //         assert(slice.offset < block_size && "attribute data exceeds the expected 'block' size");
   //         assert(slice.offset >= end_of_last_attrib && "attribute data overlaps another attribute's data");
   //         auto end_of_attrib = slice.offset + slice.size;
   //         assert(end_of_attrib <= block_size && "attribute data runs off the end of the block");
   //         end_of_last_attrib = end_of_attrib;
   //      }
   //   }

   //   return *this;
   //}

   unsigned pass_t::calc_draw_count_() const {
      auto draw_count = 0U;

      auto * index_buffer = index_buffer_();
      if (nullptr != index_buffer) return index_buffer->index_count();

      // TODO: verify that all buffers have sufficient elements to draw?

      for (auto & v : state_->vertex_buffers_) {
         draw_count = draw_count == 0 ? num_vertices(v) : std::min(draw_count, num_vertices(v));
      }

      return draw_count;
   }

   pass_t & pass_t::draw(DrawMode mode) {
      prepare_draw_();
      draw_(mode, 0, calc_draw_count_());
      return *this;
   }

   pass_t & pass_t::draw(DrawMode mode, unsigned first, unsigned count) {
      prepare_draw_();
      draw_(mode, first, count);
      return *this;
   }

   void pass_t::draw_(DrawMode mode, unsigned first, unsigned count) {
      auto * index_buffer = index_buffer_();
      if (nullptr != index_buffer) {
         auto index_count = index_buffer->index_count();
         assert(count <= index_count && "index count greater than number of indices in buffer while drawing indexed buffer");
         assert(first <= index_count && "first index greater than total number of indices in buffer while drawing indexed buffer");
         assert(first + count <= index_count && "end index greater than total number of indices in buffer while drawing indexed buffer");

         auto gl_type = element_index_gl_type(index_buffer->index_data_type());
         auto idx_count = count;
         auto idx_start = reinterpret_cast<GLvoid*>(first * attrib_atomic_val_bytes(index_buffer->index_data_type()));

         GL_VERIFY(gl_::draw_elements(gl_draw_mode(mode), idx_count, gl_type, idx_start));
      }
      else {
         GL_VERIFY(gl_::draw_arrays(gl_draw_mode(mode), first, count));
      }
   }

   pass_t & pass_t::draw_batch(render_callback const & cb, DrawMode mode) {
      prepare_draw_();

      auto draw_count = calc_draw_count_();
      while (cb.prepare_next(state_->prg_)) {
         draw_(mode, 0, draw_count);
      }

      return *this;
   }

   pass_t & pass_t::draw_batch(render_callback const & cb, DrawMode mode, unsigned first, unsigned count) {
      prepare_draw_();

      while (cb.prepare_next(state_->prg_)) {
         draw_(mode, first, count);
      }

      return *this;
   }

   uniform pass_t::uniform(std::string const & name) {
      return state_->prg_.uniform(name);
   }

   void pass_t::prepare_draw_() {
      if (state_->parent_) {
         state_->parent_->prepare_draw_();
      }
      else {
         state_->prg_.use();
      }

      for (auto & upair : state_->uniform_actions_) {
         upair.second(upair.first); // invoke action
      }

      // bind textures to the texture units used by this pass
      for (auto & tpair : state_->texture_bindings_) {
         texture_unit_t const & tex_unit = tpair.first;
         texture_t const & tex = tpair.second;

         tex_unit.activate();
         tex.bind();
      }

      if (!state_->texture_bindings_without_tex_units_.empty()) {
         std::vector<int> allocated_texture_units;
         auto add_texture_unit = [&](texture_unit_t const & u) {
            auto id = u.id;
            auto insert_it = std::upper_bound(std::begin(allocated_texture_units), std::end(allocated_texture_units), id);
            allocated_texture_units.insert(insert_it, id);
         };
         auto allocate_texture_unit = [&]() -> texture_unit_t {
            auto it = std::begin(allocated_texture_units);
            auto itEnd = std::end(allocated_texture_units);
            for (auto i = 0; i < 60; i++) {
               // find unallocated (the list is sorted)
               if (it == itEnd || *it != i) {
                  texture_unit_t u{ i };
                  add_texture_unit(u); // track so we dont re-allocate later
                  return u;
               }
               ++it;
            }
            throw error("logic error finding unallocated texture unit");
         };

         for (auto & tpair : state_->texture_bindings_) {
            add_texture_unit(tpair.first);
         }

         // allocate and bind unallocated textures
         for (auto & tpair : state_->texture_bindings_without_tex_units_) {
            auto tex_unit = allocate_texture_unit();
            texture_t const & tex = tpair.second;

            tpair.first.set(tex_unit);
            tex_unit.activate();
            tex.bind();
         }
      }

      for (auto & v : state_->vertex_buffers_) glpp::bind(v);
   }


  /**
   * class program
   *
   */

   program::state::state()
      : id_(gl_::create_program()) {
      GL_CHECK();
   }

   program::state::~state() {
      destroy();
   }

   void program::state::destroy() {
      shaders_.clear();
      for (auto & u : uniforms_) { u.reset(); }
      for (auto & a : attribs_) { a.reset(); }

      gl_::delete_program(id_);
      id_ = 0;
   }

   program::program()
      : state_(std::make_shared<state>()) {
      state_->id_ = gl_::create_program();
      GL_CHECK();
   }

   program::program(shader s1, shader s2)
   : program() {
      try {
         attach(std::move(s1));
         attach(std::move(s2));

         reload();
      }
      catch (...) {
         destroy();
         throw;
      }
   }

   void program::reload(shader s1, shader s2) {
      for (auto & s : state_->shaders_) {
         GL_VERIFY(gl_::detach_shader(state_->id_, s.id()));
      }
      state_->shaders_.clear();

      attach(std::move(s1));
      attach(std::move(s2));

      reload();
   }

   program::~program() {
   }

   void program::reload() {
      auto & _ = *state_;
      decltype(_.uniforms_) old_uniforms;
      old_uniforms.swap(_.uniforms_);

      decltype(_.attribs_) old_attribs;
      old_attribs.swap(_.attribs_);

      auto find_uniform_with_name = [&](std::string const & name) {
         for (auto it = old_uniforms.begin(); it != old_uniforms.end(); ++it) {
            if (it->name() == name) return it;
         }

         return old_uniforms.end();
      };

      auto find_attrib_with_name = [&](std::string const & name) {
         for (auto it = old_attribs.begin(); it != old_attribs.end(); ++it) {
            if (it->name() == name) return it;
         }

         return old_attribs.end();
      };

      GL_VERIFY(gl_::link_program(_.id_));

      use();

      gl::int_t num_uniforms;
      GL_VERIFY(gl_::get_programiv(_.id_, gl_::get_programiv_p_name_t::active_uniforms, &num_uniforms));

      for (auto idx = 0; idx < num_uniforms; idx++) {
         int size;
         gl_::uniform_type_t gl_type;
         char name[513];

         GL_VERIFY(gl_::get_active_uniform(_.id_, idx, 512, nullptr, &size, &gl_type, name));
         auto location = gl_::get_uniform_location(_.id_, name);
         if (location == -1) {
            utils::log(utils::LOG_WARN, "uniform '%s' location unknown\n", name);
         }
         GL_CHECK();

         auto type = gl_to_value_type(gl_type);
         auto it = find_uniform_with_name(name);
         if (it == old_uniforms.end()) {
            _.uniforms_.push_back({ name, location, size, type });
         }
         else {
            it->reset(location, size, type);
            _.uniforms_.push_back(*it);
            old_uniforms.erase(it);
         }
      }

      gl::int_t num_attribs;
      gl_::get_programiv(_.id_, gl_::get_programiv_p_name_t::active_attributes, &num_attribs);

      for (auto idx = 0; idx < num_attribs; idx++) {
         int size;
         gl_::attrib_type_t gl_type;
         char name[513];

         GL_VERIFY(gl_::get_active_attrib(_.id_, idx, 512, nullptr, &size, &gl_type, name));
         auto location = gl_::get_attrib_location(_.id_, name);
         if (location == -1) {
            utils::log(utils::LOG_WARN, "attribute '%s' location unknown\n", name);
         }
         else {
            assert(idx == location);
         }

         GL_CHECK();

         auto type = gl_to_value_type(gl_type);
         auto it = find_attrib_with_name(name);
         if (it == old_attribs.end()) {
            _.attribs_.push_back({ name, location, size, type });
         }
         else {
            it->reset(location, size, type);
            _.attribs_.push_back(*it);
            old_attribs.erase(it);
         }
      }

      // make sure we keep handles to the old uniforms so existing handles dont just break
      for (auto & u : old_uniforms) {
         u.reset();
         _.uniforms_.push_back(u);
      }
      for (auto & a : old_attribs) {
         a.reset();
         _.attribs_.push_back(a);
      }
   }

   uniform program::uniform(std::string const & name) {
      for (auto & u : state_->uniforms_) {
         if (u.name() == name) return u;
      }

      // not found, create and start tracking an invalid uniform
      auto new_uniform = glpp::uniform{ name };
      state_->uniforms_.push_back(new_uniform);
      return new_uniform;
   }

   attrib program::attrib(std::string const & name) {
      for (auto & a : state_->attribs_) {
         if (a.name() == name) return a;
      }

      // not found, create and start tracking an invalid attrib
      auto new_attrib = glpp::attrib{ name };
      state_->attribs_.push_back(new_attrib);
      return new_attrib;
   }

   void program::use() const {
      GL_VERIFY(gl_ctx_.use_program(state_->id_));
   }

   void program::destroy() {
      state_->destroy();
   }

   void program::attach(shader s) {
      GL_VERIFY(gl_::attach_shader(state_->id_, s.id()));
      state_->shaders_.push_back(std::move(s));
   }

   std::string program::compile_logs() const {
      auto type_to_string = [](shader const & s) -> std::string {
         switch (s.type()) {
         case shader::Vertex: return " --- vertex log ---\n";
         case shader::Fragment: return " --- fragment log ---\n";
         default: return " --- unrecognised shader type log ---\n";
         }
      };

      std::string logs;
      for (auto & s : state_->shaders_) {
         auto log = s.compile_log();
         if (log.length() == 0) continue;

         logs += type_to_string(s);
         logs += log + "\n";
      }

      return logs;
   }

   pass_t program::pass() {
      return{ *this };
   }


  /**
   * class window
   *
   */

   struct context::impl {
      impl(GLFWwindow* window) : window_(window) { }

      GLFWwindow* window_ = nullptr;
   };


   window::window(context & ctx)
      : ctx_(ctx) {
      //, windowed_dims_(window_dims())
      //, windowed_pos_(window_pos()){
   }

   void window::set_should_close(bool close) {
      glfwSetWindowShouldClose(ctx_.impl_->window_, close ? GL_TRUE : GL_FALSE);
   }

   bool window::closing() const {
      return GL_TRUE == glfwWindowShouldClose(ctx_.impl_->window_);
   }

   void window::swap() {
      glfwSwapBuffers(ctx_.impl_->window_);
      glfwPollEvents();
   }

   dim_t window::window_dims() const {
      int width, height;
      glfwGetWindowSize(ctx_.impl_->window_, &width, &height);
      return{ width, height };
   }

   dim_t window::window_pos() const {
      int x, y;
      glfwGetWindowPos(ctx_.impl_->window_, &x, &y);
      return{ x, y };
   }

   dim_t window::frame_buffer_dims() const {
      int width, height;
      glfwGetFramebufferSize(ctx_.impl_->window_, &width, &height);
      return{ width, height };
   }

   void window::set_fullscreen(bool enable) {
      if (enable == is_fullscreen()) return;

      ctx_.recreate_window(enable);
   }

   bool window::is_fullscreen() const {
      return ctx_.fullscreen_;
   }


  /**
   * class context
   *
   */

   namespace {
      static std::atomic<bool> initialized_ { false };

      struct window_key_callbacks_t {
         struct callback_info_t { GLFWwindow* window; context * context; context::key_callback_t callback; };

         void set(GLFWwindow* window, context & context, context::key_callback_t callback) {
            std::unique_lock<std::mutex> l(m_);

            for (auto p : callbacks_) {
               if (p.window == window) throw error("cannot set window key callback - key handler already registered for window");
            }

            callbacks_.push_back({ window, &context, callback });
         }

         void remove(GLFWwindow* window) {
            std::unique_lock<std::mutex> l(m_);

            for (auto it = callbacks_.cbegin(); it != callbacks_.cend(); ++it) {
               if (it->window == window) {
                  callbacks_.erase(it);
                  return;
               }
            }
         }

         void invoke(GLFWwindow* window, Key key, int scancode, KeyAction action, int mods) {
            auto info = [&]() -> callback_info_t {
               std::unique_lock<std::mutex> l(m_);

               for (auto info : callbacks_) {
                  if (info.window == window) return info;
               }

               throw error("cannot get window key callback - no key callback registered for window");
            }();

            info.callback(*info.context, key, scancode, action, mods);
         }

         std::mutex m_;
         std::vector<callback_info_t> callbacks_;
      };

      window_key_callbacks_t window_key_callbacks_;

      void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
         window_key_callbacks_.invoke(
            window, 
            glpp::from_glfw_key(key), 
            scancode, 
            glpp::from_glfw_key_action(action), 
            glpp::from_glfw_key_mods(mods));
      }
   }

   context::context(key_callback_t key_handler)
   : key_handler_(key_handler)
   , fullscreen_(false)
   , impl_(nullptr)
   {
      if (!initialized_) { throw error("runtime not initialised - call glpp::init() first"); }

      recreate_window(false);

      gl_::init();

#ifdef _MSC_VER
      assert(extensionEnabled("GL_ANGLE_framebuffer_multisample"));
      // TODO: sRGB? instancing?
#endif

      win_.reset(new window{ *this });
   }

   context::~context() {
      destroy();
   }

   void context::recreate_window(bool fullscreen) {
      fullscreen_ = fullscreen;
      // some more info on extensions: http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-12-opengl-extensions/
      // glfwOpenWindowHint(GLFW_OPENGL_DEBUG_CONTEXT, 1); 
      // glfwOpenWindowHint(GLFW_WINDOW_NO_RESIZE, GL_TRUE);
      // GL_ARB_framebuffer_object available in GL ES 2.0?

#ifdef GLPP_USING_GLES2
      glfwWindowHint(GLFW_CLIENT_API, GLFW_OPENGL_ES_API);
#endif
      glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
      glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
      glfwWindowHint(GLFW_SAMPLES, 8);
      glfwWindowHint(GLFW_RESIZABLE, GL_TRUE);

      auto * monitor = fullscreen ? glfwGetPrimaryMonitor() : nullptr;
      auto res = [&] {
         if (fullscreen) {
            auto * vid_mode = glfwGetVideoMode(monitor);
            return dim_t{ vid_mode->width, vid_mode->height };
         }
         return dim_t{ 1920, 1089 };
      }();

      auto* prev_win = impl_ ? impl_->window_ : nullptr;
      auto* win = glfwCreateWindow(res.x, res.y, "Game", monitor, prev_win);
      if (!win) {
         throw error("could not create GLFW window or context");
      }

      if (prev_win) {
         glfwDestroyWindow(prev_win);
      }

      glfwMakeContextCurrent(win);

      if (impl_) window_key_callbacks_.remove(impl_->window_);
      window_key_callbacks_.set(win, *this, key_handler_);
      glfwSetKeyCallback(win, key_callback);

      impl_.reset(new impl{ win });
   }

   std::vector<std::string> context::extensions() const {
      std::vector<std::string> extensions;
      auto es = glGetString(GL_EXTENSIONS);
      for (auto i = 0, iTokBegin = 0; es[i]; i++) {
         auto endOfToken = es[i + 1] == ' ' || es[i + 1] == '\0';
         if (!endOfToken) continue;

         auto token = std::string{ es + iTokBegin, es + i + 1 };
         auto tokenIsEmpty = std::string::npos == token.find_last_not_of(" \t");

         if (!tokenIsEmpty)
            extensions.push_back(token);

         iTokBegin = i + 2;
      }
      return extensions;
   }

   std::string context::info(bool with_extensions) const {
      std::string buf;
      buf += "GLFW version        : "; buf += glfwGetVersionString();
      buf += "\nGL_VERSION          : "; buf += (const char *)glGetString(GL_VERSION);
      buf += "\nGL_VENDOR           : "; buf += (const char *)glGetString(GL_VENDOR);
      buf += "\nGL_RENDERER         : "; buf += (const char *)glGetString(GL_RENDERER);
#ifdef GL_SHADING_LANGUAGE_VERSION
      buf += "\nGL_SHADING_LANGUAGE_VERSION : "; buf += (const char *)glGetString(GL_SHADING_LANGUAGE_VERSION);
#endif

      if (with_extensions) {
         auto es = extensions();
         buf += "\nGL EXTENSIONS [" + std::to_string(es.size()) + "]:";
         for (auto e : es) buf += "\n - " + e;
      }

      return buf;
   }

   void context::destroy() {
      if (impl_ && impl_->window_) glfwDestroyWindow(impl_->window_);
   }


   //
   // class sprite_sheet
   //

   sprite_sheet::sprite_sheet(glpp::texture_t texture, std::vector<frame_ref> frames)
      : texture_(texture) {
      for (auto & s : frames) {
         if (s.dimensions.x > max_frame_width_) max_frame_width_ = s.dimensions.x;
         if (s.dimensions.y > max_frame_height_) max_frame_height_ = s.dimensions.y;

         frames_.push_back(s);
      }

      frame_count_ = frames_.size();
   }

   namespace {
      std::vector<sprite_sheet::frame_ref> calculate_frames(glpp::texture_t const & texture, int frame_x, int frame_y) {
         auto tex_dims = texture.dims();
         std::vector<sprite_sheet::frame_ref> frames;
         for (auto y = 0; y < tex_dims.y; y += frame_y) {
            for (auto x = 0; x < tex_dims.x; x += frame_x) {
               // tex coords are from top==0, 2d graphics use bottom==0
               auto frame_lower_bound = (tex_dims.y)-(y + frame_y);

               assert(frame_lower_bound >= 0 && "calculated frame lower bound is < 0");
               assert((frame_lower_bound + frame_y) <= tex_dims.y && "calculated frame upper bound is > texture height");

               frames.push_back({ { x, frame_lower_bound }, { frame_x, frame_y } });
            }
         }
         return frames;
      }
   }

   sprite_sheet::sprite_sheet(glpp::texture_t texture, int frame_x, int frame_y)
      : sprite_sheet(texture, calculate_frames(texture, frame_x, frame_y)) {
   }

   sprite_sheet::sprite_sheet(glpp::texture_t texture)
      : texture_(texture)
      , max_frame_width_(texture.dims().x)
      , max_frame_height_(texture.dims().y) {
      frames_.push_back(frame_ref{ { 0, 0 }, { max_frame_width_, max_frame_height_ } });
      frame_count_ = frames_.size();
   }


   //
   // class sprite_animation_t
   //

   sprite_animation_t::sprite_animation_t(sprite_sheet const & frames, std::initializer_list<int> indices)
      : frames_(frames)
      , indices_(std::begin(indices), std::end(indices))
   {}

   glpp::texture_t sprite_animation_t::texture() const {
      return frames_.texture();
   }

   std::size_t sprite_animation_t::frame_count() const {
      return indices_.size();
   }

   sprite_sheet::frame_ref const & sprite_animation_t::frame(std::size_t idx) const {
      return frames_.frame(indices_.at(idx));
   }


   //
   // class sprite_t
   //

   struct sprite_t::state {
      state(std::initializer_list<sprite_animation_t> & animations)
         : animations_(std::begin(animations), std::end(animations))
      {}

      std::vector<sprite_animation_t> animations_;
   };

   sprite_t::sprite_t(std::initializer_list<sprite_animation_t> animations)
      : state_(std::make_shared<state>(animations))
   {}

   sprite_t::~sprite_t() {
   }

   std::size_t sprite_t::animation_count() const {
      return state_->animations_.size();
   }

   sprite_animation_t const & sprite_t::animation(std::size_t idx) const {
      return state_->animations_.at(idx);
   }


   //
   // class sprite_cursor_t
   //

   sprite_cursor_t::sprite_cursor_t(sprite_t sprite)
      : sprite_(sprite)
      , time_per_frame_(.1)
      , time_acc_(.0)
      , current_animation_idx_(0)
      , current_frame_idx_(0)
      , current_animation_(&sprite_.animation(current_animation_idx_))
   { }

   void sprite_cursor_t::advance(double time_since_last) {
      time_acc_ += time_since_last;
      while (time_acc_ > time_per_frame_) {
         set_idx(current_frame_idx_ + 1);
         time_acc_ -= time_per_frame_;
      }
   }

   std::size_t sprite_cursor_t::current_animation_idx() const {
      return current_animation_idx_;
   }

   void sprite_cursor_t::set_animation_idx(std::size_t state) {
      if (state == current_animation_idx_) return;
      current_animation_idx_ = state;
      current_frame_idx_ = 0;
      current_animation_ = &sprite_.animation(current_animation_idx_);
   }

   sprite_animation_t const & sprite_cursor_t::current_animation() const {
      return *current_animation_;
   }

   std::size_t sprite_cursor_t::idx() const {
      return current_frame_idx_;
   }

   void sprite_cursor_t::set_idx(std::size_t idx) {
      current_frame_idx_ = idx;
      current_frame_idx_ %= current_animation().frame_count();
   }

   sprite_sheet::frame_ref const & sprite_cursor_t::current_frame() const {
      return current_animation().frame(current_frame_idx_);
   }

   std::size_t sprite_cursor_t::current_frame_count() const {
      return current_animation().frame_count();
   }


   /**
    * free functions
    */

   void init() {
      auto throwing_error_callback = [](int error, const char* description) {
         auto errstr = [=] {
            switch (error) {
            case GLFW_NOT_INITIALIZED: return "GLFW_NOT_INITIALIZED";
            case GLFW_NO_CURRENT_CONTEXT: return "GLFW_NO_CURRENT_CONTEXT";
            case GLFW_INVALID_ENUM: return "GLFW_INVALID_ENUM";
            case GLFW_INVALID_VALUE: return "GLFW_INVALID_VALUE";
            case GLFW_OUT_OF_MEMORY: return "GLFW_OUT_OF_MEMORY";
            case GLFW_API_UNAVAILABLE: return "GLFW_API_UNAVAILABLE";
            case GLFW_VERSION_UNAVAILABLE: return "GLFW_VERSION_UNAVAILABLE";
            case GLFW_PLATFORM_ERROR: return "GLFW_PLATFORM_ERROR";
            case GLFW_FORMAT_UNAVAILABLE: return "GLFW_FORMAT_UNAVAILABLE";
            default: return "unrecognised error";
            }
         }();
         auto message = std::string("could not initialize GLFW - ") + description + " (" + errstr + ")";
         throw glpp::error(message);
      };

      glfwSetErrorCallback(throwing_error_callback);

      if (!glfwInit())
         throw error("could not initialize GLFW");

      initialized_ = true;
   }

   void shutdown() {
      glfwTerminate();

      initialized_ = false;
   }

   double get_time() {
      return glfwGetTime();
   }

   void set_uniform(int location, glm::mat4 const * mats, unsigned count) { GL_VERIFY(gl_::uniform_matrix_4fv(location, count, false, glm::value_ptr(mats[0]))); }
   void set_uniform(int location, glm::mat4 const & mat) { GL_VERIFY(gl_::uniform_matrix_4fv(location, 1, false, glm::value_ptr(mat))); }
   void set_uniform(int location, glm::mat3 const & mat) { GL_VERIFY(gl_::uniform_matrix_3fv(location, 1, false, glm::value_ptr(mat))); }
   void set_uniform(int location, glm::mat2 const & mat) { GL_VERIFY(gl_::uniform_matrix_2fv(location, 1, false, glm::value_ptr(mat))); }
   void set_uniform(int location, glm::vec4 const & vec) { GL_VERIFY(gl_::uniform_4f(location, vec.x, vec.y, vec.z, vec.w)); }
   void set_uniform(int location, glm::vec3 const & vec) { GL_VERIFY(gl_::uniform_3f(location, vec.x, vec.y, vec.z)); }
   void set_uniform(int location, glm::vec2 const & vec) { GL_VERIFY(gl_::uniform_2f(location, vec.x, vec.y)); }
   void set_uniform(int location, glm::ivec4 const & vec) { GL_VERIFY(gl_::uniform_4i(location, vec.x, vec.y, vec.z, vec.w)); }
   void set_uniform(int location, glm::ivec3 const & vec) { GL_VERIFY(gl_::uniform_3i(location, vec.x, vec.y, vec.z)); }
   void set_uniform(int location, glm::ivec2 const & vec) { GL_VERIFY(gl_::uniform_2i(location, vec.x, vec.y)); }
   void set_uniform(int location, float f) { GL_VERIFY(gl_::uniform_1f(location, f)); }
   void set_uniform(int location, int i) { GL_VERIFY(gl_::uniform_1i(location, i)); }
   void set_uniform(int location, std::vector<glm::vec4> const & vec_vec) { GL_VERIFY(gl_::uniform_4fv(location, vec_vec.size(), glm::value_ptr(vec_vec[0]))); }
   void set_uniform(int location, std::vector<glm::mat4> const & mat_vec) { GL_VERIFY(gl_::uniform_matrix_4fv(location, mat_vec.size(), false, glm::value_ptr(mat_vec[0]))); }
   void set_uniform(int location, texture_unit_t tex) { GL_VERIFY(gl_::uniform_1i(location, tex.id)); }

   //void set_uniform(gl::int_t location, GLuint i) { glUniform1ui(location, i); }
}