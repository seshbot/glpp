/**
 * This file was autogenerated by glgen (https://github.com/seshbot/glgen) on 2015-02-19
 * Command line: src/gen.py assets/gl.xml -p assets/gl-patch.xml -o build/lib/ --force --cpp --es2only
 */

#ifndef COMMANDS__H
#define COMMANDS__H


#include "../types.h"
#include "enums.h"

namespace gl {
    void active_texture(texture_unit_t texture);

    void attach_shader(uint_t program, uint_t shader);

    void bind_attrib_location(uint_t program, uint_t index, const char_t * name);

    void bind_buffer(buffer_target_arb_t target, uint_t buffer);

    void bind_framebuffer(framebuffer_target_t target, uint_t framebuffer);

    void bind_renderbuffer(renderbuffer_target_t target, uint_t renderbuffer);

    void bind_texture(texture_target_t target, uint_t texture);

    void blend_color(float_t red, float_t green, float_t blue, float_t alpha);

    void blend_equation(blend_equation_mode_t mode);

    void blend_equation_separate(blend_equation_mode_ext_t modeRGB, blend_equation_mode_ext_t modeAlpha);

    void blend_func(blending_factor_src_t sfactor, blending_factor_dest_t dfactor);

    void blend_func_separate(blend_func_separate_parameter_ext_t sfactorRGB, blend_func_separate_parameter_ext_t dfactorRGB, blend_func_separate_parameter_ext_t sfactorAlpha, blend_func_separate_parameter_ext_t dfactorAlpha);

    void buffer_data(buffer_target_arb_t target, sizeiptr_t size, const void * data, buffer_usage_arb_t usage);

    void buffer_sub_data(buffer_target_arb_t target, intptr_t offset, sizeiptr_t size, const void * data);

    framebuffer_status_t check_framebuffer_status(framebuffer_target_t target);

    void clear(bitmask<clear_buffer_flags_t> mask);

    void clear_color(float_t red, float_t green, float_t blue, float_t alpha);

    void clear_depthf(float_t d);

    void clear_stencil(int_t s);

    void color_mask(boolean_t red, boolean_t green, boolean_t blue, boolean_t alpha);

    void compile_shader(uint_t shader);

    void compressed_tex_image_2d(texture_target_t target, int_t level, enum_t internalformat, sizei_t width, sizei_t height, int_t border, sizei_t imageSize, const void * data);

    void compressed_tex_sub_image_2d(texture_target_t target, int_t level, int_t xoffset, int_t yoffset, sizei_t width, sizei_t height, pixel_format_t format, sizei_t imageSize, const void * data);

    void copy_tex_image_2d(texture_target_t target, int_t level, enum_t internalformat, int_t x, int_t y, sizei_t width, sizei_t height, int_t border);

    void copy_tex_sub_image_2d(texture_target_t target, int_t level, int_t xoffset, int_t yoffset, int_t x, int_t y, sizei_t width, sizei_t height);

    uint_t create_program();

    uint_t create_shader(shader_type_t type);

    void cull_face(cull_face_mode_t mode);

    void delete_buffers(sizei_t n, const uint_t * buffers);

    void delete_framebuffers(sizei_t n, const uint_t * framebuffers);

    void delete_program(uint_t program);

    void delete_renderbuffers(sizei_t n, const uint_t * renderbuffers);

    void delete_shader(uint_t shader);

    void delete_textures(sizei_t n, const uint_t * textures);

    void depth_func(depth_function_t func);

    void depth_mask(boolean_t flag);

    void depth_rangef(float_t n, float_t f);

    void detach_shader(uint_t program, uint_t shader);

    void disable(enable_cap_t cap);

    void disable_vertex_attrib_array(uint_t index);

    void draw_arrays(primitive_type_t mode, int_t first, sizei_t count);

    void draw_elements(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices);

    void enable(enable_cap_t cap);

    void enable_vertex_attrib_array(uint_t index);

    void finish();

    void flush();

    void framebuffer_renderbuffer(framebuffer_target_t target, framebuffer_attachment_t attachment, renderbuffer_target_t renderbuffertarget, uint_t renderbuffer);

    void framebuffer_texture_2d(framebuffer_target_t target, framebuffer_attachment_t attachment, enum_t textarget, uint_t texture, int_t level);

    void front_face(front_face_direction_t mode);

    void gen_buffers(sizei_t n, uint_t * buffers);

    void gen_framebuffers(sizei_t n, uint_t * framebuffers);

    void gen_renderbuffers(sizei_t n, uint_t * renderbuffers);

    void gen_textures(sizei_t n, uint_t * textures);

    void generate_mipmap(mipmap_target_t target);

    void get_active_attrib(uint_t program, uint_t index, sizei_t bufSize, sizei_t * length, int_t * size, enum_t * type, char_t * name);

    void get_active_uniform(uint_t program, uint_t index, sizei_t bufSize, sizei_t * length, int_t * size, enum_t * type, char_t * name);

    void get_attached_shaders(uint_t program, sizei_t maxCount, sizei_t * count, uint_t * shaders);

    int_t get_attrib_location(uint_t program, const char_t * name);

    void get_booleanv(get_p_name_t pname, boolean_t * data);

    void get_buffer_parameteriv(buffer_target_arb_t target, buffer_p_name_arb_t pname, int_t * params);

    error_code_t get_error();

    void get_floatv(get_p_name_t pname, float_t * data);

    void get_framebuffer_attachment_parameteriv(framebuffer_target_t target, framebuffer_attachment_t attachment, get_pointerv_p_name_t pname, int_t * params);

    void get_integerv(get_p_name_t pname, int_t * data);

    void get_program_info_log(uint_t program, sizei_t bufSize, sizei_t * length, char_t * infoLog);

    void get_programiv(uint_t program, get_pointerv_p_name_t pname, int_t * params);

    void get_renderbuffer_parameteriv(renderbuffer_target_t target, get_pointerv_p_name_t pname, int_t * params);

    void get_shader_info_log(uint_t shader, sizei_t bufSize, sizei_t * length, char_t * infoLog);

    void get_shader_precision_format(shader_type_t shadertype, precision_type_t precisiontype, int_t * range, int_t * precision);

    void get_shader_source(uint_t shader, sizei_t bufSize, sizei_t * length, char_t * source);

    void get_shaderiv(uint_t shader, get_pointerv_p_name_t pname, int_t * params);

    const ubyte_t * get_string(string_name_t name);

    void get_tex_parameterfv(texture_target_t target, get_texture_parameter_t pname, float_t * params);

    void get_tex_parameteriv(texture_target_t target, get_texture_parameter_t pname, int_t * params);

    int_t get_uniform_location(uint_t program, const char_t * name);

    void get_uniformfv(uint_t program, int_t location, float_t * params);

    void get_uniformiv(uint_t program, int_t location, int_t * params);

    void get_vertex_attrib_pointerv(uint_t index, vertex_attrib_pointer_property_arb_t pname, void ** pointer);

    void get_vertex_attribfv(uint_t index, vertex_attrib_property_arb_t pname, float_t * params);

    void get_vertex_attribiv(uint_t index, vertex_attrib_property_arb_t pname, int_t * params);

    void hint(hint_target_t target, hint_mode_t mode);

    boolean_t is_buffer(uint_t buffer);

    boolean_t is_enabled(enable_cap_t cap);

    boolean_t is_framebuffer(uint_t framebuffer);

    boolean_t is_program(uint_t program);

    boolean_t is_renderbuffer(uint_t renderbuffer);

    boolean_t is_shader(uint_t shader);

    boolean_t is_texture(uint_t texture);

    void line_width(float_t width);

    void link_program(uint_t program);

    void pixel_storei(pixel_store_parameter_t pname, int_t param);

    void polygon_offset(float_t factor, float_t units);

    void read_pixels(int_t x, int_t y, sizei_t width, sizei_t height, pixel_format_t format, pixel_type_t type, void * pixels);

    void release_shader_compiler();

    void renderbuffer_storage(renderbuffer_target_t target, internal_format_t internalformat, sizei_t width, sizei_t height);

    void sample_coverage(float_t value, boolean_t invert);

    void scissor(int_t x, int_t y, sizei_t width, sizei_t height);

    void shader_binary(sizei_t count, const uint_t * shaders, enum_t binaryformat, const void * binary, sizei_t length);

    void shader_source(uint_t shader, sizei_t count, const char_t *const* string, const int_t * length);

    void stencil_func(stencil_function_t func, int_t ref, uint_t mask);

    void stencil_func_separate(stencil_face_direction_t face, stencil_function_t func, int_t ref, uint_t mask);

    void stencil_mask(uint_t mask);

    void stencil_mask_separate(stencil_face_direction_t face, uint_t mask);

    void stencil_op(stencil_op_t fail, stencil_op_t zfail, stencil_op_t zpass);

    void stencil_op_separate(stencil_face_direction_t face, stencil_op_t sfail, stencil_op_t dpfail, stencil_op_t dppass);

    void tex_image_2d(texture_target_t target, int_t level, texture_component_count_t internalformat, sizei_t width, sizei_t height, int_t border, pixel_format_t format, pixel_type_t type, const void * pixels);

    void tex_parameterf(texture_target_t target, texture_parameter_name_t pname, float_t param);

    void tex_parameterfv(texture_target_t target, texture_parameter_name_t pname, const float_t * params);

    void tex_parameteri(texture_target_t target, texture_parameter_name_t pname, int_t param);

    void tex_parameteriv(texture_target_t target, texture_parameter_name_t pname, const int_t * params);

    void tex_sub_image_2d(texture_target_t target, int_t level, int_t xoffset, int_t yoffset, sizei_t width, sizei_t height, pixel_format_t format, pixel_type_t type, const void * pixels);

    void uniform_1f(int_t location, float_t v0);

    void uniform_1fv(int_t location, sizei_t count, const float_t * value);

    void uniform_1i(int_t location, int_t v0);

    void uniform_1iv(int_t location, sizei_t count, const int_t * value);

    void uniform_2f(int_t location, float_t v0, float_t v1);

    void uniform_2fv(int_t location, sizei_t count, const float_t * value);

    void uniform_2i(int_t location, int_t v0, int_t v1);

    void uniform_2iv(int_t location, sizei_t count, const int_t * value);

    void uniform_3f(int_t location, float_t v0, float_t v1, float_t v2);

    void uniform_3fv(int_t location, sizei_t count, const float_t * value);

    void uniform_3i(int_t location, int_t v0, int_t v1, int_t v2);

    void uniform_3iv(int_t location, sizei_t count, const int_t * value);

    void uniform_4f(int_t location, float_t v0, float_t v1, float_t v2, float_t v3);

    void uniform_4fv(int_t location, sizei_t count, const float_t * value);

    void uniform_4i(int_t location, int_t v0, int_t v1, int_t v2, int_t v3);

    void uniform_4iv(int_t location, sizei_t count, const int_t * value);

    void uniform_matrix_2fv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

    void uniform_matrix_3fv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

    void uniform_matrix_4fv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

    void use_program(uint_t program);

    void validate_program(uint_t program);

    void vertex_attrib_1f(uint_t index, float_t x);

    void vertex_attrib_1fv(uint_t index, const float_t * v);

    void vertex_attrib_2f(uint_t index, float_t x, float_t y);

    void vertex_attrib_2fv(uint_t index, const float_t * v);

    void vertex_attrib_3f(uint_t index, float_t x, float_t y, float_t z);

    void vertex_attrib_3fv(uint_t index, const float_t * v);

    void vertex_attrib_4f(uint_t index, float_t x, float_t y, float_t z, float_t w);

    void vertex_attrib_4fv(uint_t index, const float_t * v);

    void vertex_attrib_pointer(uint_t index, int_t size, vertex_attrib_pointer_type_t type, boolean_t normalized, sizei_t stride, const void * pointer);

    void viewport(int_t x, int_t y, sizei_t width, sizei_t height);

} // namespace gl

#endif // #ifndef COMMANDS__H
