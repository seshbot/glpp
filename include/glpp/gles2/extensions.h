/**
 * This file was autogenerated by glgen (https://github.com/seshbot/glgen) on 2015-02-19
 * Command line: src/gen.py assets/gl.xml -p assets/gl-patch.xml -o build/lib/ --force --cpp --es2only
 */

#ifndef EXTENSIONS__H
#define EXTENSIONS__H


#include "../types.h"
#include "enums.h"
#include "extensions_enums.h"

namespace gl {
   /**
    * Required by extensions:
    *  - GL_EXT_copy_image (gles2)
    */
    void copy_image_sub_data_ext(uint_t srcName, enum_t srcTarget, int_t srcLevel, int_t srcX, int_t srcY, int_t srcZ, uint_t dstName, enum_t dstTarget, int_t dstLevel, int_t dstX, int_t dstY, int_t dstZ, sizei_t srcWidth, sizei_t srcHeight, sizei_t srcDepth);

   /**
    * Required by extensions:
    *  - GL_NV_non_square_matrices (gles2)
    */
    void uniform_matrix_2x_3fv_nv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_non_square_matrices (gles2)
    */
    void uniform_matrix_2x_4fv_nv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_non_square_matrices (gles2)
    */
    void uniform_matrix_3x_2fv_nv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_non_square_matrices (gles2)
    */
    void uniform_matrix_3x_4fv_nv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_non_square_matrices (gles2)
    */
    void uniform_matrix_4x_2fv_nv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_non_square_matrices (gles2)
    */
    void uniform_matrix_4x_3fv_nv(int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_arrays (gles2,gles1,gl)
    */
    void multi_draw_arrays_ext(primitive_type_t mode, const int_t * first, const sizei_t * count, sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_arrays (gles2,gles1,gl)
    */
    void multi_draw_elements_ext(primitive_type_t mode, const sizei_t * count, draw_elements_type_t type, const void * * indices, sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers_indexed (gles2)
    */
    void blend_equation_separatei_ext(uint_t buf, blend_equation_mode_ext_t modeRGB, blend_equation_mode_ext_t modeAlpha);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers_indexed (gles2)
    */
    void blend_equationi_ext(uint_t buf, blend_equation_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers_indexed (gles2)
    */
    void blend_func_separatei_ext(uint_t buf, enum_t srcRGB, enum_t dstRGB, enum_t srcAlpha, enum_t dstAlpha);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers_indexed (gles2)
    */
    void blend_funci_ext(uint_t buf, enum_t src, enum_t dst);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers_indexed (gles2)
    */
    void color_maski_ext(uint_t index, boolean_t r, boolean_t g, boolean_t b, boolean_t a);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers_indexed (gles2)
    */
    void disablei_ext(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers_indexed (gles2)
    */
    void enablei_ext(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers_indexed (gles2)
    */
    boolean_t is_enabledi_ext(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_NV_instanced_arrays (gles2)
    */
    void vertex_attrib_divisor_nv(uint_t index, uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_QCOM_tiled_rendering (gles2,gles1)
    */
    void end_tiling_qcom(bitfield_t preserveMask);

   /**
    * Required by extensions:
    *  - GL_QCOM_tiled_rendering (gles2,gles1)
    */
    void start_tiling_qcom(uint_t x, uint_t y, uint_t width, uint_t height, bitfield_t preserveMask);

   /**
    * Required by extensions:
    *  - GL_OES_sample_shading (gles2)
    */
    void min_sample_shading_oes(float_t value);

   /**
    * Required by extensions:
    *  - GL_NV_blend_equation_advanced (gles2,gl)
    */
    void blend_barrier_nv();

   /**
    * Required by extensions:
    *  - GL_NV_blend_equation_advanced (gles2,gl)
    */
    void blend_parameteri_nv(get_pointerv_p_name_t pname, int_t value);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles2,gles1,gl)
    */
    void delete_fences_nv(sizei_t n, const uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles2,gles1,gl)
    */
    void finish_fence_nv(uint_t fence);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles2,gles1,gl)
    */
    void gen_fences_nv(sizei_t n, uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles2,gles1,gl)
    */
    void get_fenceiv_nv(uint_t fence, enum_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles2,gles1,gl)
    */
    boolean_t is_fence_nv(uint_t fence);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles2,gles1,gl)
    */
    void set_fence_nv(uint_t fence, enum_t condition);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles2,gles1,gl)
    */
    boolean_t test_fence_nv(uint_t fence);

   /**
    * Required by extensions:
    *  - GL_EXT_map_buffer_range (gles2,gles1)
    */
    void flush_mapped_buffer_range_ext(framebuffer_target_t target, intptr_t offset, sizeiptr_t length);

   /**
    * Required by extensions:
    *  - GL_EXT_map_buffer_range (gles2,gles1)
    */
    void * map_buffer_range_ext(framebuffer_target_t target, intptr_t offset, sizeiptr_t length, bitfield_t access);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers (gles2)
    */
    void draw_buffers_ext(sizei_t n, const enum_t * bufs);

   /**
    * Required by extensions:
    *  - GL_OES_mapbuffer (gles2,gles1)
    */
    void get_buffer_pointerv_oes(framebuffer_target_t target, get_pointerv_p_name_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_OES_mapbuffer (gles2,gles1)
    */
    void * map_buffer_oes(framebuffer_target_t target, enum_t access);

   /**
    * Required by extensions:
    *  - GL_OES_mapbuffer (gles2,gles1)
    */
    boolean_t unmap_buffer_oes(framebuffer_target_t target);

   /**
    * Required by extensions:
    *  - GL_ANGLE_translated_shader_source (gles2)
    */
    void get_translated_shader_source_angle(uint_t shader, sizei_t bufsize, sizei_t * length, char_t * source);

   /**
    * Required by extensions:
    *  - GL_OES_copy_image (gles2)
    */
    void copy_image_sub_data_oes(uint_t srcName, enum_t srcTarget, int_t srcLevel, int_t srcX, int_t srcY, int_t srcZ, uint_t dstName, enum_t dstTarget, int_t dstLevel, int_t dstX, int_t dstY, int_t dstZ, sizei_t srcWidth, sizei_t srcHeight, sizei_t srcDepth);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_elements_base_vertex (gles2)
    */
    void draw_elements_base_vertex_ext(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_elements_base_vertex (gles2)
    */
    void draw_elements_instanced_base_vertex_ext(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, sizei_t instancecount, int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_elements_base_vertex (gles2)
    */
    void draw_range_elements_base_vertex_ext(primitive_type_t mode, uint_t start, uint_t end, sizei_t count, draw_elements_type_t type, const void * indices, int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_elements_base_vertex (gles2)
    */
    void multi_draw_elements_base_vertex_ext(blend_equation_mode_t mode, const sizei_t * count, draw_elements_type_t type, const void *const* indices, sizei_t primcount, const int_t * basevertex);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get2 (gles2,gles1)
    */
    void ext_get_program_binary_source_qcom(uint_t program, enum_t shadertype, char_t * source, int_t * length);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get2 (gles2,gles1)
    */
    void ext_get_programs_qcom(uint_t * programs, int_t maxPrograms, int_t * numPrograms);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get2 (gles2,gles1)
    */
    void ext_get_shaders_qcom(uint_t * shaders, int_t maxShaders, int_t * numShaders);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get2 (gles2,gles1)
    */
    boolean_t ext_is_program_binary_qcom(uint_t program);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gles2,gl)
    */
    void insert_event_marker_ext(sizei_t length, const char_t * marker);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gles2,gl)
    */
    void pop_group_marker_ext();

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gles2,gl)
    */
    void push_group_marker_ext(sizei_t length, const char_t * marker);

   /**
    * Required by extensions:
    *  - GL_EXT_base_instance (gles2)
    */
    void draw_arrays_instanced_base_instance_ext(primitive_type_t mode, int_t first, sizei_t count, sizei_t instancecount, uint_t baseinstance);

   /**
    * Required by extensions:
    *  - GL_EXT_base_instance (gles2)
    */
    void draw_elements_instanced_base_instance_ext(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, sizei_t instancecount, uint_t baseinstance);

   /**
    * Required by extensions:
    *  - GL_EXT_base_instance (gles2)
    */
    void draw_elements_instanced_base_vertex_base_instance_ext(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, sizei_t instancecount, int_t basevertex, uint_t baseinstance);

   /**
    * Required by extensions:
    *  - GL_OES_geometry_shader (gles2)
    */
    void framebuffer_texture_oes(framebuffer_target_t target, framebuffer_attachment_t attachment, uint_t texture, int_t level);

   /**
    * Required by extensions:
    *  - GL_OES_tessellation_shader (gles2)
    */
    void patch_parameteri_oes(get_pointerv_p_name_t pname, int_t value);

   /**
    * Required by extensions:
    *  - GL_OES_texture_view (gles2)
    */
    void texture_view_oes(uint_t texture, framebuffer_target_t target, uint_t origtexture, internal_format_t internalformat, uint_t minlevel, uint_t numlevels, uint_t minlayer, uint_t numlayers);

   /**
    * Required by extensions:
    *  - GL_EXT_multisampled_render_to_texture (gles2,gles1)
    */
    void framebuffer_texture_2d_multisample_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, enum_t textarget, uint_t texture, int_t level, sizei_t samples);

   /**
    * Required by extensions:
    *  - GL_EXT_multisampled_render_to_texture (gles2,gles1)
    */
    void renderbuffer_storage_multisample_ext(framebuffer_target_t target, sizei_t samples, internal_format_t internalformat, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_IMG_multisampled_render_to_texture (gles2,gles1)
    */
    void framebuffer_texture_2d_multisample_img(framebuffer_target_t target, framebuffer_attachment_t attachment, enum_t textarget, uint_t texture, int_t level, sizei_t samples);

   /**
    * Required by extensions:
    *  - GL_IMG_multisampled_render_to_texture (gles2,gles1)
    */
    void renderbuffer_storage_multisample_img(framebuffer_target_t target, sizei_t samples, internal_format_t internalformat, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_primitive_bounding_box (gles2)
    */
    void primitive_bounding_box_ext(float_t minX, float_t minY, float_t minZ, float_t minW, float_t maxX, float_t maxY, float_t maxZ, float_t maxW);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void begin_perf_monitor_amd(uint_t monitor);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void delete_perf_monitors_amd(sizei_t n, uint_t * monitors);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void end_perf_monitor_amd(uint_t monitor);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void gen_perf_monitors_amd(sizei_t n, uint_t * monitors);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_counter_data_amd(uint_t monitor, get_pointerv_p_name_t pname, sizei_t dataSize, uint_t * data, int_t * bytesWritten);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_counter_info_amd(uint_t group, uint_t counter, get_pointerv_p_name_t pname, void * data);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_counter_string_amd(uint_t group, uint_t counter, sizei_t bufSize, sizei_t * length, char_t * counterString);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_counters_amd(uint_t group, int_t * numCounters, int_t * maxActiveCounters, sizei_t counterSize, uint_t * counters);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_group_string_amd(uint_t group, sizei_t bufSize, sizei_t * length, char_t * groupString);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_groups_amd(int_t * numGroups, sizei_t groupsSize, uint_t * groups);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void select_perf_monitor_counters_amd(uint_t monitor, boolean_t enable, uint_t group, int_t numCounters, uint_t * counterList);

   /**
    * Required by extensions:
    *  - GL_OES_texture_buffer (gles2)
    */
    void tex_buffer_oes(texture_target_t target, internal_format_t internalformat, uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_OES_texture_buffer (gles2)
    */
    void tex_buffer_range_oes(framebuffer_target_t target, internal_format_t internalformat, uint_t buffer, intptr_t offset, sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void depth_range_arrayfv_nv(uint_t first, sizei_t count, const float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void depth_range_indexedf_nv(uint_t index, float_t n, float_t f);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void disablei_nv(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void enablei_nv(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void get_floati_v_nv(enum_t target, uint_t index, float_t * data);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    boolean_t is_enabledi_nv(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void scissor_arrayv_nv(uint_t first, sizei_t count, const int_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void scissor_indexed_nv(uint_t index, int_t left, int_t bottom, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void scissor_indexedv_nv(uint_t index, const int_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void viewport_arrayv_nv(uint_t first, sizei_t count, const float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void viewport_indexedf_nv(uint_t index, float_t x, float_t y, float_t w, float_t h);

   /**
    * Required by extensions:
    *  - GL_NV_viewport_array (gles2)
    */
    void viewport_indexedfv_nv(uint_t index, const float_t * v);

   /**
    * Required by extensions:
    *  - GL_OES_get_program_binary (gles2)
    */
    void get_program_binary_oes(uint_t program, sizei_t bufSize, sizei_t * length, enum_t * binaryFormat, void * binary);

   /**
    * Required by extensions:
    *  - GL_OES_get_program_binary (gles2)
    */
    void program_binary_oes(uint_t program, enum_t binaryFormat, const void * binary, int_t length);

   /**
    * Required by extensions:
    *  - GL_OES_draw_elements_base_vertex (gles2)
    */
    void draw_elements_base_vertex_oes(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_OES_draw_elements_base_vertex (gles2)
    */
    void draw_elements_instanced_base_vertex_oes(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, sizei_t instancecount, int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_OES_draw_elements_base_vertex (gles2)
    */
    void draw_range_elements_base_vertex_oes(primitive_type_t mode, uint_t start, uint_t end, sizei_t count, draw_elements_type_t type, const void * indices, int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_OES_draw_elements_base_vertex (gles2)
    */
    void multi_draw_elements_base_vertex_oes(blend_equation_mode_t mode, const sizei_t * count, draw_elements_type_t type, const void *const* indices, sizei_t primcount, const int_t * basevertex);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void active_shader_program_ext(uint_t pipeline, uint_t program);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void bind_program_pipeline_ext(uint_t pipeline);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    uint_t create_shader_programv_ext(draw_elements_type_t type, sizei_t count, const char_t ** strings);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void delete_program_pipelines_ext(sizei_t n, const uint_t * pipelines);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void gen_program_pipelines_ext(sizei_t n, uint_t * pipelines);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void get_program_pipeline_info_log_ext(uint_t pipeline, sizei_t bufSize, sizei_t * length, char_t * infoLog);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void get_program_pipelineiv_ext(uint_t pipeline, get_pointerv_p_name_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    boolean_t is_program_pipeline_ext(uint_t pipeline);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_parameteri_ext(uint_t program, enum_t pname, int_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_1f_ext(uint_t program, int_t location, float_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_1fv_ext(uint_t program, int_t location, sizei_t count, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_1i_ext(uint_t program, int_t location, int_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_1iv_ext(uint_t program, int_t location, sizei_t count, const int_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_1ui_ext(uint_t program, int_t location, uint_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_1uiv_ext(uint_t program, int_t location, sizei_t count, const uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_2f_ext(uint_t program, int_t location, float_t v0, float_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_2fv_ext(uint_t program, int_t location, sizei_t count, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_2i_ext(uint_t program, int_t location, int_t v0, int_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_2iv_ext(uint_t program, int_t location, sizei_t count, const int_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_2ui_ext(uint_t program, int_t location, uint_t v0, uint_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_2uiv_ext(uint_t program, int_t location, sizei_t count, const uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_3f_ext(uint_t program, int_t location, float_t v0, float_t v1, float_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_3fv_ext(uint_t program, int_t location, sizei_t count, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_3i_ext(uint_t program, int_t location, int_t v0, int_t v1, int_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_3iv_ext(uint_t program, int_t location, sizei_t count, const int_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_3ui_ext(uint_t program, int_t location, uint_t v0, uint_t v1, uint_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_3uiv_ext(uint_t program, int_t location, sizei_t count, const uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_4f_ext(uint_t program, int_t location, float_t v0, float_t v1, float_t v2, float_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_4fv_ext(uint_t program, int_t location, sizei_t count, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_4i_ext(uint_t program, int_t location, int_t v0, int_t v1, int_t v2, int_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_4iv_ext(uint_t program, int_t location, sizei_t count, const int_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_4ui_ext(uint_t program, int_t location, uint_t v0, uint_t v1, uint_t v2, uint_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_4uiv_ext(uint_t program, int_t location, sizei_t count, const uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_2fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_2x_3fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_2x_4fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_3fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_3x_2fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_3x_4fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_4fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_4x_2fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void program_uniform_matrix_4x_3fv_ext(uint_t program, int_t location, sizei_t count, boolean_t transpose, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void use_program_stages_ext(uint_t pipeline, bitmask<use_program_stage_flags_t> stages, uint_t program);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void validate_program_pipeline_ext(uint_t pipeline);

   /**
    * Required by extensions:
    *  - GL_EXT_occlusion_query_boolean (gles2)
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void begin_query_ext(framebuffer_target_t target, uint_t id);

   /**
    * Required by extensions:
    *  - GL_EXT_occlusion_query_boolean (gles2)
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void delete_queries_ext(sizei_t n, const uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_EXT_occlusion_query_boolean (gles2)
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void end_query_ext(framebuffer_target_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_occlusion_query_boolean (gles2)
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void gen_queries_ext(sizei_t n, uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_EXT_occlusion_query_boolean (gles2)
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void get_query_objectuiv_ext(uint_t id, get_pointerv_p_name_t pname, uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_occlusion_query_boolean (gles2)
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void get_queryiv_ext(framebuffer_target_t target, get_pointerv_p_name_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_occlusion_query_boolean (gles2)
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    boolean_t is_query_ext(uint_t id);

   /**
    * Required by extensions:
    *  - GL_APPLE_framebuffer_multisample (gles2,gles1)
    */
    void renderbuffer_storage_multisample_apple(framebuffer_target_t target, sizei_t samples, internal_format_t internalformat, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_APPLE_framebuffer_multisample (gles2,gles1)
    */
    void resolve_multisample_framebuffer_apple();

   /**
    * Required by extensions:
    *  - GL_NV_framebuffer_multisample (gles2)
    */
    void renderbuffer_storage_multisample_nv(framebuffer_target_t target, sizei_t samples, internal_format_t internalformat, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_APPLE_copy_texture_levels (gles2,gles1)
    */
    void copy_texture_levels_apple(uint_t destinationTexture, uint_t sourceTexture, int_t sourceBaseLevel, sizei_t sourceLevelCount);

   /**
    * Required by extensions:
    *  - GL_NV_draw_buffers (gles2)
    */
    void draw_buffers_nv(sizei_t n, const enum_t * bufs);

   /**
    * Required by extensions:
    *  - GL_EXT_multiview_draw_buffers (gles2)
    */
    void draw_buffers_indexed_ext(int_t n, const enum_t * location, const int_t * indices);

   /**
    * Required by extensions:
    *  - GL_EXT_multiview_draw_buffers (gles2)
    */
    void get_integeri_v_ext(framebuffer_target_t target, uint_t index, int_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_multiview_draw_buffers (gles2)
    */
    void read_buffer_indexed_ext(enum_t src, int_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_indirect (gles2)
    */
    void multi_draw_arrays_indirect_ext(blend_equation_mode_t mode, const void * indirect, sizei_t drawcount, sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_indirect (gles2)
    */
    void multi_draw_elements_indirect_ext(blend_equation_mode_t mode, draw_elements_type_t type, const void * indirect, sizei_t drawcount, sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_OES_EGL_image (gles2,gles1)
    */
    void egl_image_target_renderbuffer_storage_oes(framebuffer_target_t target, eglImageOES_t image);

   /**
    * Required by extensions:
    *  - GL_OES_EGL_image (gles2,gles1)
    */
    void egl_image_target_texture_2does(framebuffer_target_t target, eglImageOES_t image);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get (gles2,gles1)
    */
    void ext_get_buffer_pointerv_qcom(framebuffer_target_t target, void ** params);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get (gles2,gles1)
    */
    void ext_get_buffers_qcom(uint_t * buffers, int_t maxBuffers, int_t * numBuffers);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get (gles2,gles1)
    */
    void ext_get_framebuffers_qcom(uint_t * framebuffers, int_t maxFramebuffers, int_t * numFramebuffers);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get (gles2,gles1)
    */
    void ext_get_renderbuffers_qcom(uint_t * renderbuffers, int_t maxRenderbuffers, int_t * numRenderbuffers);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get (gles2,gles1)
    */
    void ext_get_tex_level_parameteriv_qcom(uint_t texture, enum_t face, int_t level, get_pointerv_p_name_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get (gles2,gles1)
    */
    void ext_get_tex_sub_image_qcom(framebuffer_target_t target, int_t level, int_t xoffset, int_t yoffset, int_t zoffset, sizei_t width, sizei_t height, sizei_t depth, pixel_format_t format, draw_elements_type_t type, void * texels);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get (gles2,gles1)
    */
    void ext_get_textures_qcom(uint_t * textures, int_t maxTextures, int_t * numTextures);

   /**
    * Required by extensions:
    *  - GL_QCOM_extended_get (gles2,gles1)
    */
    void ext_tex_object_state_overridei_qcom(framebuffer_target_t target, get_pointerv_p_name_t pname, int_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_geometry_shader (gles2)
    */
    void framebuffer_texture_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, uint_t texture, int_t level);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void copy_path_nv(uint_t resultPath, uint_t srcPath);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void cover_fill_path_instanced_nv(sizei_t numPaths, enum_t pathNameType, const void * paths, uint_t pathBase, enum_t coverMode, enum_t transformType, const float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void cover_fill_path_nv(uint_t path, enum_t coverMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void cover_stroke_path_instanced_nv(sizei_t numPaths, enum_t pathNameType, const void * paths, uint_t pathBase, enum_t coverMode, enum_t transformType, const float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void cover_stroke_path_nv(uint_t path, enum_t coverMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void delete_paths_nv(uint_t path, sizei_t range);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    uint_t gen_paths_nv(sizei_t range);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_commands_nv(uint_t path, ubyte_t * commands);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_coords_nv(uint_t path, float_t * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_dash_array_nv(uint_t path, float_t * dashArray);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    float_t get_path_length_nv(uint_t path, sizei_t startSegment, sizei_t numSegments);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_metric_range_nv(bitfield_t metricQueryMask, uint_t firstPathName, sizei_t numPaths, sizei_t stride, float_t * metrics);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_metrics_nv(bitfield_t metricQueryMask, sizei_t numPaths, enum_t pathNameType, const void * paths, uint_t pathBase, sizei_t stride, float_t * metrics);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_parameterfv_nv(uint_t path, enum_t pname, float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_parameteriv_nv(uint_t path, enum_t pname, int_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_spacing_nv(enum_t pathListMode, sizei_t numPaths, enum_t pathNameType, const void * paths, uint_t pathBase, float_t advanceScale, float_t kerningScale, enum_t transformType, float_t * returnedSpacing);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_program_resourcefv_nv(uint_t program, enum_t programInterface, uint_t index, sizei_t propCount, const enum_t * props, sizei_t bufSize, sizei_t * length, float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void interpolate_paths_nv(uint_t resultPath, uint_t pathA, uint_t pathB, float_t weight);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    boolean_t is_path_nv(uint_t path);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    boolean_t is_point_in_fill_path_nv(uint_t path, uint_t mask, float_t x, float_t y);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    boolean_t is_point_in_stroke_path_nv(uint_t path, float_t x, float_t y);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_load_3x_2f_nv(enum_t matrixMode, const float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_load_3x_3f_nv(enum_t matrixMode, const float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_load_transpose_3x_3f_nv(enum_t matrixMode, const float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_mult_3x_2f_nv(enum_t matrixMode, const float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_mult_3x_3f_nv(enum_t matrixMode, const float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_mult_transpose_3x_3f_nv(enum_t matrixMode, const float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_commands_nv(uint_t path, sizei_t numCommands, const ubyte_t * commands, sizei_t numCoords, enum_t coordType, const void * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_coords_nv(uint_t path, sizei_t numCoords, enum_t coordType, const void * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_cover_depth_func_nv(depth_function_t func);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_dash_array_nv(uint_t path, sizei_t dashCount, const float_t * dashArray);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    enum_t path_glyph_index_array_nv(uint_t firstPathName, enum_t fontTarget, const void * fontName, bitfield_t fontStyle, uint_t firstGlyphIndex, sizei_t numGlyphs, uint_t pathParameterTemplate, float_t emScale);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    enum_t path_glyph_index_range_nv(enum_t fontTarget, const void * fontName, bitfield_t fontStyle, uint_t pathParameterTemplate, float_t emScale, uint_t * baseAndCount);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_glyph_range_nv(uint_t firstPathName, enum_t fontTarget, const void * fontName, bitfield_t fontStyle, uint_t firstGlyph, sizei_t numGlyphs, enum_t handleMissingGlyphs, uint_t pathParameterTemplate, float_t emScale);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_glyphs_nv(uint_t firstPathName, enum_t fontTarget, const void * fontName, bitfield_t fontStyle, sizei_t numGlyphs, enum_t type, const void * charcodes, enum_t handleMissingGlyphs, uint_t pathParameterTemplate, float_t emScale);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    enum_t path_memory_glyph_index_array_nv(uint_t firstPathName, enum_t fontTarget, sizeiptr_t fontSize, const void * fontData, sizei_t faceIndex, uint_t firstGlyphIndex, sizei_t numGlyphs, uint_t pathParameterTemplate, float_t emScale);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_parameterf_nv(uint_t path, enum_t pname, float_t value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_parameterfv_nv(uint_t path, enum_t pname, const float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_parameteri_nv(uint_t path, enum_t pname, int_t value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_parameteriv_nv(uint_t path, enum_t pname, const int_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_stencil_depth_offset_nv(float_t factor, float_t units);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_stencil_func_nv(stencil_function_t func, int_t ref, uint_t mask);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_string_nv(uint_t path, enum_t format, sizei_t length, const void * pathString);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_sub_commands_nv(uint_t path, sizei_t commandStart, sizei_t commandsToDelete, sizei_t numCommands, const ubyte_t * commands, sizei_t numCoords, enum_t coordType, const void * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_sub_coords_nv(uint_t path, sizei_t coordStart, sizei_t numCoords, enum_t coordType, const void * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    boolean_t point_along_path_nv(uint_t path, sizei_t startSegment, sizei_t numSegments, float_t distance, float_t * x, float_t * y, float_t * tangentX, float_t * tangentY);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void program_path_fragment_input_gen_nv(uint_t program, int_t location, enum_t genMode, int_t components, const float_t * coeffs);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_fill_path_instanced_nv(sizei_t numPaths, enum_t pathNameType, const void * paths, uint_t pathBase, enum_t fillMode, uint_t mask, enum_t transformType, const float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_fill_path_nv(uint_t path, enum_t fillMode, uint_t mask);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_stroke_path_instanced_nv(sizei_t numPaths, enum_t pathNameType, const void * paths, uint_t pathBase, int_t reference, uint_t mask, enum_t transformType, const float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_stroke_path_nv(uint_t path, int_t reference, uint_t mask);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_then_cover_fill_path_instanced_nv(sizei_t numPaths, enum_t pathNameType, const void * paths, uint_t pathBase, enum_t fillMode, uint_t mask, enum_t coverMode, enum_t transformType, const float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_then_cover_fill_path_nv(uint_t path, enum_t fillMode, uint_t mask, enum_t coverMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_then_cover_stroke_path_instanced_nv(sizei_t numPaths, enum_t pathNameType, const void * paths, uint_t pathBase, int_t reference, uint_t mask, enum_t coverMode, enum_t transformType, const float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_then_cover_stroke_path_nv(uint_t path, int_t reference, uint_t mask, enum_t coverMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void transform_path_nv(uint_t resultPath, uint_t srcPath, enum_t transformType, const float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void weight_paths_nv(uint_t resultPath, sizei_t numPaths, const uint_t * paths, const float_t * weights);

   /**
    * Required by extensions:
    *  - GL_ANGLE_framebuffer_multisample (gles2)
    */
    void renderbuffer_storage_multisample_angle(framebuffer_target_t target, sizei_t samples, internal_format_t internalformat, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_OES_texture_storage_multisample_2d_array (gles2)
    */
    void tex_storage_3d_multisample_oes(framebuffer_target_t target, sizei_t samples, internal_format_t internalformat, sizei_t width, sizei_t height, sizei_t depth, boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_NV_framebuffer_blit (gles2)
    */
    void blit_framebuffer_nv(int_t srcX0, int_t srcY0, int_t srcX1, int_t srcY1, int_t dstX0, int_t dstY0, int_t dstX1, int_t dstY1, bitmask<clear_buffer_flags_t> mask, enum_t filter);

   /**
    * Required by extensions:
    *  - GL_OES_draw_buffers_indexed (gles2)
    */
    void blend_equation_separatei_oes(uint_t buf, blend_equation_mode_ext_t modeRGB, blend_equation_mode_ext_t modeAlpha);

   /**
    * Required by extensions:
    *  - GL_OES_draw_buffers_indexed (gles2)
    */
    void blend_equationi_oes(uint_t buf, blend_equation_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_OES_draw_buffers_indexed (gles2)
    */
    void blend_func_separatei_oes(uint_t buf, enum_t srcRGB, enum_t dstRGB, enum_t srcAlpha, enum_t dstAlpha);

   /**
    * Required by extensions:
    *  - GL_OES_draw_buffers_indexed (gles2)
    */
    void blend_funci_oes(uint_t buf, enum_t src, enum_t dst);

   /**
    * Required by extensions:
    *  - GL_OES_draw_buffers_indexed (gles2)
    */
    void color_maski_oes(uint_t index, boolean_t r, boolean_t g, boolean_t b, boolean_t a);

   /**
    * Required by extensions:
    *  - GL_OES_draw_buffers_indexed (gles2)
    */
    void disablei_oes(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_OES_draw_buffers_indexed (gles2)
    */
    void enablei_oes(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_OES_draw_buffers_indexed (gles2)
    */
    boolean_t is_enabledi_oes(framebuffer_target_t target, uint_t index);

   /**
    * Required by extensions:
    *  - GL_OES_primitive_bounding_box (gles2)
    */
    void primitive_bounding_box_oes(float_t minX, float_t minY, float_t minZ, float_t minW, float_t maxX, float_t maxY, float_t maxZ, float_t maxW);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void get_sampler_parameter_iiv_ext(uint_t sampler, get_pointerv_p_name_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void get_sampler_parameter_iuiv_ext(uint_t sampler, get_pointerv_p_name_t pname, uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void get_tex_parameter_iiv_ext(texture_target_t target, get_texture_parameter_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void get_tex_parameter_iuiv_ext(texture_target_t target, get_texture_parameter_t pname, uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void sampler_parameter_iiv_ext(uint_t sampler, get_pointerv_p_name_t pname, const int_t * param);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void sampler_parameter_iuiv_ext(uint_t sampler, get_pointerv_p_name_t pname, const uint_t * param);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void tex_parameter_iiv_ext(texture_target_t target, texture_parameter_name_t pname, const int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void tex_parameter_iuiv_ext(texture_target_t target, texture_parameter_name_t pname, const uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_instanced_arrays (gles2)
    */
    void vertex_attrib_divisor_ext(uint_t index, uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_instanced (gles2,gl)
    *  - GL_EXT_instanced_arrays (gles2)
    */
    void draw_arrays_instanced_ext(primitive_type_t mode, int_t start, sizei_t count, sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_instanced (gles2,gl)
    *  - GL_EXT_instanced_arrays (gles2)
    */
    void draw_elements_instanced_ext(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ANGLE_framebuffer_blit (gles2)
    */
    void blit_framebuffer_angle(int_t srcX0, int_t srcY0, int_t srcX1, int_t srcY1, int_t dstX0, int_t dstY0, int_t dstX1, int_t dstY1, bitmask<clear_buffer_flags_t> mask, enum_t filter);

   /**
    * Required by extensions:
    *  - GL_OES_texture_3D (gles2)
    */
    void compressed_tex_image_3does(framebuffer_target_t target, int_t level, internal_format_t internalformat, sizei_t width, sizei_t height, sizei_t depth, int_t border, sizei_t imageSize, const void * data);

   /**
    * Required by extensions:
    *  - GL_OES_texture_3D (gles2)
    */
    void compressed_tex_sub_image_3does(framebuffer_target_t target, int_t level, int_t xoffset, int_t yoffset, int_t zoffset, sizei_t width, sizei_t height, sizei_t depth, pixel_format_t format, sizei_t imageSize, const void * data);

   /**
    * Required by extensions:
    *  - GL_OES_texture_3D (gles2)
    */
    void copy_tex_sub_image_3does(framebuffer_target_t target, int_t level, int_t xoffset, int_t yoffset, int_t zoffset, int_t x, int_t y, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_OES_texture_3D (gles2)
    */
    void framebuffer_texture_3does(framebuffer_target_t target, framebuffer_attachment_t attachment, enum_t textarget, uint_t texture, int_t level, int_t zoffset);

   /**
    * Required by extensions:
    *  - GL_OES_texture_3D (gles2)
    */
    void tex_image_3does(framebuffer_target_t target, int_t level, internal_format_t internalformat, sizei_t width, sizei_t height, sizei_t depth, int_t border, pixel_format_t format, draw_elements_type_t type, const void * pixels);

   /**
    * Required by extensions:
    *  - GL_OES_texture_3D (gles2)
    */
    void tex_sub_image_3does(framebuffer_target_t target, int_t level, int_t xoffset, int_t yoffset, int_t zoffset, sizei_t width, sizei_t height, sizei_t depth, pixel_format_t format, draw_elements_type_t type, const void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_robustness (gles2,gles1)
    */
    enum_t get_graphics_reset_status_ext();

   /**
    * Required by extensions:
    *  - GL_EXT_robustness (gles2,gles1)
    */
    void getn_uniformfv_ext(uint_t program, int_t location, sizei_t bufSize, float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_robustness (gles2,gles1)
    */
    void getn_uniformiv_ext(uint_t program, int_t location, sizei_t bufSize, int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_robustness (gles2,gles1)
    */
    void readn_pixels_ext(int_t x, int_t y, sizei_t width, sizei_t height, pixel_format_t format, draw_elements_type_t type, sizei_t bufSize, void * data);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void begin_perf_query_intel(uint_t queryHandle);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void create_perf_query_intel(uint_t queryId, uint_t * queryHandle);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void delete_perf_query_intel(uint_t queryHandle);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void end_perf_query_intel(uint_t queryHandle);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_first_perf_query_id_intel(uint_t * queryId);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_next_perf_query_id_intel(uint_t queryId, uint_t * nextQueryId);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_perf_counter_info_intel(uint_t queryId, uint_t counterId, uint_t counterNameLength, char_t * counterName, uint_t counterDescLength, char_t * counterDesc, uint_t * counterOffset, uint_t * counterDataSize, uint_t * counterTypeEnum, uint_t * counterDataTypeEnum, uint64_t * rawCounterMaxValue);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_perf_query_data_intel(uint_t queryHandle, uint_t flags, sizei_t dataSize, void * data, uint_t * bytesWritten);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_perf_query_id_by_name_intel(char_t * queryName, uint_t * queryId);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_perf_query_info_intel(uint_t queryId, uint_t queryNameLength, char_t * queryName, uint_t * dataSize, uint_t * noCounters, uint_t * noInstances, uint_t * capsMask);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void debug_message_callback_khr(DEBUGPROCKHR_t callback, const void * userParam);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void debug_message_control_khr(enum_t source, draw_elements_type_t type, enum_t severity, sizei_t count, const uint_t * ids, boolean_t enabled);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void debug_message_insert_khr(enum_t source, draw_elements_type_t type, uint_t id, enum_t severity, sizei_t length, const char_t * buf);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    uint_t get_debug_message_log_khr(uint_t count, sizei_t bufSize, enum_t * sources, enum_t * types, uint_t * ids, enum_t * severities, sizei_t * lengths, char_t * messageLog);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void get_object_label_khr(enum_t identifier, uint_t name, sizei_t bufSize, sizei_t * length, char_t * label);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void get_object_ptr_label_khr(const void * ptr, sizei_t bufSize, sizei_t * length, char_t * label);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void get_pointerv_khr(get_pointerv_p_name_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void object_label_khr(enum_t identifier, uint_t name, sizei_t length, const char_t * label);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void object_ptr_label_khr(const void * ptr, sizei_t length, const char_t * label);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void pop_debug_group_khr();

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,glcore,gl)
    */
    void push_debug_group_khr(enum_t source, uint_t id, sizei_t length, const char_t * message);

   /**
    * Required by extensions:
    *  - GL_EXT_tessellation_shader (gles2)
    */
    void patch_parameteri_ext(get_pointerv_p_name_t pname, int_t value);

   /**
    * Required by extensions:
    *  - GL_QCOM_alpha_test (gles2)
    */
    void alpha_func_qcom(alpha_function_t func, clampf_t ref);

   /**
    * Required by extensions:
    *  - GL_NV_draw_instanced (gles2)
    */
    void draw_arrays_instanced_nv(primitive_type_t mode, int_t first, sizei_t count, sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_NV_draw_instanced (gles2)
    */
    void draw_elements_instanced_nv(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    uint64_t get_image_handle_nv(uint_t texture, int_t level, boolean_t layered, int_t layer, pixel_format_t format);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    uint64_t get_texture_handle_nv(uint_t texture);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    uint64_t get_texture_sampler_handle_nv(uint_t texture, uint_t sampler);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    boolean_t is_image_handle_resident_nv(uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    boolean_t is_texture_handle_resident_nv(uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void make_image_handle_non_resident_nv(uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void make_image_handle_resident_nv(uint64_t handle, enum_t access);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void make_texture_handle_non_resident_nv(uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void make_texture_handle_resident_nv(uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void program_uniform_handleui_64nv(uint_t program, int_t location, uint64_t value);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void program_uniform_handleui_64v_nv(uint_t program, int_t location, sizei_t count, const uint64_t * values);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void uniform_handleui_64nv(int_t location, uint64_t value);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void uniform_handleui_64v_nv(int_t location, sizei_t count, const uint64_t * value);

   /**
    * Required by extensions:
    *  - GL_OES_texture_border_clamp (gles2)
    */
    void get_sampler_parameter_iiv_oes(uint_t sampler, get_pointerv_p_name_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_texture_border_clamp (gles2)
    */
    void get_sampler_parameter_iuiv_oes(uint_t sampler, get_pointerv_p_name_t pname, uint_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_texture_border_clamp (gles2)
    */
    void get_tex_parameter_iiv_oes(texture_target_t target, get_texture_parameter_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_texture_border_clamp (gles2)
    */
    void get_tex_parameter_iuiv_oes(texture_target_t target, get_texture_parameter_t pname, uint_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_texture_border_clamp (gles2)
    */
    void sampler_parameter_iiv_oes(uint_t sampler, get_pointerv_p_name_t pname, const int_t * param);

   /**
    * Required by extensions:
    *  - GL_OES_texture_border_clamp (gles2)
    */
    void sampler_parameter_iuiv_oes(uint_t sampler, get_pointerv_p_name_t pname, const uint_t * param);

   /**
    * Required by extensions:
    *  - GL_OES_texture_border_clamp (gles2)
    */
    void tex_parameter_iiv_oes(texture_target_t target, texture_parameter_name_t pname, const int_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_texture_border_clamp (gles2)
    */
    void tex_parameter_iuiv_oes(texture_target_t target, texture_parameter_name_t pname, const uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_coverage_sample (gles2)
    */
    void coverage_mask_nv(boolean_t mask);

   /**
    * Required by extensions:
    *  - GL_NV_coverage_sample (gles2)
    */
    void coverage_operation_nv(enum_t operation);

   /**
    * Required by extensions:
    *  - GL_NV_read_buffer (gles2)
    */
    void read_buffer_nv(blend_equation_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void get_query_objecti_64v_ext(uint_t id, get_pointerv_p_name_t pname, int64_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void get_query_objectiv_ext(uint_t id, get_pointerv_p_name_t pname, int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void get_query_objectui_64v_ext(uint_t id, get_pointerv_p_name_t pname, uint64_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    */
    void query_counter_ext(uint_t id, framebuffer_target_t target);

   /**
    * Required by extensions:
    *  - GL_OES_vertex_array_object (gles2,gles1)
    */
    void bind_vertex_array_oes(uint_t array);

   /**
    * Required by extensions:
    *  - GL_OES_vertex_array_object (gles2,gles1)
    */
    void delete_vertex_arrays_oes(sizei_t n, const uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_OES_vertex_array_object (gles2,gles1)
    */
    void gen_vertex_arrays_oes(sizei_t n, uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_OES_vertex_array_object (gles2,gles1)
    */
    boolean_t is_vertex_array_oes(uint_t array);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_label (gles2,gl)
    */
    void get_object_label_ext(draw_elements_type_t type, uint_t object, sizei_t bufSize, sizei_t * length, char_t * label);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_label (gles2,gl)
    */
    void label_object_ext(draw_elements_type_t type, uint_t object, sizei_t length, const char_t * label);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_view (gles2)
    */
    void texture_view_ext(uint_t texture, framebuffer_target_t target, uint_t origtexture, internal_format_t internalformat, uint_t minlevel, uint_t numlevels, uint_t minlayer, uint_t numlayers);

   /**
    * Required by extensions:
    *  - GL_NV_conditional_render (gles2,gl)
    */
    void begin_conditional_render_nv(uint_t id, enum_t mode);

   /**
    * Required by extensions:
    *  - GL_NV_conditional_render (gles2,gl)
    */
    void end_conditional_render_nv();

   /**
    * Required by extensions:
    *  - GL_ANGLE_instanced_arrays (gles2)
    */
    void draw_arrays_instanced_angle(primitive_type_t mode, int_t first, sizei_t count, sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ANGLE_instanced_arrays (gles2)
    */
    void draw_elements_instanced_angle(primitive_type_t mode, sizei_t count, draw_elements_type_t type, const void * indices, sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ANGLE_instanced_arrays (gles2)
    */
    void vertex_attrib_divisor_angle(uint_t index, uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_EXT_discard_framebuffer (gles2,gles1)
    */
    void discard_framebuffer_ext(framebuffer_target_t target, sizei_t numAttachments, const enum_t * attachments);

   /**
    * Required by extensions:
    *  - GL_NV_internalformat_sample_query (gles2,gl)
    */
    void get_internalformat_sampleiv_nv(framebuffer_target_t target, internal_format_t internalformat, sizei_t samples, get_pointerv_p_name_t pname, sizei_t bufSize, int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_copy_buffer (gles2)
    */
    void copy_buffer_sub_data_nv(enum_t readTarget, enum_t writeTarget, intptr_t readOffset, intptr_t writeOffset, sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_KHR_blend_equation_advanced (gles2,gl)
    */
    void blend_barrier_khr();

   /**
    * Required by extensions:
    *  - GL_APPLE_sync (gles2,gles1)
    */
    enum_t client_wait_sync_apple(sync_t sync, bitfield_t flags, uint64_t timeout);

   /**
    * Required by extensions:
    *  - GL_APPLE_sync (gles2,gles1)
    */
    void delete_sync_apple(sync_t sync);

   /**
    * Required by extensions:
    *  - GL_APPLE_sync (gles2,gles1)
    */
    sync_t fence_sync_apple(enum_t condition, bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_APPLE_sync (gles2,gles1)
    */
    void get_integer_64v_apple(get_pointerv_p_name_t pname, int64_t * params);

   /**
    * Required by extensions:
    *  - GL_APPLE_sync (gles2,gles1)
    */
    void get_synciv_apple(sync_t sync, get_pointerv_p_name_t pname, sizei_t bufSize, sizei_t * length, int_t * values);

   /**
    * Required by extensions:
    *  - GL_APPLE_sync (gles2,gles1)
    */
    boolean_t is_sync_apple(sync_t sync);

   /**
    * Required by extensions:
    *  - GL_APPLE_sync (gles2,gles1)
    */
    void wait_sync_apple(sync_t sync, bitfield_t flags, uint64_t timeout);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    */
    void tex_storage_1dext(framebuffer_target_t target, sizei_t levels, internal_format_t internalformat, sizei_t width);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    */
    void tex_storage_2dext(framebuffer_target_t target, sizei_t levels, internal_format_t internalformat, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    */
    void tex_storage_3dext(framebuffer_target_t target, sizei_t levels, internal_format_t internalformat, sizei_t width, sizei_t height, sizei_t depth);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    */
    void texture_storage_1dext(uint_t texture, framebuffer_target_t target, sizei_t levels, internal_format_t internalformat, sizei_t width);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    */
    void texture_storage_2dext(uint_t texture, framebuffer_target_t target, sizei_t levels, internal_format_t internalformat, sizei_t width, sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    */
    void texture_storage_3dext(uint_t texture, framebuffer_target_t target, sizei_t levels, internal_format_t internalformat, sizei_t width, sizei_t height, sizei_t depth);

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,glcore,gl)
    */
    enum_t get_graphics_reset_status_khr();

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,glcore,gl)
    */
    void getn_uniformfv_khr(uint_t program, int_t location, sizei_t bufSize, float_t * params);

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,glcore,gl)
    */
    void getn_uniformiv_khr(uint_t program, int_t location, sizei_t bufSize, int_t * params);

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,glcore,gl)
    */
    void getn_uniformuiv_khr(uint_t program, int_t location, sizei_t bufSize, uint_t * params);

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,glcore,gl)
    */
    void readn_pixels_khr(int_t x, int_t y, sizei_t width, sizei_t height, pixel_format_t format, pixel_type_t type, sizei_t bufSize, void * data);

   /**
    * Required by extensions:
    *  - GL_QCOM_driver_control (gles2,gles1)
    */
    void disable_driver_control_qcom(uint_t driverControl);

   /**
    * Required by extensions:
    *  - GL_QCOM_driver_control (gles2,gles1)
    */
    void enable_driver_control_qcom(uint_t driverControl);

   /**
    * Required by extensions:
    *  - GL_QCOM_driver_control (gles2,gles1)
    */
    void get_driver_control_string_qcom(uint_t driverControl, sizei_t bufSize, sizei_t * length, char_t * driverControlString);

   /**
    * Required by extensions:
    *  - GL_QCOM_driver_control (gles2,gles1)
    */
    void get_driver_controls_qcom(int_t * num, sizei_t size, uint_t * driverControls);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_buffer (gles2)
    */
    void tex_buffer_ext(texture_target_t target, internal_format_t internalformat, uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_buffer (gles2)
    */
    void tex_buffer_range_ext(framebuffer_target_t target, internal_format_t internalformat, uint_t buffer, intptr_t offset, sizeiptr_t size);

} // namespace gl

#endif // #ifndef EXTENSIONS__H
