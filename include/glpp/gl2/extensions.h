/**
 * This file was autogenerated by glgen (https://github.com/seshbot/glgen) on 2015-03-10
 * Command line: src/gen.py assets/gl.xml -p assets/gl-patch.xml -o ../glpp/ --includesubdir include/glpp --sourcesubdir src --namespace gl2 --force --cpp --gl2only
 */

#ifndef EXTENSIONS__H
#define EXTENSIONS__H


#include "../types.h"
#include "enums.h"
#include "extensions_enums.h"

namespace gl2 {
   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback2 (gl)
    */
    void bind_transform_feedback_nv(buffer_target_arb_t target, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback2 (gl)
    */
    void delete_transform_feedbacks_nv(gl::sizei_t n, const  gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback2 (gl)
    */
    void draw_transform_feedback_nv(primitive_type_t mode, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback2 (gl)
    */
    void gen_transform_feedbacks_nv(gl::sizei_t n, gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback2 (gl)
    */
    gl::boolean_t is_transform_feedback_nv(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback2 (gl)
    */
    void pause_transform_feedback_nv();

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback2 (gl)
    */
    void resume_transform_feedback_nv();

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_1darb(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_2darb(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_3darb(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_1darb(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_2darb(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_3darb(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void get_compressed_tex_image_arb(texture_target_t target, gl::int_t level, void * img);

   /**
    * Required by extensions:
    *  - GL_NV_point_sprite (gl)
    */
    void point_parameteri_nv(gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_NV_point_sprite (gl)
    */
    void point_parameteriv_nv(gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void draw_element_array_apple(primitive_type_t mode, gl::int_t first, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void draw_range_element_array_apple(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::int_t first, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void element_pointer_apple(gl::enum_t type, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void multi_draw_element_array_apple(primitive_type_t mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void multi_draw_range_element_array_apple(primitive_type_t mode, gl::uint_t start, gl::uint_t end, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_subroutine (glcore,gl)
    */
    void get_active_subroutine_name(gl::uint_t program, gl::enum_t shadertype, gl::uint_t index, gl::sizei_t bufsize, gl::sizei_t * length, gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_subroutine (glcore,gl)
    */
    void get_active_subroutine_uniform_name(gl::uint_t program, gl::enum_t shadertype, gl::uint_t index, gl::sizei_t bufsize, gl::sizei_t * length, gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_subroutine (glcore,gl)
    */
    void get_active_subroutine_uniformiv(gl::uint_t program, gl::enum_t shadertype, gl::uint_t index, gl::enum_t pname, gl::int_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_subroutine (glcore,gl)
    */
    void get_program_stageiv(gl::uint_t program, gl::enum_t shadertype, gl::enum_t pname, gl::int_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_subroutine (glcore,gl)
    */
    gl::uint_t get_subroutine_index(gl::uint_t program, gl::enum_t shadertype, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_subroutine (glcore,gl)
    */
    gl::int_t get_subroutine_uniform_location(gl::uint_t program, gl::enum_t shadertype, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_subroutine (glcore,gl)
    */
    void get_uniform_subroutineuiv(gl::enum_t shadertype, gl::int_t location, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_subroutine (glcore,gl)
    */
    void uniform_subroutinesuiv(gl::enum_t shadertype, gl::sizei_t count, const  gl::uint_t * indices);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_color (gl)
    */
    void blend_color_ext(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha);

   /**
    * Required by extensions:
    *  - GL_AMD_sparse_texture (gl)
    */
    void tex_storage_sparse_amd(gl::enum_t target, gl::enum_t internalFormat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::sizei_t layers, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_AMD_sparse_texture (gl)
    */
    void texture_storage_sparse_amd(gl::uint_t texture, gl::enum_t target, gl::enum_t internalFormat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::sizei_t layers, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_storage_multisample (glcore,gl)
    */
    void tex_storage_2d_multisample(gl::enum_t target, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_storage_multisample (glcore,gl)
    */
    void tex_storage_3d_multisample(gl::enum_t target, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_barrier (glcore,gl)
    */
    void texture_barrier();

   /**
    * Required by extensions:
    *  - GL_ARB_clip_control (glcore,gl)
    */
    void clip_control(gl::enum_t origin, gl::enum_t depth);

   /**
    * Required by extensions:
    *  - GL_NV_fragment_coverage_to_color (gl)
    */
    void fragment_coverage_color_nv(gl::uint_t color);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles1,gles2,gl)
    */
    void delete_fences_nv(gl::sizei_t n, const  gl::uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles1,gles2,gl)
    */
    void finish_fence_nv(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles1,gles2,gl)
    */
    void gen_fences_nv(gl::sizei_t n, gl::uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles1,gles2,gl)
    */
    void get_fenceiv_nv(gl::uint_t fence, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles1,gles2,gl)
    */
    gl::boolean_t is_fence_nv(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles1,gles2,gl)
    */
    void set_fence_nv(gl::uint_t fence, gl::enum_t condition);

   /**
    * Required by extensions:
    *  - GL_NV_fence (gles1,gles2,gl)
    */
    gl::boolean_t test_fence_nv(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void array_element_ext(gl::int_t i);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void color_pointer_ext(gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, gl::sizei_t count, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void draw_arrays_ext(primitive_type_t mode, gl::int_t first, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void edge_flag_pointer_ext(gl::sizei_t stride, gl::sizei_t count, const  gl::boolean_t * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void get_pointerv_ext(get_pointerv_p_name_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void index_pointer_ext(index_pointer_type_t type, gl::sizei_t stride, gl::sizei_t count, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void normal_pointer_ext(normal_pointer_type_t type, gl::sizei_t stride, gl::sizei_t count, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void tex_coord_pointer_ext(gl::int_t size, tex_coord_pointer_type_t type, gl::sizei_t stride, gl::sizei_t count, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_array (gl)
    */
    void vertex_pointer_ext(gl::int_t size, vertex_pointer_type_t type, gl::sizei_t stride, gl::sizei_t count, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_SUN_mesh_array (gl)
    */
    void draw_mesh_arrays_sun(primitive_type_t mode, gl::int_t first, gl::sizei_t count, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_binding (glcore,gl)
    */
    void bind_vertex_buffer(gl::uint_t bindingindex, gl::uint_t buffer, gl::intptr_t offset, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_binding (glcore,gl)
    */
    void vertex_attrib_binding(gl::uint_t attribindex, gl::uint_t bindingindex);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_binding (glcore,gl)
    */
    void vertex_attrib_format(gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::boolean_t normalized, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_binding (glcore,gl)
    */
    void vertex_attrib_i_format(gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_binding (glcore,gl)
    */
    void vertex_attrib_l_format(gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_binding (glcore,gl)
    */
    void vertex_binding_divisor(gl::uint_t bindingindex, gl::uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_no_attachments (glcore,gl)
    */
    void framebuffer_parameteri(gl::enum_t target, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_no_attachments (glcore,gl)
    */
    void get_framebuffer_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_view (glcore,gl)
    */
    void texture_view(gl::uint_t texture, gl::enum_t target, gl::uint_t origtexture, gl::enum_t internalformat, gl::uint_t minlevel, gl::uint_t numlevels, gl::uint_t minlayer, gl::uint_t numlayers);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void get_histogram_ext(histogram_target_ext_t target, gl::boolean_t reset, pixel_format_t format, pixel_type_t type, void * values);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void get_histogram_parameterfv_ext(histogram_target_ext_t target, get_histogram_parameter_p_name_ext_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void get_histogram_parameteriv_ext(histogram_target_ext_t target, get_histogram_parameter_p_name_ext_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void get_minmax_ext(minmax_target_ext_t target, gl::boolean_t reset, pixel_format_t format, pixel_type_t type, void * values);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void get_minmax_parameterfv_ext(minmax_target_ext_t target, get_minmax_parameter_p_name_ext_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void get_minmax_parameteriv_ext(minmax_target_ext_t target, get_minmax_parameter_p_name_ext_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void histogram_ext(histogram_target_ext_t target, gl::sizei_t width, gl::enum_t internalformat, gl::boolean_t sink);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void minmax_ext(minmax_target_ext_t target, gl::enum_t internalformat, gl::boolean_t sink);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void reset_histogram_ext(histogram_target_ext_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_histogram (gl)
    */
    void reset_minmax_ext(minmax_target_ext_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_cl_event (glcore,gl)
    */
    gl::sync_t create_sync_from_c_levent_arb(gl::_cl_context_t * context, gl::_cl_event_t * event, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void get_tex_parameter_iiv_ext(texture_target_t target, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void get_tex_parameter_iuiv_ext(texture_target_t target, get_texture_parameter_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void tex_parameter_iiv_ext(texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    *  - GL_EXT_texture_border_clamp (gles2)
    */
    void tex_parameter_iuiv_ext(texture_target_t target, texture_parameter_name_t pname, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIS_point_parameters (gl)
    */
    void point_parameterf_sgis(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_SGIS_point_parameters (gl)
    */
    void point_parameterfv_sgis(gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    gl::uint64_t get_image_handle_arb(gl::uint_t texture, gl::int_t level, gl::boolean_t layered, gl::int_t layer, gl::enum_t format);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    gl::uint64_t get_texture_handle_arb(gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    gl::uint64_t get_texture_sampler_handle_arb(gl::uint_t texture, gl::uint_t sampler);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void get_vertex_attrib_lui_64v_arb(gl::uint_t index, gl::enum_t pname, gl::uint64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    gl::boolean_t is_image_handle_resident_arb(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    gl::boolean_t is_texture_handle_resident_arb(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void make_image_handle_non_resident_arb(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void make_image_handle_resident_arb(gl::uint64_t handle, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void make_texture_handle_non_resident_arb(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void make_texture_handle_resident_arb(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void program_uniform_handleui_64arb(gl::uint_t program, gl::int_t location, gl::uint64_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void program_uniform_handleui_64v_arb(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint64_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void uniform_handleui_64arb(gl::int_t location, gl::uint64_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void uniform_handleui_64v_arb(gl::int_t location, gl::sizei_t count, const  gl::uint64_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void vertex_attrib_l1ui_64arb(gl::uint_t index, gl::uint64EXT_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_bindless_texture (glcore,gl)
    */
    void vertex_attrib_l1ui_64v_arb(gl::uint_t index, const  gl::uint64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void vertex_blend_arb(gl::int_t count);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weight_pointer_arb(gl::int_t size, gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightbv_arb(gl::int_t size, const  gl::byte_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightdv_arb(gl::int_t size, const  gl::double_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightfv_arb(gl::int_t size, const  gl::float_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightiv_arb(gl::int_t size, const  gl::int_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightsv_arb(gl::int_t size, const  gl::short_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightubv_arb(gl::int_t size, const  gl::ubyte_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightuiv_arb(gl::int_t size, const  gl::uint_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightusv_arb(gl::int_t size, const  gl::ushort_t * weights);

   /**
    * Required by extensions:
    *  - GL_OES_query_matrix (gles1,gl)
    */
    gl::bitfield_t query_matrixx_oes(gl::fixed_t * mantissa, gl::int_t * exponent);

   /**
    * Required by extensions:
    *  - GL_OES_single_precision (gles1,gl)
    */
    void clear_depthf_oes(gl::clampf_t depth);

   /**
    * Required by extensions:
    *  - GL_OES_single_precision (gles1,gl)
    */
    void clip_planef_oes(gl::enum_t plane, const  gl::float_t * equation);

   /**
    * Required by extensions:
    *  - GL_OES_single_precision (gles1,gl)
    */
    void depth_rangef_oes(gl::clampf_t n, gl::clampf_t f);

   /**
    * Required by extensions:
    *  - GL_OES_single_precision (gles1,gl)
    */
    void frustumf_oes(gl::float_t l, gl::float_t r, gl::float_t b, gl::float_t t, gl::float_t n, gl::float_t f);

   /**
    * Required by extensions:
    *  - GL_OES_single_precision (gles1,gl)
    */
    void get_clip_planef_oes(gl::enum_t plane, gl::float_t * equation);

   /**
    * Required by extensions:
    *  - GL_OES_single_precision (gles1,gl)
    */
    void orthof_oes(gl::float_t l, gl::float_t r, gl::float_t b, gl::float_t t, gl::float_t n, gl::float_t f);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void bind_multi_texture_ext(texture_unit_t texunit, texture_target_t target, gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    framebuffer_status_t check_named_framebuffer_status_ext(gl::uint_t framebuffer, framebuffer_target_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void clear_named_buffer_data_ext(gl::uint_t buffer, gl::enum_t internalformat, pixel_format_t format, pixel_type_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void clear_named_buffer_sub_data_ext(gl::uint_t buffer, gl::enum_t internalformat, gl::sizeiptr_t offset, gl::sizeiptr_t size, pixel_format_t format, pixel_type_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void client_attrib_default_ext(gl::bitmask<client_attrib_flags_t> mask);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_multi_tex_image_1dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::int_t border, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_multi_tex_image_2dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_multi_tex_image_3dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_multi_tex_sub_image_1dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_multi_tex_sub_image_2dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_multi_tex_sub_image_3dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_texture_image_1dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::int_t border, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_texture_image_2dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_texture_image_3dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_texture_sub_image_1dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_texture_sub_image_2dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void compressed_texture_sub_image_3dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, gl::sizei_t imageSize, const  void * bits);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_multi_tex_image_1dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::int_t border);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_multi_tex_image_2dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, gl::int_t border);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_multi_tex_sub_image_1dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_multi_tex_sub_image_2dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_multi_tex_sub_image_3dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_texture_image_1dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::int_t border);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_texture_image_2dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, gl::int_t border);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_texture_sub_image_1dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_texture_sub_image_2dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void copy_texture_sub_image_3dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void disable_client_state_indexed_ext(enable_cap_t array, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void disable_client_statei_ext(enable_cap_t array, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void disable_vertex_array_attrib_ext(gl::uint_t vaobj, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void disable_vertex_array_ext(gl::uint_t vaobj, enable_cap_t array);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void enable_client_state_indexed_ext(enable_cap_t array, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void enable_client_statei_ext(enable_cap_t array, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void enable_vertex_array_attrib_ext(gl::uint_t vaobj, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void enable_vertex_array_ext(gl::uint_t vaobj, enable_cap_t array);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void flush_mapped_named_buffer_range_ext(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t length);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void framebuffer_draw_buffer_ext(gl::uint_t framebuffer, draw_buffer_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void framebuffer_draw_buffers_ext(gl::uint_t framebuffer, gl::sizei_t n, const  draw_buffer_mode_t * bufs);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void framebuffer_read_buffer_ext(gl::uint_t framebuffer, read_buffer_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void generate_multi_tex_mipmap_ext(texture_unit_t texunit, texture_target_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void generate_texture_mipmap_ext(gl::uint_t texture, texture_target_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_compressed_multi_tex_image_ext(texture_unit_t texunit, texture_target_t target, gl::int_t lod, void * img);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_compressed_texture_image_ext(gl::uint_t texture, texture_target_t target, gl::int_t lod, void * img);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_double_indexedv_ext(gl::enum_t target, gl::uint_t index, gl::double_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_doublei_v_ext(gl::enum_t pname, gl::uint_t index, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_float_indexedv_ext(gl::enum_t target, gl::uint_t index, gl::float_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_floati_v_ext(gl::enum_t pname, gl::uint_t index, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_framebuffer_parameteriv_ext(gl::uint_t framebuffer, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_envfv_ext(texture_unit_t texunit, texture_env_target_t target, texture_env_parameter_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_enviv_ext(texture_unit_t texunit, texture_env_target_t target, texture_env_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_gendv_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_genfv_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_geniv_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_image_ext(texture_unit_t texunit, texture_target_t target, gl::int_t level, pixel_format_t format, pixel_type_t type, void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_level_parameterfv_ext(texture_unit_t texunit, texture_target_t target, gl::int_t level, get_texture_parameter_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_level_parameteriv_ext(texture_unit_t texunit, texture_target_t target, gl::int_t level, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_parameter_iiv_ext(texture_unit_t texunit, texture_target_t target, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_parameter_iuiv_ext(texture_unit_t texunit, texture_target_t target, get_texture_parameter_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_parameterfv_ext(texture_unit_t texunit, texture_target_t target, get_texture_parameter_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_multi_tex_parameteriv_ext(texture_unit_t texunit, texture_target_t target, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_buffer_parameteriv_ext(gl::uint_t buffer, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_buffer_pointerv_ext(gl::uint_t buffer, gl::enum_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_buffer_sub_data_ext(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size, void * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_framebuffer_attachment_parameteriv_ext(gl::uint_t framebuffer, framebuffer_attachment_t attachment, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_framebuffer_parameteriv_ext(gl::uint_t framebuffer, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_program_local_parameter_iiv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_program_local_parameter_iuiv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_program_local_parameterdv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_program_local_parameterfv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_program_string_ext(gl::uint_t program, gl::enum_t target, gl::enum_t pname, void * string);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_programiv_ext(gl::uint_t program, gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_named_renderbuffer_parameteriv_ext(gl::uint_t renderbuffer, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_pointer_indexedv_ext(gl::enum_t target, gl::uint_t index, void ** data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_pointeri_v_ext(gl::enum_t pname, gl::uint_t index, void ** params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_texture_image_ext(gl::uint_t texture, texture_target_t target, gl::int_t level, pixel_format_t format, pixel_type_t type, void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_texture_level_parameterfv_ext(gl::uint_t texture, texture_target_t target, gl::int_t level, get_texture_parameter_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_texture_level_parameteriv_ext(gl::uint_t texture, texture_target_t target, gl::int_t level, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_texture_parameter_iiv_ext(gl::uint_t texture, texture_target_t target, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_texture_parameter_iuiv_ext(gl::uint_t texture, texture_target_t target, get_texture_parameter_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_texture_parameterfv_ext(gl::uint_t texture, texture_target_t target, get_texture_parameter_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_texture_parameteriv_ext(gl::uint_t texture, texture_target_t target, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_vertex_array_integeri_v_ext(gl::uint_t vaobj, gl::uint_t index, gl::enum_t pname, gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_vertex_array_integerv_ext(gl::uint_t vaobj, gl::enum_t pname, gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_vertex_array_pointeri_v_ext(gl::uint_t vaobj, gl::uint_t index, gl::enum_t pname, void ** param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void get_vertex_array_pointerv_ext(gl::uint_t vaobj, gl::enum_t pname, void ** param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void * map_named_buffer_ext(gl::uint_t buffer, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void * map_named_buffer_range_ext(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t length, gl::bitfield_t access);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_frustum_ext(matrix_mode_t mode, gl::double_t left, gl::double_t right, gl::double_t bottom, gl::double_t top, gl::double_t zNear, gl::double_t zFar);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_load_identity_ext(matrix_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_load_transposed_ext(matrix_mode_t mode, const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_load_transposef_ext(matrix_mode_t mode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_loadd_ext(matrix_mode_t mode, const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_loadf_ext(matrix_mode_t mode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_mult_transposed_ext(matrix_mode_t mode, const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_mult_transposef_ext(matrix_mode_t mode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_multd_ext(matrix_mode_t mode, const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_multf_ext(matrix_mode_t mode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_ortho_ext(matrix_mode_t mode, gl::double_t left, gl::double_t right, gl::double_t bottom, gl::double_t top, gl::double_t zNear, gl::double_t zFar);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_pop_ext(matrix_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_push_ext(matrix_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_rotated_ext(matrix_mode_t mode, gl::double_t angle, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_rotatef_ext(matrix_mode_t mode, gl::float_t angle, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_scaled_ext(matrix_mode_t mode, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_scalef_ext(matrix_mode_t mode, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_translated_ext(matrix_mode_t mode, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void matrix_translatef_ext(matrix_mode_t mode, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_buffer_ext(texture_unit_t texunit, texture_target_t target, gl::enum_t internalformat, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_coord_pointer_ext(texture_unit_t texunit, gl::int_t size, tex_coord_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_envf_ext(texture_unit_t texunit, texture_env_target_t target, texture_env_parameter_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_envfv_ext(texture_unit_t texunit, texture_env_target_t target, texture_env_parameter_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_envi_ext(texture_unit_t texunit, texture_env_target_t target, texture_env_parameter_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_enviv_ext(texture_unit_t texunit, texture_env_target_t target, texture_env_parameter_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_gend_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, gl::double_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_gendv_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_genf_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_genfv_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_geni_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_geniv_ext(texture_unit_t texunit, texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_image_1dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_image_2dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_image_3dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_parameter_iiv_ext(texture_unit_t texunit, texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_parameter_iuiv_ext(texture_unit_t texunit, texture_target_t target, texture_parameter_name_t pname, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_parameterf_ext(texture_unit_t texunit, texture_target_t target, texture_parameter_name_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_parameterfv_ext(texture_unit_t texunit, texture_target_t target, texture_parameter_name_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_parameteri_ext(texture_unit_t texunit, texture_target_t target, texture_parameter_name_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_parameteriv_ext(texture_unit_t texunit, texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_renderbuffer_ext(texture_unit_t texunit, texture_target_t target, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_sub_image_1dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_sub_image_2dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void multi_tex_sub_image_3dext(texture_unit_t texunit, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_buffer_data_ext(gl::uint_t buffer, gl::sizeiptr_t size, const  void * data, gl::enum_t usage);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_buffer_storage_ext(gl::uint_t buffer, gl::sizeiptr_t size, const  void * data, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_buffer_sub_data_ext(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size, const  void * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_copy_buffer_sub_data_ext(gl::uint_t readBuffer, gl::uint_t writeBuffer, gl::intptr_t readOffset, gl::intptr_t writeOffset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_framebuffer_parameteri_ext(gl::uint_t framebuffer, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_framebuffer_renderbuffer_ext(gl::uint_t framebuffer, framebuffer_attachment_t attachment, renderbuffer_target_t renderbuffertarget, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_framebuffer_texture_1dext(gl::uint_t framebuffer, framebuffer_attachment_t attachment, texture_target_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_framebuffer_texture_2dext(gl::uint_t framebuffer, framebuffer_attachment_t attachment, texture_target_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_framebuffer_texture_3dext(gl::uint_t framebuffer, framebuffer_attachment_t attachment, texture_target_t textarget, gl::uint_t texture, gl::int_t level, gl::int_t zoffset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_framebuffer_texture_ext(gl::uint_t framebuffer, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_framebuffer_texture_face_ext(gl::uint_t framebuffer, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, texture_target_t face);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_framebuffer_texture_layer_ext(gl::uint_t framebuffer, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, gl::int_t layer);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameter_4d_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameter_4dv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameter_4f_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameter_4fv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameter_i4i_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameter_i4iv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameter_i4ui_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::uint_t x, gl::uint_t y, gl::uint_t z, gl::uint_t w);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameter_i4uiv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameters_4fv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameters_i4iv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_local_parameters_i4uiv_ext(gl::uint_t program, gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_program_string_ext(gl::uint_t program, gl::enum_t target, gl::enum_t format, gl::sizei_t len, const  void * string);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_renderbuffer_storage_ext(gl::uint_t renderbuffer, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_renderbuffer_storage_multisample_coverage_ext(gl::uint_t renderbuffer, gl::sizei_t coverageSamples, gl::sizei_t colorSamples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void named_renderbuffer_storage_multisample_ext(gl::uint_t renderbuffer, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_1d_ext(gl::uint_t program, gl::int_t location, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_1dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_1f_ext(gl::uint_t program, gl::int_t location, gl::float_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_1fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_1i_ext(gl::uint_t program, gl::int_t location, gl::int_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_1iv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_1ui_ext(gl::uint_t program, gl::int_t location, gl::uint_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_1uiv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_2d_ext(gl::uint_t program, gl::int_t location, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_2dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_2f_ext(gl::uint_t program, gl::int_t location, gl::float_t v0, gl::float_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_2fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_2i_ext(gl::uint_t program, gl::int_t location, gl::int_t v0, gl::int_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_2iv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_2ui_ext(gl::uint_t program, gl::int_t location, gl::uint_t v0, gl::uint_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_2uiv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_3d_ext(gl::uint_t program, gl::int_t location, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_3dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_3f_ext(gl::uint_t program, gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_3fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_3i_ext(gl::uint_t program, gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_3iv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_3ui_ext(gl::uint_t program, gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_3uiv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_4d_ext(gl::uint_t program, gl::int_t location, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_4dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_4f_ext(gl::uint_t program, gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2, gl::float_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_4fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_4i_ext(gl::uint_t program, gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2, gl::int_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_4iv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_4ui_ext(gl::uint_t program, gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2, gl::uint_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_4uiv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_2dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_2fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_2x_3dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_2x_3fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_2x_4dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_2x_4fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_3dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_3fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_3x_2dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_3x_2fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_3x_4dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_3x_4fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_4dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_4fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_4x_2dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_4x_2fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_4x_3dv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void program_uniform_matrix_4x_3fv_ext(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void push_client_attrib_default_ext(gl::bitmask<client_attrib_flags_t> mask);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_buffer_ext(gl::uint_t texture, texture_target_t target, gl::enum_t internalformat, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_buffer_range_ext(gl::uint_t texture, texture_target_t target, gl::enum_t internalformat, gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_image_1dext(gl::uint_t texture, texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_image_2dext(gl::uint_t texture, texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_image_3dext(gl::uint_t texture, texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_page_commitment_ext(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t resident);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_parameter_iiv_ext(gl::uint_t texture, texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_parameter_iuiv_ext(gl::uint_t texture, texture_target_t target, texture_parameter_name_t pname, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_parameterf_ext(gl::uint_t texture, texture_target_t target, texture_parameter_name_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_parameterfv_ext(gl::uint_t texture, texture_target_t target, texture_parameter_name_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_parameteri_ext(gl::uint_t texture, texture_target_t target, texture_parameter_name_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_parameteriv_ext(gl::uint_t texture, texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_renderbuffer_ext(gl::uint_t texture, texture_target_t target, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_storage_2d_multisample_ext(gl::uint_t texture, texture_target_t target, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_storage_3d_multisample_ext(gl::uint_t texture, gl::enum_t target, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_sub_image_1dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_sub_image_2dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_sub_image_3dext(gl::uint_t texture, texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    gl::boolean_t unmap_named_buffer_ext(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_bind_vertex_buffer_ext(gl::uint_t vaobj, gl::uint_t bindingindex, gl::uint_t buffer, gl::intptr_t offset, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_color_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_edge_flag_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_fog_coord_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, fog_coordinate_pointer_type_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_index_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, index_pointer_type_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_multi_tex_coord_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::enum_t texunit, gl::int_t size, tex_coord_pointer_type_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_normal_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, normal_pointer_type_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_secondary_color_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_tex_coord_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::int_t size, tex_coord_pointer_type_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_attrib_binding_ext(gl::uint_t vaobj, gl::uint_t attribindex, gl::uint_t bindingindex);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_attrib_divisor_ext(gl::uint_t vaobj, gl::uint_t index, gl::uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_attrib_format_ext(gl::uint_t vaobj, gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::boolean_t normalized, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_attrib_i_format_ext(gl::uint_t vaobj, gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_attrib_i_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::uint_t index, gl::int_t size, gl::enum_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_attrib_l_format_ext(gl::uint_t vaobj, gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_attrib_l_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::uint_t index, gl::int_t size, gl::enum_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_attrib_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::uint_t index, gl::int_t size, vertex_attrib_pointer_type_t type, gl::boolean_t normalized, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_binding_divisor_ext(gl::uint_t vaobj, gl::uint_t bindingindex, gl::uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    */
    void vertex_array_vertex_offset_ext(gl::uint_t vaobj, gl::uint_t buffer, gl::int_t size, vertex_pointer_type_t type, gl::sizei_t stride, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_instanced_arrays (gles2)
    *  - GL_EXT_draw_instanced (gles2,gl)
    */
    void draw_arrays_instanced_ext(primitive_type_t mode, gl::int_t start, gl::sizei_t count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_instanced_arrays (gles2)
    *  - GL_EXT_draw_instanced (gles2,gl)
    */
    void draw_elements_instanced_ext(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_NV_primitive_restart (gl)
    */
    void primitive_restart_index_nv(gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_NV_primitive_restart (gl)
    */
    void primitive_restart_nv();

   /**
    * Required by extensions:
    *  - GL_ARB_program_interface_query (glcore,gl)
    */
    void get_program_interfaceiv(gl::uint_t program, gl::enum_t programInterface, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_program_interface_query (glcore,gl)
    */
    gl::uint_t get_program_resource_index(gl::uint_t program, gl::enum_t programInterface, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_program_interface_query (glcore,gl)
    */
    gl::int_t get_program_resource_location(gl::uint_t program, gl::enum_t programInterface, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_program_interface_query (glcore,gl)
    */
    gl::int_t get_program_resource_location_index(gl::uint_t program, gl::enum_t programInterface, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_program_interface_query (glcore,gl)
    */
    void get_program_resource_name(gl::uint_t program, gl::enum_t programInterface, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_program_interface_query (glcore,gl)
    */
    void get_program_resourceiv(gl::uint_t program, gl::enum_t programInterface, gl::uint_t index, gl::sizei_t propCount, const  gl::enum_t * props, gl::sizei_t bufSize, gl::sizei_t * length, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_storage_buffer_object (glcore,gl)
    */
    void shader_storage_block_binding(gl::uint_t program, gl::uint_t storageBlockIndex, gl::uint_t storageBlockBinding);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    gl::boolean_t are_programs_resident_nv(gl::sizei_t n, const  gl::uint_t * programs, gl::boolean_t * residences);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void bind_program_nv(gl::enum_t target, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void delete_programs_nv(gl::sizei_t n, const  gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void execute_program_nv(gl::enum_t target, gl::uint_t id, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void gen_programs_nv(gl::sizei_t n, gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_program_parameterdv_nv(gl::enum_t target, gl::uint_t index, gl::enum_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_program_parameterfv_nv(gl::enum_t target, gl::uint_t index, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_program_string_nv(gl::uint_t id, gl::enum_t pname, gl::ubyte_t * program);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_programiv_nv(gl::uint_t id, get_programiv_p_name_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_track_matrixiv_nv(gl::enum_t target, gl::uint_t address, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_vertex_attrib_pointerv_nv(gl::uint_t index, vertex_attrib_pointer_property_arb_t pname, void ** pointer);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_vertex_attribdv_nv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_vertex_attribfv_nv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void get_vertex_attribiv_nv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    gl::boolean_t is_program_nv(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void load_program_nv(gl::enum_t target, gl::uint_t id, gl::sizei_t len, const  gl::ubyte_t * program);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void program_parameter_4d_nv(gl::enum_t target, gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void program_parameter_4dv_nv(gl::enum_t target, gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void program_parameter_4f_nv(gl::enum_t target, gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void program_parameter_4fv_nv(gl::enum_t target, gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void program_parameters_4dv_nv(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void program_parameters_4fv_nv(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void request_resident_programs_nv(gl::sizei_t n, const  gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void track_matrix_nv(gl::enum_t target, gl::uint_t address, gl::enum_t matrix, gl::enum_t transform);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_1d_nv(gl::uint_t index, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_1dv_nv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_1f_nv(gl::uint_t index, gl::float_t x);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_1fv_nv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_1s_nv(gl::uint_t index, gl::short_t x);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_1sv_nv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_2d_nv(gl::uint_t index, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_2dv_nv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_2f_nv(gl::uint_t index, gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_2fv_nv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_2s_nv(gl::uint_t index, gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_2sv_nv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_3d_nv(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_3dv_nv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_3f_nv(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_3fv_nv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_3s_nv(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_3sv_nv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_4d_nv(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_4dv_nv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_4f_nv(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_4fv_nv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_4s_nv(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_4sv_nv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_4ub_nv(gl::uint_t index, gl::ubyte_t x, gl::ubyte_t y, gl::ubyte_t z, gl::ubyte_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_4ubv_nv(gl::uint_t index, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attrib_pointer_nv(gl::uint_t index, gl::int_t fsize, vertex_attrib_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_1dv_nv(gl::uint_t index, gl::sizei_t count, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_1fv_nv(gl::uint_t index, gl::sizei_t count, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_1sv_nv(gl::uint_t index, gl::sizei_t count, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_2dv_nv(gl::uint_t index, gl::sizei_t count, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_2fv_nv(gl::uint_t index, gl::sizei_t count, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_2sv_nv(gl::uint_t index, gl::sizei_t count, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_3dv_nv(gl::uint_t index, gl::sizei_t count, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_3fv_nv(gl::uint_t index, gl::sizei_t count, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_3sv_nv(gl::uint_t index, gl::sizei_t count, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_4dv_nv(gl::uint_t index, gl::sizei_t count, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_4fv_nv(gl::uint_t index, gl::sizei_t count, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_4sv_nv(gl::uint_t index, gl::sizei_t count, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program (gl)
    */
    void vertex_attribs_4ubv_nv(gl::uint_t index, gl::sizei_t count, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_object (gl)
    */
    gl::boolean_t are_textures_resident_ext(gl::sizei_t n, const  gl::uint_t * textures, gl::boolean_t * residences);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_object (gl)
    */
    void bind_texture_ext(texture_target_t target, gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_object (gl)
    */
    void delete_textures_ext(gl::sizei_t n, const  gl::uint_t * textures);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_object (gl)
    */
    void gen_textures_ext(gl::sizei_t n, gl::uint_t * textures);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_object (gl)
    */
    gl::boolean_t is_texture_ext(gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_object (gl)
    */
    void prioritize_textures_ext(gl::sizei_t n, const  gl::uint_t * textures, const  gl::clampf_t * priorities);

   /**
    * Required by extensions:
    *  - GL_NVX_conditional_render (gl)
    */
    void begin_conditional_render_nvx(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_NVX_conditional_render (gl)
    */
    void end_conditional_render_nvx();

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void begin_vertex_shader_ext();

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    gl::uint_t bind_light_parameter_ext(light_name_t light, light_parameter_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    gl::uint_t bind_material_parameter_ext(material_face_t face, material_parameter_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    gl::uint_t bind_parameter_ext(gl::enum_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    gl::uint_t bind_tex_gen_parameter_ext(texture_unit_t unit, texture_coord_name_t coord, texture_gen_parameter_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    gl::uint_t bind_texture_unit_parameter_ext(texture_unit_t unit, gl::enum_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void bind_vertex_shader_ext(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void delete_vertex_shader_ext(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void disable_variant_client_state_ext(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void enable_variant_client_state_ext(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void end_vertex_shader_ext();

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void extract_component_ext(gl::uint_t res, gl::uint_t src, gl::uint_t num);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    gl::uint_t gen_symbols_ext(gl::enum_t datatype, gl::enum_t storagetype, gl::enum_t range, gl::uint_t components);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    gl::uint_t gen_vertex_shaders_ext(gl::uint_t range);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_invariant_booleanv_ext(gl::uint_t id, gl::enum_t value, gl::boolean_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_invariant_floatv_ext(gl::uint_t id, gl::enum_t value, gl::float_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_invariant_integerv_ext(gl::uint_t id, gl::enum_t value, gl::int_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_local_constant_booleanv_ext(gl::uint_t id, gl::enum_t value, gl::boolean_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_local_constant_floatv_ext(gl::uint_t id, gl::enum_t value, gl::float_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_local_constant_integerv_ext(gl::uint_t id, gl::enum_t value, gl::int_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_variant_booleanv_ext(gl::uint_t id, gl::enum_t value, gl::boolean_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_variant_floatv_ext(gl::uint_t id, gl::enum_t value, gl::float_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_variant_integerv_ext(gl::uint_t id, gl::enum_t value, gl::int_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void get_variant_pointerv_ext(gl::uint_t id, gl::enum_t value, void ** data);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void insert_component_ext(gl::uint_t res, gl::uint_t src, gl::uint_t num);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    gl::boolean_t is_variant_enabled_ext(gl::uint_t id, gl::enum_t cap);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void set_invariant_ext(gl::uint_t id, gl::enum_t type, const  void * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void set_local_constant_ext(gl::uint_t id, gl::enum_t type, const  void * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void shader_op_1ext(gl::enum_t op, gl::uint_t res, gl::uint_t arg1);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void shader_op_2ext(gl::enum_t op, gl::uint_t res, gl::uint_t arg1, gl::uint_t arg2);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void shader_op_3ext(gl::enum_t op, gl::uint_t res, gl::uint_t arg1, gl::uint_t arg2, gl::uint_t arg3);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void swizzle_ext(gl::uint_t res, gl::uint_t in, gl::enum_t outX, gl::enum_t outY, gl::enum_t outZ, gl::enum_t outW);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variant_pointer_ext(gl::uint_t id, gl::enum_t type, gl::uint_t stride, const  void * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variantbv_ext(gl::uint_t id, const  gl::byte_t * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variantdv_ext(gl::uint_t id, const  gl::double_t * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variantfv_ext(gl::uint_t id, const  gl::float_t * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variantiv_ext(gl::uint_t id, const  gl::int_t * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variantsv_ext(gl::uint_t id, const  gl::short_t * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variantubv_ext(gl::uint_t id, const  gl::ubyte_t * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variantuiv_ext(gl::uint_t id, const  gl::uint_t * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void variantusv_ext(gl::uint_t id, const  gl::ushort_t * addr);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_shader (gl)
    */
    void write_mask_ext(gl::uint_t res, gl::uint_t in, gl::enum_t outX, gl::enum_t outY, gl::enum_t outZ, gl::enum_t outW);

   /**
    * Required by extensions:
    *  - GL_ARB_copy_buffer (glcore,gl)
    */
    void copy_buffer_sub_data(gl::enum_t readTarget, gl::enum_t writeTarget, gl::intptr_t readOffset, gl::intptr_t writeOffset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_func_separate (gl)
    */
    void blend_func_separate_ext(blend_func_separate_parameter_ext_t sfactorRGB, blend_func_separate_parameter_ext_t dfactorRGB, blend_func_separate_parameter_ext_t sfactorAlpha, blend_func_separate_parameter_ext_t dfactorAlpha);

   /**
    * Required by extensions:
    *  - GL_APPLE_object_purgeable (gl)
    */
    void get_object_parameteriv_apple(gl::enum_t objectType, gl::uint_t name, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_APPLE_object_purgeable (gl)
    */
    gl::enum_t object_purgeable_apple(gl::enum_t objectType, gl::uint_t name, gl::enum_t option);

   /**
    * Required by extensions:
    *  - GL_APPLE_object_purgeable (gl)
    */
    gl::enum_t object_unpurgeable_apple(gl::enum_t objectType, gl::uint_t name, gl::enum_t option);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void delete_fences_apple(gl::sizei_t n, const  gl::uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void finish_fence_apple(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void finish_object_apple(gl::enum_t object, gl::int_t name);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void gen_fences_apple(gl::sizei_t n, gl::uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t is_fence_apple(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void set_fence_apple(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t test_fence_apple(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t test_object_apple(gl::enum_t object, gl::uint_t name);

   /**
    * Required by extensions:
    *  - GL_ARB_buffer_storage (glcore,gl)
    */
    void buffer_storage(gl::enum_t target, gl::sizeiptr_t size, const  void * data, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_EXT_multisample (gl)
    */
    void sample_mask_ext(gl::clampf_t value, gl::boolean_t invert);

   /**
    * Required by extensions:
    *  - GL_EXT_multisample (gl)
    */
    void sample_pattern_ext(gl::enum_t pattern);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void disable_vertex_attrib_apple(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void enable_vertex_attrib_apple(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    gl::boolean_t is_vertex_attrib_enabled_apple(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_1d_apple(gl::uint_t index, gl::uint_t size, gl::double_t u1, gl::double_t u2, gl::int_t stride, gl::int_t order, const  gl::double_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_1f_apple(gl::uint_t index, gl::uint_t size, gl::float_t u1, gl::float_t u2, gl::int_t stride, gl::int_t order, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_2d_apple(gl::uint_t index, gl::uint_t size, gl::double_t u1, gl::double_t u2, gl::int_t ustride, gl::int_t uorder, gl::double_t v1, gl::double_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::double_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_2f_apple(gl::uint_t index, gl::uint_t size, gl::float_t u1, gl::float_t u2, gl::int_t ustride, gl::int_t uorder, gl::float_t v1, gl::float_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void begin_query_arb(gl::enum_t target, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void delete_queries_arb(gl::sizei_t n, const  gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void end_query_arb(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void gen_queries_arb(gl::sizei_t n, gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_query_objectiv_arb(gl::uint_t id, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_query_objectuiv_arb(gl::uint_t id, gl::enum_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_queryiv_arb(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    gl::boolean_t is_query_arb(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_multi_bind (glcore,gl)
    */
    void bind_buffers_base(gl::enum_t target, gl::uint_t first, gl::sizei_t count, const  gl::uint_t * buffers);

   /**
    * Required by extensions:
    *  - GL_ARB_multi_bind (glcore,gl)
    */
    void bind_buffers_range(gl::enum_t target, gl::uint_t first, gl::sizei_t count, const  gl::uint_t * buffers, const  gl::intptr_t * offsets, const  gl::sizeiptr_t * sizes);

   /**
    * Required by extensions:
    *  - GL_ARB_multi_bind (glcore,gl)
    */
    void bind_image_textures(gl::uint_t first, gl::sizei_t count, const  gl::uint_t * textures);

   /**
    * Required by extensions:
    *  - GL_ARB_multi_bind (glcore,gl)
    */
    void bind_samplers(gl::uint_t first, gl::sizei_t count, const  gl::uint_t * samplers);

   /**
    * Required by extensions:
    *  - GL_ARB_multi_bind (glcore,gl)
    */
    void bind_textures(gl::uint_t first, gl::sizei_t count, const  gl::uint_t * textures);

   /**
    * Required by extensions:
    *  - GL_ARB_multi_bind (glcore,gl)
    */
    void bind_vertex_buffers(gl::uint_t first, gl::sizei_t count, const  gl::uint_t * buffers, const  gl::intptr_t * offsets, const  gl::sizei_t * strides);

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,gl,glcore)
    */
    gl::enum_t get_graphics_reset_status();

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,gl,glcore)
    */
    void getn_uniformfv(gl::uint_t program, gl::int_t location, gl::sizei_t bufSize, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,gl,glcore)
    */
    void getn_uniformiv(gl::uint_t program, gl::int_t location, gl::sizei_t bufSize, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,gl,glcore)
    */
    void getn_uniformuiv(gl::uint_t program, gl::int_t location, gl::sizei_t bufSize, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_KHR_robustness (gles2,gl,glcore)
    */
    void readn_pixels(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * data);

   /**
    * Required by extensions:
    *  - GL_SGI_color_table (gl)
    */
    void color_table_parameterfv_sgi(color_table_target_sgi_t target, color_table_parameter_p_name_sgi_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGI_color_table (gl)
    */
    void color_table_parameteriv_sgi(color_table_target_sgi_t target, color_table_parameter_p_name_sgi_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGI_color_table (gl)
    */
    void color_table_sgi(color_table_target_sgi_t target, gl::enum_t internalformat, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * table);

   /**
    * Required by extensions:
    *  - GL_SGI_color_table (gl)
    */
    void copy_color_table_sgi(color_table_target_sgi_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_SGI_color_table (gl)
    */
    void get_color_table_parameterfv_sgi(color_table_target_sgi_t target, get_color_table_parameter_p_name_sgi_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGI_color_table (gl)
    */
    void get_color_table_parameteriv_sgi(color_table_target_sgi_t target, get_color_table_parameter_p_name_sgi_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGI_color_table (gl)
    */
    void get_color_table_sgi(color_table_target_sgi_t target, pixel_format_t format, pixel_type_t type, void * table);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void get_vertex_attrib_li_64v_nv(gl::uint_t index, gl::enum_t pname, gl::int64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void get_vertex_attrib_lui_64v_nv(gl::uint_t index, gl::enum_t pname, gl::uint64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l1i_64nv(gl::uint_t index, gl::int64EXT_t x);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l1i_64v_nv(gl::uint_t index, const  gl::int64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l1ui_64nv(gl::uint_t index, gl::uint64EXT_t x);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l1ui_64v_nv(gl::uint_t index, const  gl::uint64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l2i_64nv(gl::uint_t index, gl::int64EXT_t x, gl::int64EXT_t y);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l2i_64v_nv(gl::uint_t index, const  gl::int64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l2ui_64nv(gl::uint_t index, gl::uint64EXT_t x, gl::uint64EXT_t y);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l2ui_64v_nv(gl::uint_t index, const  gl::uint64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l3i_64nv(gl::uint_t index, gl::int64EXT_t x, gl::int64EXT_t y, gl::int64EXT_t z);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l3i_64v_nv(gl::uint_t index, const  gl::int64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l3ui_64nv(gl::uint_t index, gl::uint64EXT_t x, gl::uint64EXT_t y, gl::uint64EXT_t z);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l3ui_64v_nv(gl::uint_t index, const  gl::uint64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l4i_64nv(gl::uint_t index, gl::int64EXT_t x, gl::int64EXT_t y, gl::int64EXT_t z, gl::int64EXT_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l4i_64v_nv(gl::uint_t index, const  gl::int64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l4ui_64nv(gl::uint_t index, gl::uint64EXT_t x, gl::uint64EXT_t y, gl::uint64EXT_t z, gl::uint64EXT_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l4ui_64v_nv(gl::uint_t index, const  gl::uint64EXT_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_attrib_integer_64bit (gl)
    */
    void vertex_attrib_l_format_nv(gl::uint_t index, gl::int_t size, gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_SGIX_tag_sample_buffer (gl)
    */
    void tag_sample_buffer_sgix();

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void load_transpose_matrixd_arb(const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void load_transpose_matrixf_arb(const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void mult_transpose_matrixd_arb(const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void mult_transpose_matrixf_arb(const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_provoking_vertex (glcore,gl)
    */
    void provoking_vertex(gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void bind_frag_data_location_ext(gl::uint_t program, gl::uint_t color, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    gl::int_t get_frag_data_location_ext(gl::uint_t program, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void get_uniformuiv_ext(gl::uint_t program, gl::int_t location, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_1ui_ext(gl::int_t location, gl::uint_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_1uiv_ext(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_2ui_ext(gl::int_t location, gl::uint_t v0, gl::uint_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_2uiv_ext(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_3ui_ext(gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_3uiv_ext(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_4ui_ext(gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2, gl::uint_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_4uiv_ext(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_geometry_program4 (gl)
    */
    void framebuffer_texture_face_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, texture_target_t face);

   /**
    * Required by extensions:
    *  - GL_NV_geometry_program4 (gl)
    */
    void program_vertex_limit_nv(gl::enum_t target, gl::int_t limit);

   /**
    * Required by extensions:
    *  - GL_AMD_debug_output (gl)
    */
    void debug_message_callback_amd(gl::DEBUGPROCAMD_t callback, void * userParam);

   /**
    * Required by extensions:
    *  - GL_AMD_debug_output (gl)
    */
    void debug_message_enable_amd(gl::enum_t category, gl::enum_t severity, gl::sizei_t count, const  gl::uint_t * ids, gl::boolean_t enabled);

   /**
    * Required by extensions:
    *  - GL_AMD_debug_output (gl)
    */
    void debug_message_insert_amd(gl::enum_t category, gl::enum_t severity, gl::uint_t id, gl::sizei_t length, const  gl::char_t * buf);

   /**
    * Required by extensions:
    *  - GL_AMD_debug_output (gl)
    */
    gl::uint_t get_debug_message_log_amd(gl::uint_t count, gl::sizei_t bufsize, gl::enum_t * categories, gl::uint_t * severities, gl::uint_t * ids, gl::sizei_t * lengths, gl::char_t * message);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coord_pointer_ext(fog_pointer_type_ext_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordd_ext(gl::double_t coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coorddv_ext(const  gl::double_t * coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordf_ext(gl::float_t coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordfv_ext(const  gl::float_t * coord);

   /**
    * Required by extensions:
    *  - GL_ARB_multisample (gl)
    */
    void sample_coverage_arb(gl::float_t value, gl::boolean_t invert);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void get_buffer_parameterui_64v_nv(gl::enum_t target, gl::enum_t pname, gl::uint64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void get_integerui_64v_nv(gl::enum_t value, gl::uint64EXT_t * result);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void get_named_buffer_parameterui_64v_nv(gl::uint_t buffer, gl::enum_t pname, gl::uint64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    gl::boolean_t is_buffer_resident_nv(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    gl::boolean_t is_named_buffer_resident_nv(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void make_buffer_non_resident_nv(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void make_buffer_resident_nv(gl::enum_t target, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void make_named_buffer_non_resident_nv(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void make_named_buffer_resident_nv(gl::uint_t buffer, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void program_uniformui_64nv(gl::uint_t program, gl::int_t location, gl::uint64EXT_t value);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void program_uniformui_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void uniformui_64nv(gl::int_t location, gl::uint64EXT_t value);

   /**
    * Required by extensions:
    *  - GL_NV_shader_buffer_load (gl)
    */
    void uniformui_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_buffer_range (glcore,gl)
    */
    void tex_buffer_range(gl::enum_t target, gl::enum_t internalformat, gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_EXT_color_subtable (gl)
    */
    void color_sub_table_ext(gl::enum_t target, gl::sizei_t start, gl::sizei_t count, pixel_format_t format, pixel_type_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_EXT_color_subtable (gl)
    */
    void copy_color_sub_table_ext(gl::enum_t target, gl::sizei_t start, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_equation_separate (gl)
    */
    void blend_equation_separate_ext(blend_equation_mode_ext_t modeRGB, blend_equation_mode_ext_t modeAlpha);

   /**
    * Required by extensions:
    *  - GL_SGIX_polynomial_ffd (gl)
    */
    void deform_sgix(gl::bitmask<ffd_mask_sgix_flags_t> mask);

   /**
    * Required by extensions:
    *  - GL_SGIX_polynomial_ffd (gl)
    */
    void deformation_map_3d_sgix(ffd_target_sgix_t target, gl::double_t u1, gl::double_t u2, gl::int_t ustride, gl::int_t uorder, gl::double_t v1, gl::double_t v2, gl::int_t vstride, gl::int_t vorder, gl::double_t w1, gl::double_t w2, gl::int_t wstride, gl::int_t worder, const  gl::double_t * points);

   /**
    * Required by extensions:
    *  - GL_SGIX_polynomial_ffd (gl)
    */
    void deformation_map_3f_sgix(ffd_target_sgix_t target, gl::float_t u1, gl::float_t u2, gl::int_t ustride, gl::int_t uorder, gl::float_t v1, gl::float_t v2, gl::int_t vstride, gl::int_t vorder, gl::float_t w1, gl::float_t w2, gl::int_t wstride, gl::int_t worder, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_SGIX_polynomial_ffd (gl)
    */
    void load_identity_deformation_map_sgix(gl::bitmask<ffd_mask_sgix_flags_t> mask);

   /**
    * Required by extensions:
    *  - GL_NV_framebuffer_mixed_samples (gl)
    */
    void coverage_modulation_nv(gl::enum_t components);

   /**
    * Required by extensions:
    *  - GL_NV_framebuffer_mixed_samples (gl)
    */
    void coverage_modulation_table_nv(gl::sizei_t n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_framebuffer_mixed_samples (gl)
    */
    void get_coverage_modulation_table_nv(gl::sizei_t bufsize, gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUNX_constant_data (gl)
    */
    void finish_texture_sunx();

   /**
    * Required by extensions:
    *  - GL_EXT_provoking_vertex (gl)
    */
    void provoking_vertex_ext(gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_ARB_point_parameters (gl)
    */
    void point_parameterf_arb(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_point_parameters (gl)
    */
    void point_parameterfv_arb(gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_clear_texture (glcore,gl)
    */
    void clear_tex_image(gl::uint_t texture, gl::int_t level, gl::enum_t format, gl::enum_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_clear_texture (glcore,gl)
    */
    void clear_tex_sub_image(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::enum_t format, gl::enum_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_image_load_store (glcore,gl)
    */
    void bind_image_texture(gl::uint_t unit, gl::uint_t texture, gl::int_t level, gl::boolean_t layered, gl::int_t layer, gl::enum_t access, gl::enum_t format);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_image_load_store (glcore,gl)
    */
    void memory_barrier(gl::bitfield_t barriers);

   /**
    * Required by extensions:
    *  - GL_ARB_sparse_texture (glcore,gl)
    */
    void tex_page_commitment_arb(gl::enum_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t resident);

   /**
    * Required by extensions:
    *  - GL_PGI_misc_hints (gl)
    */
    void hint_pgi(gl::enum_t target, gl::int_t mode);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_atomic_counters (glcore,gl)
    */
    void get_active_atomic_counter_bufferiv(gl::uint_t program, gl::uint_t bufferIndex, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_index_material (gl)
    */
    void index_material_ext(material_face_t face, gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_ATI_map_object_buffer (gl)
    */
    void * map_object_buffer_ati(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ATI_map_object_buffer (gl)
    */
    void unmap_object_buffer_ati(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_NV_copy_image (gl)
    */
    void copy_image_sub_data_nv(gl::uint_t srcName, gl::enum_t srcTarget, gl::int_t srcLevel, gl::int_t srcX, gl::int_t srcY, gl::int_t srcZ, gl::uint_t dstName, gl::enum_t dstTarget, gl::int_t dstLevel, gl::int_t dstX, gl::int_t dstY, gl::int_t dstZ, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth);

   /**
    * Required by extensions:
    *  - GL_ARB_uniform_buffer_object (glcore,gl)
    */
    void get_active_uniform_block_name(gl::uint_t program, gl::uint_t uniformBlockIndex, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * uniformBlockName);

   /**
    * Required by extensions:
    *  - GL_ARB_uniform_buffer_object (glcore,gl)
    */
    void get_active_uniform_blockiv(gl::uint_t program, gl::uint_t uniformBlockIndex, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_uniform_buffer_object (glcore,gl)
    */
    void get_active_uniform_name(gl::uint_t program, gl::uint_t uniformIndex, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * uniformName);

   /**
    * Required by extensions:
    *  - GL_ARB_uniform_buffer_object (glcore,gl)
    */
    void get_active_uniformsiv(gl::uint_t program, gl::sizei_t uniformCount, const  gl::uint_t * uniformIndices, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_uniform_buffer_object (glcore,gl)
    */
    gl::uint_t get_uniform_block_index(gl::uint_t program, const  gl::char_t * uniformBlockName);

   /**
    * Required by extensions:
    *  - GL_ARB_uniform_buffer_object (glcore,gl)
    */
    void get_uniform_indices(gl::uint_t program, gl::sizei_t uniformCount, const  gl::char_t ** uniformNames, gl::uint_t * uniformIndices);

   /**
    * Required by extensions:
    *  - GL_ARB_uniform_buffer_object (glcore,gl)
    */
    void uniform_block_binding(gl::uint_t program, gl::uint_t uniformBlockIndex, gl::uint_t uniformBlockBinding);

   /**
    * Required by extensions:
    *  - GL_NV_blend_equation_advanced (gles2,gl)
    */
    void blend_barrier_nv();

   /**
    * Required by extensions:
    *  - GL_NV_blend_equation_advanced (gles2,gl)
    */
    void blend_parameteri_nv(gl::enum_t pname, gl::int_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_perturb_normal (gl)
    */
    void texture_normal_ext(gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void begin_transform_feedback_ext(gl::enum_t primitiveMode);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_base_ext(gl::enum_t target, gl::uint_t index, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_offset_ext(gl::enum_t target, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_range_ext(gl::enum_t target, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void end_transform_feedback_ext();

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void get_transform_feedback_varying_ext(gl::uint_t program, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::sizei_t * size, gl::enum_t * type, gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void transform_feedback_varyings_ext(gl::uint_t program, gl::sizei_t count, const  gl::char_t ** varyings, gl::enum_t bufferMode);

   /**
    * Required by extensions:
    *  - GL_SGIS_sharpen_texture (gl)
    */
    void get_sharpen_tex_func_sgis(texture_target_t target, gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_SGIS_sharpen_texture (gl)
    */
    void sharpen_tex_func_sgis(texture_target_t target, gl::sizei_t n, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback2 (glcore,gl)
    */
    void bind_transform_feedback(gl::enum_t target, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback2 (glcore,gl)
    */
    void delete_transform_feedbacks(gl::sizei_t n, const  gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback2 (glcore,gl)
    */
    void draw_transform_feedback(primitive_type_t mode, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback2 (glcore,gl)
    */
    void gen_transform_feedbacks(gl::sizei_t n, gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback2 (glcore,gl)
    */
    gl::boolean_t is_transform_feedback(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback2 (glcore,gl)
    */
    void pause_transform_feedback();

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback2 (glcore,gl)
    */
    void resume_transform_feedback();

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback3 (glcore,gl)
    */
    void begin_query_indexed(gl::enum_t target, gl::uint_t index, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback3 (glcore,gl)
    */
    void draw_transform_feedback_stream(primitive_type_t mode, gl::uint_t id, gl::uint_t stream);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback3 (glcore,gl)
    */
    void end_query_indexed(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback3 (glcore,gl)
    */
    void get_query_indexediv(gl::enum_t target, gl::uint_t index, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    gl::enum_t get_graphics_reset_status_arb();

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_color_table_arb(gl::enum_t target, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * table);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_compressed_tex_image_arb(gl::enum_t target, gl::int_t lod, gl::sizei_t bufSize, void * img);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_convolution_filter_arb(gl::enum_t target, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * image);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_histogram_arb(gl::enum_t target, gl::boolean_t reset, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * values);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_mapdv_arb(gl::enum_t target, gl::enum_t query, gl::sizei_t bufSize, gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_mapfv_arb(gl::enum_t target, gl::enum_t query, gl::sizei_t bufSize, gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_mapiv_arb(gl::enum_t target, gl::enum_t query, gl::sizei_t bufSize, gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_minmax_arb(gl::enum_t target, gl::boolean_t reset, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * values);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_pixel_mapfv_arb(gl::enum_t map, gl::sizei_t bufSize, gl::float_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_pixel_mapuiv_arb(gl::enum_t map, gl::sizei_t bufSize, gl::uint_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_pixel_mapusv_arb(gl::enum_t map, gl::sizei_t bufSize, gl::ushort_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_polygon_stipple_arb(gl::sizei_t bufSize, gl::ubyte_t * pattern);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_separable_filter_arb(gl::enum_t target, gl::enum_t format, gl::enum_t type, gl::sizei_t rowBufSize, void * row, gl::sizei_t columnBufSize, void * column, void * span);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_tex_image_arb(gl::enum_t target, gl::int_t level, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * img);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_uniformdv_arb(gl::uint_t program, gl::int_t location, gl::sizei_t bufSize, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_uniformfv_arb(gl::uint_t program, gl::int_t location, gl::sizei_t bufSize, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_uniformiv_arb(gl::uint_t program, gl::int_t location, gl::sizei_t bufSize, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void getn_uniformuiv_arb(gl::uint_t program, gl::int_t location, gl::sizei_t bufSize, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_robustness (glcore,gl)
    */
    void readn_pixels_arb(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * data);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gles2,gl)
    */
    void insert_event_marker_ext(gl::sizei_t length, const  gl::char_t * marker);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gles2,gl)
    */
    void pop_group_marker_ext();

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gles2,gl)
    */
    void push_group_marker_ext(gl::sizei_t length, const  gl::char_t * marker);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void bind_program_arb(gl::enum_t target, gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void delete_programs_arb(gl::sizei_t n, const  gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void gen_programs_arb(gl::sizei_t n, gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void get_program_env_parameterdv_arb(gl::enum_t target, gl::uint_t index, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void get_program_env_parameterfv_arb(gl::enum_t target, gl::uint_t index, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void get_program_local_parameterdv_arb(gl::enum_t target, gl::uint_t index, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void get_program_local_parameterfv_arb(gl::enum_t target, gl::uint_t index, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void get_program_string_arb(gl::enum_t target, gl::enum_t pname, void * string);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void get_programiv_arb(gl::enum_t target, get_programiv_p_name_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    gl::boolean_t is_program_arb(gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_env_parameter_4d_arb(gl::enum_t target, gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_env_parameter_4dv_arb(gl::enum_t target, gl::uint_t index, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_env_parameter_4f_arb(gl::enum_t target, gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_env_parameter_4fv_arb(gl::enum_t target, gl::uint_t index, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_local_parameter_4d_arb(gl::enum_t target, gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_local_parameter_4dv_arb(gl::enum_t target, gl::uint_t index, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_local_parameter_4f_arb(gl::enum_t target, gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_local_parameter_4fv_arb(gl::enum_t target, gl::uint_t index, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_fragment_program (gl)
    */
    void program_string_arb(gl::enum_t target, gl::enum_t format, gl::sizei_t len, const  void * string);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void get_program_env_parameter_iiv_nv(gl::enum_t target, gl::uint_t index, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void get_program_env_parameter_iuiv_nv(gl::enum_t target, gl::uint_t index, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void get_program_local_parameter_iiv_nv(gl::enum_t target, gl::uint_t index, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void get_program_local_parameter_iuiv_nv(gl::enum_t target, gl::uint_t index, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_env_parameter_i4i_nv(gl::enum_t target, gl::uint_t index, gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_env_parameter_i4iv_nv(gl::enum_t target, gl::uint_t index, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_env_parameter_i4ui_nv(gl::enum_t target, gl::uint_t index, gl::uint_t x, gl::uint_t y, gl::uint_t z, gl::uint_t w);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_env_parameter_i4uiv_nv(gl::enum_t target, gl::uint_t index, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_env_parameters_i4iv_nv(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_env_parameters_i4uiv_nv(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_local_parameter_i4i_nv(gl::enum_t target, gl::uint_t index, gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_local_parameter_i4iv_nv(gl::enum_t target, gl::uint_t index, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_local_parameter_i4ui_nv(gl::enum_t target, gl::uint_t index, gl::uint_t x, gl::uint_t y, gl::uint_t z, gl::uint_t w);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_local_parameter_i4uiv_nv(gl::enum_t target, gl::uint_t index, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_local_parameters_i4iv_nv(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program4 (gl)
    */
    void program_local_parameters_i4uiv_nv(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program5 (gl)
    */
    void get_program_subroutine_parameteruiv_nv(gl::enum_t target, gl::uint_t index, gl::uint_t * param);

   /**
    * Required by extensions:
    *  - GL_NV_gpu_program5 (gl)
    */
    void program_subroutine_parametersuiv_nv(gl::enum_t target, gl::sizei_t count, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_INTEL_parallel_arrays (gl)
    */
    void color_pointerv_intel(gl::int_t size, vertex_pointer_type_t type, const  void ** pointer);

   /**
    * Required by extensions:
    *  - GL_INTEL_parallel_arrays (gl)
    */
    void normal_pointerv_intel(normal_pointer_type_t type, const  void ** pointer);

   /**
    * Required by extensions:
    *  - GL_INTEL_parallel_arrays (gl)
    */
    void tex_coord_pointerv_intel(gl::int_t size, vertex_pointer_type_t type, const  void ** pointer);

   /**
    * Required by extensions:
    *  - GL_INTEL_parallel_arrays (gl)
    */
    void vertex_pointerv_intel(gl::int_t size, vertex_pointer_type_t type, const  void ** pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_pixel_transform (gl)
    */
    void get_pixel_transform_parameterfv_ext(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_pixel_transform (gl)
    */
    void get_pixel_transform_parameteriv_ext(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_pixel_transform (gl)
    */
    void pixel_transform_parameterf_ext(gl::enum_t target, gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_pixel_transform (gl)
    */
    void pixel_transform_parameterfv_ext(gl::enum_t target, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_pixel_transform (gl)
    */
    void pixel_transform_parameteri_ext(gl::enum_t target, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_pixel_transform (gl)
    */
    void pixel_transform_parameteriv_ext(gl::enum_t target, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_timer_query (glcore,gl)
    */
    void get_query_objecti_64v(gl::uint_t id, gl::enum_t pname, gl::int64_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_timer_query (glcore,gl)
    */
    void get_query_objectui_64v(gl::uint_t id, gl::enum_t pname, gl::uint64_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_timer_query (glcore,gl)
    */
    void query_counter(gl::uint_t id, gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void alpha_fragment_op_1ati(gl::enum_t op, gl::uint_t dst, gl::uint_t dstMod, gl::uint_t arg1, gl::uint_t arg1Rep, gl::uint_t arg1Mod);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void alpha_fragment_op_2ati(gl::enum_t op, gl::uint_t dst, gl::uint_t dstMod, gl::uint_t arg1, gl::uint_t arg1Rep, gl::uint_t arg1Mod, gl::uint_t arg2, gl::uint_t arg2Rep, gl::uint_t arg2Mod);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void alpha_fragment_op_3ati(gl::enum_t op, gl::uint_t dst, gl::uint_t dstMod, gl::uint_t arg1, gl::uint_t arg1Rep, gl::uint_t arg1Mod, gl::uint_t arg2, gl::uint_t arg2Rep, gl::uint_t arg2Mod, gl::uint_t arg3, gl::uint_t arg3Rep, gl::uint_t arg3Mod);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void begin_fragment_shader_ati();

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void bind_fragment_shader_ati(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void color_fragment_op_1ati(gl::enum_t op, gl::uint_t dst, gl::uint_t dstMask, gl::uint_t dstMod, gl::uint_t arg1, gl::uint_t arg1Rep, gl::uint_t arg1Mod);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void color_fragment_op_2ati(gl::enum_t op, gl::uint_t dst, gl::uint_t dstMask, gl::uint_t dstMod, gl::uint_t arg1, gl::uint_t arg1Rep, gl::uint_t arg1Mod, gl::uint_t arg2, gl::uint_t arg2Rep, gl::uint_t arg2Mod);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void color_fragment_op_3ati(gl::enum_t op, gl::uint_t dst, gl::uint_t dstMask, gl::uint_t dstMod, gl::uint_t arg1, gl::uint_t arg1Rep, gl::uint_t arg1Mod, gl::uint_t arg2, gl::uint_t arg2Rep, gl::uint_t arg2Mod, gl::uint_t arg3, gl::uint_t arg3Rep, gl::uint_t arg3Mod);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void delete_fragment_shader_ati(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void end_fragment_shader_ati();

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    gl::uint_t gen_fragment_shaders_ati(gl::uint_t range);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void pass_tex_coord_ati(gl::uint_t dst, gl::uint_t coord, gl::enum_t swizzle);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void sample_map_ati(gl::uint_t dst, gl::uint_t interp, gl::enum_t swizzle);

   /**
    * Required by extensions:
    *  - GL_ATI_fragment_shader (gl)
    */
    void set_fragment_shader_constant_ati(gl::uint_t dst, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_array_object (glcore,gl)
    */
    void bind_vertex_array(gl::uint_t array);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_array_object (glcore,gl)
    */
    void delete_vertex_arrays(gl::sizei_t n, const  gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_array_object (glcore,gl)
    */
    void gen_vertex_arrays(gl::sizei_t n, gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_array_object (glcore,gl)
    */
    gl::boolean_t is_vertex_array(gl::uint_t array);

   /**
    * Required by extensions:
    *  - GL_NV_internalformat_sample_query (gles2,gl)
    */
    void get_internalformat_sampleiv_nv(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t samples, gl::enum_t pname, gl::sizei_t bufSize, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIS_texture_color_mask (gl)
    */
    void texture_color_mask_sgis(gl::boolean_t red, gl::boolean_t green, gl::boolean_t blue, gl::boolean_t alpha);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void bind_buffer_arb(buffer_target_arb_t target, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void buffer_data_arb(buffer_target_arb_t target, gl::sizeiptrARB_t size, const  void * data, buffer_usage_arb_t usage);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void buffer_sub_data_arb(buffer_target_arb_t target, gl::intptrARB_t offset, gl::sizeiptrARB_t size, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void delete_buffers_arb(gl::sizei_t n, const  gl::uint_t * buffers);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void gen_buffers_arb(gl::sizei_t n, gl::uint_t * buffers);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_parameteriv_arb(buffer_target_arb_t target, buffer_p_name_arb_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_pointerv_arb(buffer_target_arb_t target, gl::enum_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_sub_data_arb(buffer_target_arb_t target, gl::intptrARB_t offset, gl::sizeiptrARB_t size, void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    gl::boolean_t is_buffer_arb(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void * map_buffer_arb(buffer_target_arb_t target, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    gl::boolean_t unmap_buffer_arb(buffer_target_arb_t target);

   /**
    * Required by extensions:
    *  - GL_SUN_triangle_list (gl)
    */
    void replacement_code_pointer_sun(gl::enum_t type, gl::sizei_t stride, const  void ** pointer);

   /**
    * Required by extensions:
    *  - GL_SUN_triangle_list (gl)
    */
    void replacement_codeub_sun(gl::ubyte_t code);

   /**
    * Required by extensions:
    *  - GL_SUN_triangle_list (gl)
    */
    void replacement_codeubv_sun(const  gl::ubyte_t * code);

   /**
    * Required by extensions:
    *  - GL_SUN_triangle_list (gl)
    */
    void replacement_codeui_sun(gl::uint_t code);

   /**
    * Required by extensions:
    *  - GL_SUN_triangle_list (gl)
    */
    void replacement_codeuiv_sun(const  gl::uint_t * code);

   /**
    * Required by extensions:
    *  - GL_SUN_triangle_list (gl)
    */
    void replacement_codeus_sun(gl::ushort_t code);

   /**
    * Required by extensions:
    *  - GL_SUN_triangle_list (gl)
    */
    void replacement_codeusv_sun(const  gl::ushort_t * code);

   /**
    * Required by extensions:
    *  - GL_ARB_map_buffer_range (glcore,gl)
    */
    void flush_mapped_buffer_range(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t length);

   /**
    * Required by extensions:
    *  - GL_ARB_map_buffer_range (glcore,gl)
    */
    void * map_buffer_range(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t length, gl::bitfield_t access);

   /**
    * Required by extensions:
    *  - GL_ARB_get_texture_sub_image (glcore,gl)
    */
    void get_compressed_texture_sub_image(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::sizei_t bufSize, void * pixels);

   /**
    * Required by extensions:
    *  - GL_ARB_get_texture_sub_image (glcore,gl)
    */
    void get_texture_sub_image(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void convolution_filter_1dext(convolution_target_ext_t target, gl::enum_t internalformat, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * image);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void convolution_filter_2dext(convolution_target_ext_t target, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * image);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void convolution_parameterf_ext(convolution_target_ext_t target, convolution_parameter_ext_t pname, gl::float_t params);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void convolution_parameterfv_ext(convolution_target_ext_t target, convolution_parameter_ext_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void convolution_parameteri_ext(convolution_target_ext_t target, convolution_parameter_ext_t pname, gl::int_t params);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void convolution_parameteriv_ext(convolution_target_ext_t target, convolution_parameter_ext_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void copy_convolution_filter_1dext(convolution_target_ext_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void copy_convolution_filter_2dext(convolution_target_ext_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void get_convolution_filter_ext(convolution_target_ext_t target, pixel_format_t format, pixel_type_t type, void * image);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void get_convolution_parameterfv_ext(convolution_target_ext_t target, convolution_parameter_ext_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void get_convolution_parameteriv_ext(convolution_target_ext_t target, convolution_parameter_ext_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void get_separable_filter_ext(separable_target_ext_t target, pixel_format_t format, pixel_type_t type, void * row, void * column, void * span);

   /**
    * Required by extensions:
    *  - GL_EXT_convolution (gl)
    */
    void separable_filter_2dext(separable_target_ext_t target, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * row, const  void * column);

   /**
    * Required by extensions:
    *  - GL_ATI_separate_stencil (gl)
    */
    void stencil_func_separate_ati(stencil_function_t frontfunc, stencil_function_t backfunc, gl::int_t ref, gl::uint_t mask);

   /**
    * Required by extensions:
    *  - GL_ATI_separate_stencil (gl)
    */
    void stencil_op_separate_ati(stencil_face_direction_t face, stencil_op_t sfail, stencil_op_t dpfail, stencil_op_t dppass);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_array_range (gl)
    */
    void flush_vertex_array_range_nv();

   /**
    * Required by extensions:
    *  - GL_NV_vertex_array_range (gl)
    */
    void vertex_array_range_nv(gl::sizei_t length, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_color_material_sgix(material_face_t face, material_parameter_t mode);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_light_modelf_sgix(fragment_light_model_parameter_sgix_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_light_modelfv_sgix(fragment_light_model_parameter_sgix_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_light_modeli_sgix(fragment_light_model_parameter_sgix_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_light_modeliv_sgix(fragment_light_model_parameter_sgix_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_lightf_sgix(gl::enum_t light, gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_lightfv_sgix(gl::enum_t light, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_lighti_sgix(gl::enum_t light, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_lightiv_sgix(gl::enum_t light, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_materialf_sgix(material_face_t face, material_parameter_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_materialfv_sgix(material_face_t face, material_parameter_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_materiali_sgix(material_face_t face, material_parameter_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void fragment_materialiv_sgix(material_face_t face, material_parameter_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void get_fragment_lightfv_sgix(gl::enum_t light, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void get_fragment_lightiv_sgix(gl::enum_t light, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void get_fragment_materialfv_sgix(material_face_t face, material_parameter_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void get_fragment_materialiv_sgix(material_face_t face, material_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_fragment_lighting (gl)
    */
    void light_envi_sgix(light_env_parameter_sgix_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_geometry_shader4 (gl)
    */
    void framebuffer_texture_arb(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_ARB_geometry_shader4 (gl)
    */
    void framebuffer_texture_face_arb(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, texture_target_t face);

   /**
    * Required by extensions:
    *  - GL_ARB_geometry_shader4 (gl)
    */
    void framebuffer_texture_layer_arb(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, gl::int_t layer);

   /**
    * Required by extensions:
    *  - GL_ARB_geometry_shader4 (gl)
    */
    void program_parameteri_arb(gl::uint_t program, gl::enum_t pname, gl::int_t value);

   /**
    * Required by extensions:
    *  - GL_APPLE_texture_range (gl)
    */
    void get_tex_parameter_pointerv_apple(gl::enum_t target, gl::enum_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_APPLE_texture_range (gl)
    */
    void texture_range_apple(gl::enum_t target, gl::sizei_t length, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_NV_framebuffer_multisample_coverage (gl)
    */
    void renderbuffer_storage_multisample_coverage_nv(renderbuffer_target_t target, gl::sizei_t coverageSamples, gl::sizei_t colorSamples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_paletted_texture (gl)
    */
    void color_table_ext(gl::enum_t target, gl::enum_t internalFormat, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * table);

   /**
    * Required by extensions:
    *  - GL_EXT_paletted_texture (gl)
    */
    void get_color_table_ext(gl::enum_t target, pixel_format_t format, pixel_type_t type, void * data);

   /**
    * Required by extensions:
    *  - GL_EXT_paletted_texture (gl)
    */
    void get_color_table_parameterfv_ext(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_paletted_texture (gl)
    */
    void get_color_table_parameteriv_ext(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_buffer_object (gl)
    */
    void tex_buffer_arb(texture_target_t target, gl::enum_t internalformat, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ATI_pn_triangles (gl)
    */
    void pn_trianglesf_ati(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_ATI_pn_triangles (gl)
    */
    void pn_trianglesi_ati(gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void buffer_address_range_nv(gl::enum_t pname, gl::uint_t index, gl::uint64EXT_t address, gl::sizeiptr_t length);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void color_format_nv(gl::int_t size, gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void edge_flag_format_nv(gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void fog_coord_format_nv(gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void get_integerui_64i_v_nv(gl::enum_t value, gl::uint_t index, gl::uint64EXT_t * result);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void index_format_nv(gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void normal_format_nv(gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void secondary_color_format_nv(gl::int_t size, gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void tex_coord_format_nv(gl::int_t size, gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void vertex_attrib_format_nv(gl::uint_t index, gl::int_t size, gl::enum_t type, gl::boolean_t normalized, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void vertex_attrib_i_format_nv(gl::uint_t index, gl::int_t size, gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_buffer_unified_memory (gl)
    */
    void vertex_format_nv(gl::int_t size, gl::enum_t type, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    gl::uint64_t get_image_handle_nv(gl::uint_t texture, gl::int_t level, gl::boolean_t layered, gl::int_t layer, gl::enum_t format);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    gl::uint64_t get_texture_handle_nv(gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    gl::uint64_t get_texture_sampler_handle_nv(gl::uint_t texture, gl::uint_t sampler);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    gl::boolean_t is_image_handle_resident_nv(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    gl::boolean_t is_texture_handle_resident_nv(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void make_image_handle_non_resident_nv(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void make_image_handle_resident_nv(gl::uint64_t handle, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void make_texture_handle_non_resident_nv(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void make_texture_handle_resident_nv(gl::uint64_t handle);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void program_uniform_handleui_64nv(gl::uint_t program, gl::int_t location, gl::uint64_t value);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void program_uniform_handleui_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint64_t * values);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void uniform_handleui_64nv(gl::int_t location, gl::uint64_t value);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_texture (gles2,gl)
    */
    void uniform_handleui_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::uint64_t * value);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void begin_perf_query_intel(gl::uint_t queryHandle);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void create_perf_query_intel(gl::uint_t queryId, gl::uint_t * queryHandle);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void delete_perf_query_intel(gl::uint_t queryHandle);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void end_perf_query_intel(gl::uint_t queryHandle);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_first_perf_query_id_intel(gl::uint_t * queryId);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_next_perf_query_id_intel(gl::uint_t queryId, gl::uint_t * nextQueryId);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_perf_counter_info_intel(gl::uint_t queryId, gl::uint_t counterId, gl::uint_t counterNameLength, gl::char_t * counterName, gl::uint_t counterDescLength, gl::char_t * counterDesc, gl::uint_t * counterOffset, gl::uint_t * counterDataSize, gl::uint_t * counterTypeEnum, gl::uint_t * counterDataTypeEnum, gl::uint64_t * rawCounterMaxValue);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_perf_query_data_intel(gl::uint_t queryHandle, gl::uint_t flags, gl::sizei_t dataSize, void * data, gl::uint_t * bytesWritten);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_perf_query_id_by_name_intel(gl::char_t * queryName, gl::uint_t * queryId);

   /**
    * Required by extensions:
    *  - GL_INTEL_performance_query (gles2,gl)
    */
    void get_perf_query_info_intel(gl::uint_t queryId, gl::uint_t queryNameLength, gl::char_t * queryName, gl::uint_t * dataSize, gl::uint_t * noCounters, gl::uint_t * noInstances, gl::uint_t * capsMask);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void debug_message_callback(gl::DEBUGPROC_t callback, const  void * userParam);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void debug_message_control(gl::enum_t source, gl::enum_t type, gl::enum_t severity, gl::sizei_t count, const  gl::uint_t * ids, gl::boolean_t enabled);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void debug_message_insert(gl::enum_t source, gl::enum_t type, gl::uint_t id, gl::enum_t severity, gl::sizei_t length, const  gl::char_t * buf);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    gl::uint_t get_debug_message_log(gl::uint_t count, gl::sizei_t bufSize, gl::enum_t * sources, gl::enum_t * types, gl::uint_t * ids, gl::enum_t * severities, gl::sizei_t * lengths, gl::char_t * messageLog);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void get_object_label(gl::enum_t identifier, gl::uint_t name, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void get_object_ptr_label(const  void * ptr, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void object_label(gl::enum_t identifier, gl::uint_t name, gl::sizei_t length, const  gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void object_ptr_label(const  void * ptr, gl::sizei_t length, const  gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void pop_debug_group();

   /**
    * Required by extensions:
    *  - GL_KHR_debug (gles2,gl,glcore)
    */
    void push_debug_group(gl::enum_t source, gl::uint_t id, gl::sizei_t length, const  gl::char_t * message);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_attrib_array_object (gl)
    */
    void get_vertex_attrib_array_objectfv_ati(gl::uint_t index, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_attrib_array_object (gl)
    */
    void get_vertex_attrib_array_objectiv_ati(gl::uint_t index, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_attrib_array_object (gl)
    */
    void vertex_attrib_array_object_ati(gl::uint_t index, gl::int_t size, vertex_attrib_pointer_type_t type, gl::boolean_t normalized, gl::sizei_t stride, gl::uint_t buffer, gl::uint_t offset);

   /**
    * Required by extensions:
    *  - GL_ARB_get_program_binary (glcore,gl)
    */
    void get_program_binary(gl::uint_t program, gl::sizei_t bufSize, gl::sizei_t * length, gl::enum_t * binaryFormat, void * binary);

   /**
    * Required by extensions:
    *  - GL_ARB_get_program_binary (glcore,gl)
    */
    void program_binary(gl::uint_t program, gl::enum_t binaryFormat, const  void * binary, gl::sizei_t length);

   /**
    * Required by extensions:
    *  - GL_ARB_get_program_binary (glcore,gl)
    */
    void program_parameteri(gl::uint_t program, gl::enum_t pname, gl::int_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback_instanced (glcore,gl)
    */
    void draw_transform_feedback_instanced(primitive_type_t mode, gl::uint_t id, gl::sizei_t instancecount);

   /**
    * Required by extensions:
    *  - GL_ARB_transform_feedback_instanced (glcore,gl)
    */
    void draw_transform_feedback_stream_instanced(primitive_type_t mode, gl::uint_t id, gl::uint_t stream, gl::sizei_t instancecount);

   /**
    * Required by extensions:
    *  - GL_EXT_index_func (gl)
    */
    void index_func_ext(gl::enum_t func, gl::clampf_t ref);

   /**
    * Required by extensions:
    *  - GL_SGIX_async (gl)
    */
    void async_marker_sgix(gl::uint_t marker);

   /**
    * Required by extensions:
    *  - GL_SGIX_async (gl)
    */
    void delete_async_markers_sgix(gl::uint_t marker, gl::sizei_t range);

   /**
    * Required by extensions:
    *  - GL_SGIX_async (gl)
    */
    gl::int_t finish_async_sgix(gl::uint_t * markerp);

   /**
    * Required by extensions:
    *  - GL_SGIX_async (gl)
    */
    gl::uint_t gen_async_markers_sgix(gl::sizei_t range);

   /**
    * Required by extensions:
    *  - GL_SGIX_async (gl)
    */
    gl::boolean_t is_async_marker_sgix(gl::uint_t marker);

   /**
    * Required by extensions:
    *  - GL_SGIX_async (gl)
    */
    gl::int_t poll_async_sgix(gl::uint_t * markerp);

   /**
    * Required by extensions:
    *  - GL_SGIX_flush_raster (gl)
    */
    void flush_raster_sgix();

   /**
    * Required by extensions:
    *  - GL_EXT_geometry_shader4 (gl)
    */
    void program_parameteri_ext(gl::uint_t program, gl::enum_t pname, gl::int_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_light_texture (gl)
    */
    void apply_texture_ext(gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_light_texture (gl)
    */
    void texture_light_ext(gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_EXT_light_texture (gl)
    */
    void texture_material_ext(material_face_t face, material_parameter_t mode);

   /**
    * Required by extensions:
    *  - GL_SGIS_multisample (gl)
    */
    void sample_mask_sgis(gl::clampf_t value, gl::boolean_t invert);

   /**
    * Required by extensions:
    *  - GL_SGIS_multisample (gl)
    */
    void sample_pattern_sgis(sample_pattern_sgis_t pattern);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void bind_framebuffer_ext(framebuffer_target_t target, gl::uint_t framebuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void bind_renderbuffer_ext(renderbuffer_target_t target, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    gl::enum_t check_framebuffer_status_ext(framebuffer_target_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void delete_framebuffers_ext(gl::sizei_t n, const  gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void delete_renderbuffers_ext(gl::sizei_t n, const  gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void framebuffer_renderbuffer_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, renderbuffer_target_t renderbuffertarget, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void framebuffer_texture_1dext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void framebuffer_texture_2dext(framebuffer_target_t target, framebuffer_attachment_t attachment, framebuffer_texture_target_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void framebuffer_texture_3dext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t textarget, gl::uint_t texture, gl::int_t level, gl::int_t zoffset);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void gen_framebuffers_ext(gl::sizei_t n, gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void gen_renderbuffers_ext(gl::sizei_t n, gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void generate_mipmap_ext(mipmap_target_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void get_framebuffer_attachment_parameteriv_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void get_renderbuffer_parameteriv_ext(renderbuffer_target_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    gl::boolean_t is_framebuffer_ext(gl::uint_t framebuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    gl::boolean_t is_renderbuffer_ext(gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void renderbuffer_storage_ext(renderbuffer_target_t target, internal_format_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_indirect (glcore,gl)
    */
    void draw_arrays_indirect(primitive_type_t mode, const  void * indirect);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_indirect (glcore,gl)
    */
    void draw_elements_indirect(primitive_type_t mode, gl::enum_t type, const  void * indirect);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_multi_draw_indirect_count (gl)
    */
    void multi_draw_arrays_indirect_bindless_count_nv(gl::enum_t mode, const  void * indirect, gl::sizei_t drawCount, gl::sizei_t maxDrawCount, gl::sizei_t stride, gl::int_t vertexBufferCount);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_multi_draw_indirect_count (gl)
    */
    void multi_draw_elements_indirect_bindless_count_nv(gl::enum_t mode, gl::enum_t type, const  void * indirect, gl::sizei_t drawCount, gl::sizei_t maxDrawCount, gl::sizei_t stride, gl::int_t vertexBufferCount);

   /**
    * Required by extensions:
    *  - GL_NV_geometry_program4 (gl)
    *  - GL_EXT_texture_array (gl)
    */
    void framebuffer_texture_layer_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, gl::int_t layer);

   /**
    * Required by extensions:
    *  - GL_ARB_instanced_arrays (gl)
    */
    void vertex_attrib_divisor_arb(gl::uint_t index, gl::uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    gl::int_t get_uniform_buffer_size_ext(gl::uint_t program, gl::int_t location);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    gl::intptr_t get_uniform_offset_ext(gl::uint_t program, gl::int_t location);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    void uniform_buffer_ext(gl::uint_t program, gl::int_t location, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_weighting (gl)
    */
    void vertex_weight_pointer_ext(gl::int_t size, gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_weighting (gl)
    */
    void vertex_weightf_ext(gl::float_t weight);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_weighting (gl)
    */
    void vertex_weightfv_ext(const  gl::float_t * weight);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void disable_vertex_attrib_array_arb(gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void enable_vertex_attrib_array_arb(gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attrib_pointerv_arb(gl::uint_t index, vertex_attrib_pointer_property_arb_t pname, void ** pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribdv_arb(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribfv_arb(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribiv_arb(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1d_arb(gl::uint_t index, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1dv_arb(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1f_arb(gl::uint_t index, gl::float_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1fv_arb(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1s_arb(gl::uint_t index, gl::short_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1sv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2d_arb(gl::uint_t index, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2dv_arb(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2f_arb(gl::uint_t index, gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2fv_arb(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2s_arb(gl::uint_t index, gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2sv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3d_arb(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3dv_arb(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3f_arb(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3fv_arb(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3s_arb(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3sv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nbv_arb(gl::uint_t index, const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_niv_arb(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nsv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nub_arb(gl::uint_t index, gl::ubyte_t x, gl::ubyte_t y, gl::ubyte_t z, gl::ubyte_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nubv_arb(gl::uint_t index, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nuiv_arb(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nusv_arb(gl::uint_t index, const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4bv_arb(gl::uint_t index, const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4d_arb(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4dv_arb(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4f_arb(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4fv_arb(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4iv_arb(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4s_arb(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4sv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4ubv_arb(gl::uint_t index, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4uiv_arb(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4usv_arb(gl::uint_t index, const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_pointer_arb(gl::uint_t index, gl::int_t size, vertex_attrib_pointer_type_t type, gl::boolean_t normalized, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_ES2_compatibility (glcore,gl)
    */
    void clear_depthf(gl::float_t d);

   /**
    * Required by extensions:
    *  - GL_ARB_ES2_compatibility (glcore,gl)
    */
    void depth_rangef(gl::float_t n, gl::float_t f);

   /**
    * Required by extensions:
    *  - GL_ARB_ES2_compatibility (glcore,gl)
    */
    void get_shader_precision_format(shader_type_t shadertype, precision_type_t precisiontype, gl::int_t * range, gl::int_t * precision);

   /**
    * Required by extensions:
    *  - GL_ARB_ES2_compatibility (glcore,gl)
    */
    void release_shader_compiler();

   /**
    * Required by extensions:
    *  - GL_ARB_ES2_compatibility (glcore,gl)
    */
    void shader_binary(gl::sizei_t count, const  gl::uint_t * shaders, gl::enum_t binaryformat, const  void * binary, gl::sizei_t length);

   /**
    * Required by extensions:
    *  - GL_SGIX_sprite (gl)
    */
    void sprite_parameterf_sgix(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_sprite (gl)
    */
    void sprite_parameterfv_sgix(gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_sprite (gl)
    */
    void sprite_parameteri_sgix(gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_sprite (gl)
    */
    void sprite_parameteriv_sgix(gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void combiner_input_nv(gl::enum_t stage, gl::enum_t portion, gl::enum_t variable, gl::enum_t input, gl::enum_t mapping, gl::enum_t componentUsage);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void combiner_output_nv(gl::enum_t stage, gl::enum_t portion, gl::enum_t abOutput, gl::enum_t cdOutput, gl::enum_t sumOutput, gl::enum_t scale, gl::enum_t bias, gl::boolean_t abDotProduct, gl::boolean_t cdDotProduct, gl::boolean_t muxSum);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void combiner_parameterf_nv(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void combiner_parameterfv_nv(gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void combiner_parameteri_nv(gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void combiner_parameteriv_nv(gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void final_combiner_input_nv(gl::enum_t variable, gl::enum_t input, gl::enum_t mapping, gl::enum_t componentUsage);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void get_combiner_input_parameterfv_nv(gl::enum_t stage, gl::enum_t portion, gl::enum_t variable, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void get_combiner_input_parameteriv_nv(gl::enum_t stage, gl::enum_t portion, gl::enum_t variable, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void get_combiner_output_parameterfv_nv(gl::enum_t stage, gl::enum_t portion, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void get_combiner_output_parameteriv_nv(gl::enum_t stage, gl::enum_t portion, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void get_final_combiner_input_parameterfv_nv(gl::enum_t variable, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners (gl)
    */
    void get_final_combiner_input_parameteriv_nv(gl::enum_t variable, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_MESA_resize_buffers (gl)
    */
    void resize_buffers_mesa();

   /**
    * Required by extensions:
    *  - GL_KHR_blend_equation_advanced (gles2,gl)
    */
    void blend_barrier_khr();

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void get_uniformi_64v_nv(gl::uint_t program, gl::int_t location, gl::int64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_1i_64nv(gl::uint_t program, gl::int_t location, gl::int64EXT_t x);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_1i_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_1ui_64nv(gl::uint_t program, gl::int_t location, gl::uint64EXT_t x);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_1ui_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_2i_64nv(gl::uint_t program, gl::int_t location, gl::int64EXT_t x, gl::int64EXT_t y);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_2i_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_2ui_64nv(gl::uint_t program, gl::int_t location, gl::uint64EXT_t x, gl::uint64EXT_t y);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_2ui_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_3i_64nv(gl::uint_t program, gl::int_t location, gl::int64EXT_t x, gl::int64EXT_t y, gl::int64EXT_t z);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_3i_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_3ui_64nv(gl::uint_t program, gl::int_t location, gl::uint64EXT_t x, gl::uint64EXT_t y, gl::uint64EXT_t z);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_3ui_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_4i_64nv(gl::uint_t program, gl::int_t location, gl::int64EXT_t x, gl::int64EXT_t y, gl::int64EXT_t z, gl::int64EXT_t w);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_4i_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_4ui_64nv(gl::uint_t program, gl::int_t location, gl::uint64EXT_t x, gl::uint64EXT_t y, gl::uint64EXT_t z, gl::uint64EXT_t w);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void program_uniform_4ui_64v_nv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_1i_64nv(gl::int_t location, gl::int64EXT_t x);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_1i_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::int64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_1ui_64nv(gl::int_t location, gl::uint64EXT_t x);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_1ui_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_2i_64nv(gl::int_t location, gl::int64EXT_t x, gl::int64EXT_t y);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_2i_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::int64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_2ui_64nv(gl::int_t location, gl::uint64EXT_t x, gl::uint64EXT_t y);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_2ui_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_3i_64nv(gl::int_t location, gl::int64EXT_t x, gl::int64EXT_t y, gl::int64EXT_t z);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_3i_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::int64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_3ui_64nv(gl::int_t location, gl::uint64EXT_t x, gl::uint64EXT_t y, gl::uint64EXT_t z);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_3ui_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_4i_64nv(gl::int_t location, gl::int64EXT_t x, gl::int64EXT_t y, gl::int64EXT_t z, gl::int64EXT_t w);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_4i_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::int64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_4ui_64nv(gl::int_t location, gl::uint64EXT_t x, gl::uint64EXT_t y, gl::uint64EXT_t z, gl::uint64EXT_t w);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_gpu_shader5 (gl)
    */
    void uniform_4ui_64v_nv(gl::int_t location, gl::sizei_t count, const  gl::uint64EXT_t * value);

   /**
    * Required by extensions:
    *  - GL_HP_image_transform (gl)
    */
    void get_image_transform_parameterfv_hp(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_HP_image_transform (gl)
    */
    void get_image_transform_parameteriv_hp(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_HP_image_transform (gl)
    */
    void image_transform_parameterf_hp(gl::enum_t target, gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_HP_image_transform (gl)
    */
    void image_transform_parameterfv_hp(gl::enum_t target, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_HP_image_transform (gl)
    */
    void image_transform_parameteri_hp(gl::enum_t target, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_HP_image_transform (gl)
    */
    void image_transform_parameteriv_hp(gl::enum_t target, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void color_3h_nv(gl::halfNV_t red, gl::halfNV_t green, gl::halfNV_t blue);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void color_3hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void color_4h_nv(gl::halfNV_t red, gl::halfNV_t green, gl::halfNV_t blue, gl::halfNV_t alpha);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void color_4hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void fog_coordh_nv(gl::halfNV_t fog);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void fog_coordhv_nv(const  gl::halfNV_t * fog);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void multi_tex_coord_1h_nv(texture_unit_t target, gl::halfNV_t s);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void multi_tex_coord_1hv_nv(texture_unit_t target, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void multi_tex_coord_2h_nv(texture_unit_t target, gl::halfNV_t s, gl::halfNV_t t);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void multi_tex_coord_2hv_nv(texture_unit_t target, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void multi_tex_coord_3h_nv(texture_unit_t target, gl::halfNV_t s, gl::halfNV_t t, gl::halfNV_t r);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void multi_tex_coord_3hv_nv(texture_unit_t target, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void multi_tex_coord_4h_nv(texture_unit_t target, gl::halfNV_t s, gl::halfNV_t t, gl::halfNV_t r, gl::halfNV_t q);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void multi_tex_coord_4hv_nv(texture_unit_t target, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void normal_3h_nv(gl::halfNV_t nx, gl::halfNV_t ny, gl::halfNV_t nz);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void normal_3hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void secondary_color_3h_nv(gl::halfNV_t red, gl::halfNV_t green, gl::halfNV_t blue);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void secondary_color_3hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void tex_coord_1h_nv(gl::halfNV_t s);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void tex_coord_1hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void tex_coord_2h_nv(gl::halfNV_t s, gl::halfNV_t t);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void tex_coord_2hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void tex_coord_3h_nv(gl::halfNV_t s, gl::halfNV_t t, gl::halfNV_t r);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void tex_coord_3hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void tex_coord_4h_nv(gl::halfNV_t s, gl::halfNV_t t, gl::halfNV_t r, gl::halfNV_t q);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void tex_coord_4hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_2h_nv(gl::halfNV_t x, gl::halfNV_t y);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_2hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_3h_nv(gl::halfNV_t x, gl::halfNV_t y, gl::halfNV_t z);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_3hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_4h_nv(gl::halfNV_t x, gl::halfNV_t y, gl::halfNV_t z, gl::halfNV_t w);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_4hv_nv(const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attrib_1h_nv(gl::uint_t index, gl::halfNV_t x);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attrib_1hv_nv(gl::uint_t index, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attrib_2h_nv(gl::uint_t index, gl::halfNV_t x, gl::halfNV_t y);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attrib_2hv_nv(gl::uint_t index, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attrib_3h_nv(gl::uint_t index, gl::halfNV_t x, gl::halfNV_t y, gl::halfNV_t z);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attrib_3hv_nv(gl::uint_t index, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attrib_4h_nv(gl::uint_t index, gl::halfNV_t x, gl::halfNV_t y, gl::halfNV_t z, gl::halfNV_t w);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attrib_4hv_nv(gl::uint_t index, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attribs_1hv_nv(gl::uint_t index, gl::sizei_t n, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attribs_2hv_nv(gl::uint_t index, gl::sizei_t n, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attribs_3hv_nv(gl::uint_t index, gl::sizei_t n, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_attribs_4hv_nv(gl::uint_t index, gl::sizei_t n, const  gl::halfNV_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_weighth_nv(gl::halfNV_t weight);

   /**
    * Required by extensions:
    *  - GL_NV_half_float (gl)
    */
    void vertex_weighthv_nv(const  gl::halfNV_t * weight);

   /**
    * Required by extensions:
    *  - GL_ARB_debug_output (glcore,gl)
    */
    void debug_message_callback_arb(gl::DEBUGPROCARB_t callback, const  void * userParam);

   /**
    * Required by extensions:
    *  - GL_ARB_debug_output (glcore,gl)
    */
    void debug_message_control_arb(gl::enum_t source, gl::enum_t type, gl::enum_t severity, gl::sizei_t count, const  gl::uint_t * ids, gl::boolean_t enabled);

   /**
    * Required by extensions:
    *  - GL_ARB_debug_output (glcore,gl)
    */
    void debug_message_insert_arb(gl::enum_t source, gl::enum_t type, gl::uint_t id, gl::enum_t severity, gl::sizei_t length, const  gl::char_t * buf);

   /**
    * Required by extensions:
    *  - GL_ARB_debug_output (glcore,gl)
    */
    gl::uint_t get_debug_message_log_arb(gl::uint_t count, gl::sizei_t bufSize, gl::enum_t * sources, gl::enum_t * types, gl::uint_t * ids, gl::enum_t * severities, gl::sizei_t * lengths, gl::char_t * messageLog);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_buffer (gles2)
    *  - GL_EXT_texture_buffer_object (gl)
    */
    void tex_buffer_ext(texture_target_t target, gl::enum_t internalformat, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3b_ext(gl::byte_t bx, gl::byte_t by, gl::byte_t bz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3bv_ext(const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3d_ext(gl::double_t bx, gl::double_t by, gl::double_t bz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3dv_ext(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3f_ext(gl::float_t bx, gl::float_t by, gl::float_t bz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3fv_ext(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3i_ext(gl::int_t bx, gl::int_t by, gl::int_t bz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3iv_ext(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3s_ext(gl::short_t bx, gl::short_t by, gl::short_t bz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_3sv_ext(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void binormal_pointer_ext(gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3b_ext(gl::byte_t tx, gl::byte_t ty, gl::byte_t tz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3bv_ext(const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3d_ext(gl::double_t tx, gl::double_t ty, gl::double_t tz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3dv_ext(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3f_ext(gl::float_t tx, gl::float_t ty, gl::float_t tz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3fv_ext(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3i_ext(gl::int_t tx, gl::int_t ty, gl::int_t tz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3iv_ext(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3s_ext(gl::short_t tx, gl::short_t ty, gl::short_t tz);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_3sv_ext(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_coordinate_frame (gl)
    */
    void tangent_pointer_ext(gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_cull_vertex (gl)
    */
    void cull_parameterdv_ext(gl::enum_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_cull_vertex (gl)
    */
    void cull_parameterfv_ext(gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_AMD_gpu_shader_int64 (gl)
    *  - GL_NV_shader_buffer_load (gl)
    */
    void get_uniformui_64v_nv(gl::uint_t program, gl::int_t location, gl::uint64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_AMD_draw_buffers_blend (gl)
    */
    void blend_equation_indexed_amd(gl::uint_t buf, gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_AMD_draw_buffers_blend (gl)
    */
    void blend_equation_separate_indexed_amd(gl::uint_t buf, gl::enum_t modeRGB, gl::enum_t modeAlpha);

   /**
    * Required by extensions:
    *  - GL_AMD_draw_buffers_blend (gl)
    */
    void blend_func_indexed_amd(gl::uint_t buf, gl::enum_t src, gl::enum_t dst);

   /**
    * Required by extensions:
    *  - GL_AMD_draw_buffers_blend (gl)
    */
    void blend_func_separate_indexed_amd(gl::uint_t buf, gl::enum_t srcRGB, gl::enum_t dstRGB, gl::enum_t srcAlpha, gl::enum_t dstAlpha);

   /**
    * Required by extensions:
    *  - GL_SGIX_reference_plane (gl)
    */
    void reference_plane_sgix(const  gl::double_t * equation);

   /**
    * Required by extensions:
    *  - GL_EXT_stencil_two_side (gl)
    */
    void active_stencil_face_ext(stencil_face_direction_t face);

   /**
    * Required by extensions:
    *  - GL_EXT_polygon_offset_clamp (gl)
    */
    void polygon_offset_clamp_ext(gl::float_t factor, gl::float_t units, gl::float_t clamp);

   /**
    * Required by extensions:
    *  - GL_NV_explicit_multisample (gl)
    */
    void get_multisamplefv_nv(gl::enum_t pname, gl::uint_t index, gl::float_t * val);

   /**
    * Required by extensions:
    *  - GL_NV_explicit_multisample (gl)
    */
    void sample_mask_indexed_nv(gl::uint_t index, gl::bitfield_t mask);

   /**
    * Required by extensions:
    *  - GL_NV_explicit_multisample (gl)
    */
    void tex_renderbuffer_nv(texture_target_t target, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_IBM_multimode_draw_arrays (gl)
    */
    void multi_mode_draw_arrays_ibm(const  primitive_type_t * mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount, gl::int_t modestride);

   /**
    * Required by extensions:
    *  - GL_IBM_multimode_draw_arrays (gl)
    */
    void multi_mode_draw_elements_ibm(const  primitive_type_t * mode, const  gl::sizei_t * count, draw_elements_type_t type, const  void ** indices, gl::sizei_t primcount, gl::int_t modestride);

   /**
    * Required by extensions:
    *  - GL_IBM_static_data (gl)
    */
    void flush_static_data_ibm(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_SGIX_framezoom (gl)
    */
    void frame_zoom_sgix(gl::int_t factor);

   /**
    * Required by extensions:
    *  - GL_EXT_compiled_vertex_array (gl)
    */
    void lock_arrays_ext(gl::int_t first, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_EXT_compiled_vertex_array (gl)
    */
    void unlock_arrays_ext();

   /**
    * Required by extensions:
    *  - GL_NV_texture_barrier (gl)
    */
    void texture_barrier_nv();

   /**
    * Required by extensions:
    *  - GL_NV_depth_buffer_float (gl)
    */
    void clear_depthd_nv(gl::double_t depth);

   /**
    * Required by extensions:
    *  - GL_NV_depth_buffer_float (gl)
    */
    void depth_boundsd_nv(gl::double_t zmin, gl::double_t zmax);

   /**
    * Required by extensions:
    *  - GL_NV_depth_buffer_float (gl)
    */
    void depth_ranged_nv(gl::double_t zNear, gl::double_t zFar);

   /**
    * Required by extensions:
    *  - GL_EXT_point_parameters (gl)
    */
    void point_parameterf_ext(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_EXT_point_parameters (gl)
    */
    void point_parameterfv_ext(gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void bind_vertex_array_apple(gl::uint_t array);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void delete_vertex_arrays_apple(gl::sizei_t n, const  gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void gen_vertex_arrays_apple(gl::sizei_t n, gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    gl::boolean_t is_vertex_array_apple(gl::uint_t array);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void color_p3ui(gl::enum_t type, gl::uint_t color);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void color_p3uiv(gl::enum_t type, const  gl::uint_t * color);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void color_p4ui(gl::enum_t type, gl::uint_t color);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void color_p4uiv(gl::enum_t type, const  gl::uint_t * color);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void multi_tex_coord_p1ui(gl::enum_t texture, gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void multi_tex_coord_p1uiv(gl::enum_t texture, gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void multi_tex_coord_p2ui(gl::enum_t texture, gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void multi_tex_coord_p2uiv(gl::enum_t texture, gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void multi_tex_coord_p3ui(gl::enum_t texture, gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void multi_tex_coord_p3uiv(gl::enum_t texture, gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void multi_tex_coord_p4ui(gl::enum_t texture, gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void multi_tex_coord_p4uiv(gl::enum_t texture, gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void normal_p3ui(gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void normal_p3uiv(gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void secondary_color_p3ui(gl::enum_t type, gl::uint_t color);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void secondary_color_p3uiv(gl::enum_t type, const  gl::uint_t * color);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void tex_coord_p1ui(gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void tex_coord_p1uiv(gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void tex_coord_p2ui(gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void tex_coord_p2uiv(gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void tex_coord_p3ui(gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void tex_coord_p3uiv(gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void tex_coord_p4ui(gl::enum_t type, gl::uint_t coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void tex_coord_p4uiv(gl::enum_t type, const  gl::uint_t * coords);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_attrib_p1ui(gl::uint_t index, gl::enum_t type, gl::boolean_t normalized, gl::uint_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_attrib_p1uiv(gl::uint_t index, gl::enum_t type, gl::boolean_t normalized, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_attrib_p2ui(gl::uint_t index, gl::enum_t type, gl::boolean_t normalized, gl::uint_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_attrib_p2uiv(gl::uint_t index, gl::enum_t type, gl::boolean_t normalized, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_attrib_p3ui(gl::uint_t index, gl::enum_t type, gl::boolean_t normalized, gl::uint_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_attrib_p3uiv(gl::uint_t index, gl::enum_t type, gl::boolean_t normalized, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_attrib_p4ui(gl::uint_t index, gl::enum_t type, gl::boolean_t normalized, gl::uint_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_attrib_p4uiv(gl::uint_t index, gl::enum_t type, gl::boolean_t normalized, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_p2ui(gl::enum_t type, gl::uint_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_p2uiv(gl::enum_t type, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_p3ui(gl::enum_t type, gl::uint_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_p3uiv(gl::enum_t type, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_p4ui(gl::enum_t type, gl::uint_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_type_2_10_10_10_rev (glcore,gl)
    */
    void vertex_p4uiv(gl::enum_t type, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    void bind_attrib_location_arb(gl::handleARB_t programObj, gl::uint_t index, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_active_attrib_arb(gl::handleARB_t programObj, gl::uint_t index, gl::sizei_t maxLength, gl::sizei_t * length, gl::int_t * size, attrib_type_t * type, gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    gl::int_t get_attrib_location_arb(gl::handleARB_t programObj, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_SGIS_detail_texture (gl)
    */
    void detail_tex_func_sgis(texture_target_t target, gl::sizei_t n, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_SGIS_detail_texture (gl)
    */
    void get_detail_tex_func_sgis(texture_target_t target, gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_flush_buffer_range (gl)
    */
    void buffer_parameteri_apple(gl::enum_t target, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_APPLE_flush_buffer_range (gl)
    */
    void flush_mapped_buffer_range_apple(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_instanced (gl)
    */
    void draw_arrays_instanced_arb(primitive_type_t mode, gl::int_t first, gl::sizei_t count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_instanced (gl)
    */
    void draw_elements_instanced_arb(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_3DFX_tbuffer (gl)
    */
    void tbuffer_mask_3dfx(gl::uint_t mask);

   /**
    * Required by extensions:
    *  - GL_GREMEDY_frame_terminator (gl)
    */
    void frame_terminator_gremedy();

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void active_program_ext(gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    gl::uint_t create_shader_program_ext(gl::enum_t type, const  gl::char_t * string);

   /**
    * Required by extensions:
    *  - GL_EXT_separate_shader_objects (gles2,gl)
    */
    void use_shader_program_ext(gl::enum_t type, gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_tessellation_shader (glcore,gl)
    */
    void patch_parameterfv(gl::enum_t pname, const  gl::float_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_tessellation_shader (glcore,gl)
    */
    void patch_parameteri(gl::enum_t pname, gl::int_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void color_sub_table(gl::enum_t target, gl::sizei_t start, gl::sizei_t count, pixel_format_t format, pixel_type_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void color_table(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * table);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void color_table_parameterfv(gl::enum_t target, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void color_table_parameteriv(gl::enum_t target, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void convolution_filter_1d(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * image);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void convolution_filter_2d(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * image);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void convolution_parameterf(gl::enum_t target, gl::enum_t pname, gl::float_t params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void convolution_parameterfv(gl::enum_t target, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void convolution_parameteri(gl::enum_t target, gl::enum_t pname, gl::int_t params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void convolution_parameteriv(gl::enum_t target, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void copy_color_sub_table(gl::enum_t target, gl::sizei_t start, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void copy_color_table(gl::enum_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void copy_convolution_filter_1d(gl::enum_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void copy_convolution_filter_2d(gl::enum_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_color_table(gl::enum_t target, pixel_format_t format, pixel_type_t type, void * table);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_color_table_parameterfv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_color_table_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_convolution_filter(gl::enum_t target, pixel_format_t format, pixel_type_t type, void * image);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_convolution_parameterfv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_convolution_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_histogram(gl::enum_t target, gl::boolean_t reset, pixel_format_t format, pixel_type_t type, void * values);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_histogram_parameterfv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_histogram_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_minmax(gl::enum_t target, gl::boolean_t reset, pixel_format_t format, pixel_type_t type, void * values);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_minmax_parameterfv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_minmax_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void get_separable_filter(gl::enum_t target, pixel_format_t format, pixel_type_t type, void * row, void * column, void * span);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void histogram(gl::enum_t target, gl::sizei_t width, gl::enum_t internalformat, gl::boolean_t sink);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void minmax(gl::enum_t target, gl::enum_t internalformat, gl::boolean_t sink);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void reset_histogram(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void reset_minmax(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (glcore,gl)
    */
    void separable_filter_2d(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * row, const  void * column);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void get_vertex_attrib_ldv(gl::uint_t index, gl::enum_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l1d(gl::uint_t index, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l1dv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l2d(gl::uint_t index, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l2dv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l3d(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l3dv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l4d(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l4dv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_attrib_64bit (glcore,gl)
    */
    void vertex_attrib_l_pointer(gl::uint_t index, gl::int_t size, gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void color_mask_indexed_ext(gl::uint_t index, gl::boolean_t r, gl::boolean_t g, gl::boolean_t b, gl::boolean_t a);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (glcore,gl)
    */
    gl::enum_t client_wait_sync(gl::sync_t sync, gl::bitfield_t flags, gl::uint64_t timeout);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (glcore,gl)
    */
    void delete_sync(gl::sync_t sync);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (glcore,gl)
    */
    gl::sync_t fence_sync(gl::enum_t condition, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (glcore,gl)
    */
    void get_integer_64v(gl::enum_t pname, gl::int64_t * data);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (glcore,gl)
    */
    void get_synciv(gl::sync_t sync, gl::enum_t pname, gl::sizei_t bufSize, gl::sizei_t * length, gl::int_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (glcore,gl)
    */
    gl::boolean_t is_sync(gl::sync_t sync);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (glcore,gl)
    */
    void wait_sync(gl::sync_t sync, gl::bitfield_t flags, gl::uint64_t timeout);

   /**
    * Required by extensions:
    *  - GL_INGR_blend_func_separate (gl)
    */
    void blend_func_separate_ingr(blend_func_separate_parameter_ext_t sfactorRGB, blend_func_separate_parameter_ext_t dfactorRGB, blend_func_separate_parameter_ext_t sfactorAlpha, blend_func_separate_parameter_ext_t dfactorAlpha);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void attach_object_arb(gl::handleARB_t containerObj, gl::handleARB_t obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void compile_shader_arb(gl::handleARB_t shaderObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t create_program_object_arb();

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t create_shader_object_arb(gl::enum_t shaderType);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void delete_object_arb(gl::handleARB_t obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void detach_object_arb(gl::handleARB_t containerObj, gl::handleARB_t attachedObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_active_uniform_arb(gl::handleARB_t programObj, gl::uint_t index, gl::sizei_t maxLength, gl::sizei_t * length, gl::int_t * size, uniform_type_t * type, gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_attached_objects_arb(gl::handleARB_t containerObj, gl::sizei_t maxCount, gl::sizei_t * count, gl::handleARB_t * obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t get_handle_arb(gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_info_log_arb(gl::handleARB_t obj, gl::sizei_t maxLength, gl::sizei_t * length, gl::charARB_t * infoLog);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_object_parameterfv_arb(gl::handleARB_t obj, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_object_parameteriv_arb(gl::handleARB_t obj, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_shader_source_arb(gl::handleARB_t obj, gl::sizei_t maxLength, gl::sizei_t * length, gl::charARB_t * source);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::int_t get_uniform_location_arb(gl::handleARB_t programObj, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_uniformfv_arb(gl::handleARB_t programObj, gl::int_t location, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_uniformiv_arb(gl::handleARB_t programObj, gl::int_t location, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void link_program_arb(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void shader_source_arb(gl::handleARB_t shaderObj, gl::sizei_t count, const  gl::charARB_t ** string, const  gl::int_t * length);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1f_arb(gl::int_t location, gl::float_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1fv_arb(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1i_arb(gl::int_t location, gl::int_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1iv_arb(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2f_arb(gl::int_t location, gl::float_t v0, gl::float_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2fv_arb(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2i_arb(gl::int_t location, gl::int_t v0, gl::int_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2iv_arb(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3f_arb(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3fv_arb(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3i_arb(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3iv_arb(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4f_arb(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2, gl::float_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4fv_arb(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4i_arb(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2, gl::int_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4iv_arb(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_2fv_arb(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_3fv_arb(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_4fv_arb(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void use_program_object_arb(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void validate_program_arb(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void bind_framebuffer(framebuffer_target_t target, gl::uint_t framebuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void bind_renderbuffer(renderbuffer_target_t target, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void blit_framebuffer(gl::int_t srcX0, gl::int_t srcY0, gl::int_t srcX1, gl::int_t srcY1, gl::int_t dstX0, gl::int_t dstY0, gl::int_t dstX1, gl::int_t dstY1, gl::bitmask<clear_buffer_flags_t> mask, gl::enum_t filter);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    framebuffer_status_t check_framebuffer_status(framebuffer_target_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void delete_framebuffers(gl::sizei_t n, const  gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void delete_renderbuffers(gl::sizei_t n, const  gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void framebuffer_renderbuffer(framebuffer_target_t target, framebuffer_attachment_t attachment, renderbuffer_target_t renderbuffertarget, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void framebuffer_texture_1d(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void framebuffer_texture_2d(framebuffer_target_t target, framebuffer_attachment_t attachment, framebuffer_texture_target_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void framebuffer_texture_3d(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t textarget, gl::uint_t texture, gl::int_t level, gl::int_t zoffset);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void framebuffer_texture_layer(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, gl::int_t layer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void gen_framebuffers(gl::sizei_t n, gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void gen_renderbuffers(gl::sizei_t n, gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void generate_mipmap(mipmap_target_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void get_framebuffer_attachment_parameteriv(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void get_renderbuffer_parameteriv(renderbuffer_target_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    gl::boolean_t is_framebuffer(gl::uint_t framebuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    gl::boolean_t is_renderbuffer(gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void renderbuffer_storage(renderbuffer_target_t target, internal_format_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (glcore,gl)
    */
    void renderbuffer_storage_multisample(renderbuffer_target_t target, gl::sizei_t samples, internal_format_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_buffers_blend (glcore,gl)
    */
    void blend_equation_separatei_arb(gl::uint_t buf, gl::enum_t modeRGB, gl::enum_t modeAlpha);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_buffers_blend (glcore,gl)
    */
    void blend_equationi_arb(gl::uint_t buf, gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_buffers_blend (glcore,gl)
    */
    void blend_func_separatei_arb(gl::uint_t buf, gl::enum_t srcRGB, gl::enum_t dstRGB, gl::enum_t srcAlpha, gl::enum_t dstAlpha);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_buffers_blend (glcore,gl)
    */
    void blend_funci_arb(gl::uint_t buf, gl::enum_t src, gl::enum_t dst);

   /**
    * Required by extensions:
    *  - GL_AMD_occlusion_query_event (gl)
    */
    void query_object_parameterui_amd(gl::enum_t target, gl::uint_t id, gl::enum_t pname, occlusion_query_event_mask_amd_t param);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void client_active_vertex_stream_ati(gl::enum_t stream);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3b_ati(gl::enum_t stream, gl::byte_t nx, gl::byte_t ny, gl::byte_t nz);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3bv_ati(gl::enum_t stream, const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3d_ati(gl::enum_t stream, gl::double_t nx, gl::double_t ny, gl::double_t nz);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3dv_ati(gl::enum_t stream, const  gl::double_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3f_ati(gl::enum_t stream, gl::float_t nx, gl::float_t ny, gl::float_t nz);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3fv_ati(gl::enum_t stream, const  gl::float_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3i_ati(gl::enum_t stream, gl::int_t nx, gl::int_t ny, gl::int_t nz);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3iv_ati(gl::enum_t stream, const  gl::int_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3s_ati(gl::enum_t stream, gl::short_t nx, gl::short_t ny, gl::short_t nz);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void normal_stream_3sv_ati(gl::enum_t stream, const  gl::short_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_blend_envf_ati(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_blend_envi_ati(gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_1d_ati(gl::enum_t stream, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_1dv_ati(gl::enum_t stream, const  gl::double_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_1f_ati(gl::enum_t stream, gl::float_t x);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_1fv_ati(gl::enum_t stream, const  gl::float_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_1i_ati(gl::enum_t stream, gl::int_t x);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_1iv_ati(gl::enum_t stream, const  gl::int_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_1s_ati(gl::enum_t stream, gl::short_t x);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_1sv_ati(gl::enum_t stream, const  gl::short_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_2d_ati(gl::enum_t stream, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_2dv_ati(gl::enum_t stream, const  gl::double_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_2f_ati(gl::enum_t stream, gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_2fv_ati(gl::enum_t stream, const  gl::float_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_2i_ati(gl::enum_t stream, gl::int_t x, gl::int_t y);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_2iv_ati(gl::enum_t stream, const  gl::int_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_2s_ati(gl::enum_t stream, gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_2sv_ati(gl::enum_t stream, const  gl::short_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_3d_ati(gl::enum_t stream, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_3dv_ati(gl::enum_t stream, const  gl::double_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_3f_ati(gl::enum_t stream, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_3fv_ati(gl::enum_t stream, const  gl::float_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_3i_ati(gl::enum_t stream, gl::int_t x, gl::int_t y, gl::int_t z);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_3iv_ati(gl::enum_t stream, const  gl::int_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_3s_ati(gl::enum_t stream, gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_3sv_ati(gl::enum_t stream, const  gl::short_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_4d_ati(gl::enum_t stream, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_4dv_ati(gl::enum_t stream, const  gl::double_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_4f_ati(gl::enum_t stream, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_4fv_ati(gl::enum_t stream, const  gl::float_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_4i_ati(gl::enum_t stream, gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_4iv_ati(gl::enum_t stream, const  gl::int_t * coords);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_4s_ati(gl::enum_t stream, gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_streams (gl)
    */
    void vertex_stream_4sv_ati(gl::enum_t stream, const  gl::short_t * coords);

   /**
    * Required by extensions:
    *  - GL_SGIX_pixel_texture (gl)
    */
    void pixel_tex_gen_sgix(gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_2d_mesa(gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_2dv_mesa(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_2f_mesa(gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_2fv_mesa(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_2i_mesa(gl::int_t x, gl::int_t y);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_2iv_mesa(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_2s_mesa(gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_2sv_mesa(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_3d_mesa(gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_3dv_mesa(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_3f_mesa(gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_3fv_mesa(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_3i_mesa(gl::int_t x, gl::int_t y, gl::int_t z);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_3iv_mesa(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_3s_mesa(gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_3sv_mesa(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_4d_mesa(gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_4dv_mesa(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_4f_mesa(gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_4fv_mesa(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_4i_mesa(gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_4iv_mesa(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_4s_mesa(gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

   /**
    * Required by extensions:
    *  - GL_MESA_window_pos (gl)
    */
    void window_pos_4sv_mesa(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ATI_envmap_bumpmap (gl)
    */
    void get_tex_bump_parameterfv_ati(gl::enum_t pname, gl::float_t * param);

   /**
    * Required by extensions:
    *  - GL_ATI_envmap_bumpmap (gl)
    */
    void get_tex_bump_parameteriv_ati(gl::enum_t pname, gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ATI_envmap_bumpmap (gl)
    */
    void tex_bump_parameterfv_ati(gl::enum_t pname, const  gl::float_t * param);

   /**
    * Required by extensions:
    *  - GL_ATI_envmap_bumpmap (gl)
    */
    void tex_bump_parameteriv_ati(gl::enum_t pname, const  gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_INTEL_map_texture (gl)
    */
    void * map_texture_2dintel(gl::uint_t texture, gl::int_t level, gl::bitfield_t access, gl::int_t * stride, gl::enum_t * layout);

   /**
    * Required by extensions:
    *  - GL_INTEL_map_texture (gl)
    */
    void sync_texture_intel(gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_INTEL_map_texture (gl)
    */
    void unmap_texture_2dintel(gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_storage_1dext(gl::uint_t texture, gl::enum_t target, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_storage_2dext(gl::uint_t texture, gl::enum_t target, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_storage (gles2,gles1)
    *  - GL_EXT_direct_state_access (gl)
    */
    void texture_storage_3dext(gl::uint_t texture, gl::enum_t target, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void bind_texture_unit(gl::uint_t unit, gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void blit_named_framebuffer(gl::uint_t readFramebuffer, gl::uint_t drawFramebuffer, gl::int_t srcX0, gl::int_t srcY0, gl::int_t srcX1, gl::int_t srcY1, gl::int_t dstX0, gl::int_t dstY0, gl::int_t dstX1, gl::int_t dstY1, gl::bitfield_t mask, gl::enum_t filter);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    gl::enum_t check_named_framebuffer_status(gl::uint_t framebuffer, gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void clear_named_buffer_data(gl::uint_t buffer, gl::enum_t internalformat, gl::enum_t format, gl::enum_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void clear_named_buffer_sub_data(gl::uint_t buffer, gl::enum_t internalformat, gl::intptr_t offset, gl::sizeiptr_t size, gl::enum_t format, gl::enum_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void clear_named_framebufferfi(gl::uint_t framebuffer, gl::enum_t buffer, const  gl::float_t depth, gl::int_t stencil);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void clear_named_framebufferfv(gl::uint_t framebuffer, gl::enum_t buffer, gl::int_t drawbuffer, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void clear_named_framebufferiv(gl::uint_t framebuffer, gl::enum_t buffer, gl::int_t drawbuffer, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void clear_named_framebufferuiv(gl::uint_t framebuffer, gl::enum_t buffer, gl::int_t drawbuffer, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void compressed_texture_sub_image_1d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, gl::enum_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void compressed_texture_sub_image_2d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, gl::enum_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void compressed_texture_sub_image_3d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::enum_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void copy_named_buffer_sub_data(gl::uint_t readBuffer, gl::uint_t writeBuffer, gl::intptr_t readOffset, gl::intptr_t writeOffset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void copy_texture_sub_image_1d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void copy_texture_sub_image_2d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void copy_texture_sub_image_3d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_buffers(gl::sizei_t n, gl::uint_t * buffers);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_framebuffers(gl::sizei_t n, gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_program_pipelines(gl::sizei_t n, gl::uint_t * pipelines);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_queries(gl::enum_t target, gl::sizei_t n, gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_renderbuffers(gl::sizei_t n, gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_samplers(gl::sizei_t n, gl::uint_t * samplers);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_textures(gl::enum_t target, gl::sizei_t n, gl::uint_t * textures);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_transform_feedbacks(gl::sizei_t n, gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void create_vertex_arrays(gl::sizei_t n, gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void disable_vertex_array_attrib(gl::uint_t vaobj, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void enable_vertex_array_attrib(gl::uint_t vaobj, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void flush_mapped_named_buffer_range(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t length);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void generate_texture_mipmap(gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_compressed_texture_image(gl::uint_t texture, gl::int_t level, gl::sizei_t bufSize, void * pixels);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_named_buffer_parameteri_64v(gl::uint_t buffer, gl::enum_t pname, gl::int64_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_named_buffer_parameteriv(gl::uint_t buffer, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_named_buffer_pointerv(gl::uint_t buffer, gl::enum_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_named_buffer_sub_data(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size, void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_named_framebuffer_attachment_parameteriv(gl::uint_t framebuffer, gl::enum_t attachment, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_named_framebuffer_parameteriv(gl::uint_t framebuffer, gl::enum_t pname, gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_named_renderbuffer_parameteriv(gl::uint_t renderbuffer, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_query_buffer_objecti_64v(gl::uint_t id, gl::uint_t buffer, gl::enum_t pname, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_query_buffer_objectiv(gl::uint_t id, gl::uint_t buffer, gl::enum_t pname, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_query_buffer_objectui_64v(gl::uint_t id, gl::uint_t buffer, gl::enum_t pname, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_query_buffer_objectuiv(gl::uint_t id, gl::uint_t buffer, gl::enum_t pname, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_texture_image(gl::uint_t texture, gl::int_t level, gl::enum_t format, gl::enum_t type, gl::sizei_t bufSize, void * pixels);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_texture_level_parameterfv(gl::uint_t texture, gl::int_t level, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_texture_level_parameteriv(gl::uint_t texture, gl::int_t level, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_texture_parameter_iiv(gl::uint_t texture, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_texture_parameter_iuiv(gl::uint_t texture, gl::enum_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_texture_parameterfv(gl::uint_t texture, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_texture_parameteriv(gl::uint_t texture, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_transform_feedbacki_64_v(gl::uint_t xfb, gl::enum_t pname, gl::uint_t index, gl::int64_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_transform_feedbacki_v(gl::uint_t xfb, gl::enum_t pname, gl::uint_t index, gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_transform_feedbackiv(gl::uint_t xfb, gl::enum_t pname, gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_vertex_array_indexed_64iv(gl::uint_t vaobj, gl::uint_t index, gl::enum_t pname, gl::int64_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_vertex_array_indexediv(gl::uint_t vaobj, gl::uint_t index, gl::enum_t pname, gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void get_vertex_arrayiv(gl::uint_t vaobj, gl::enum_t pname, gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void invalidate_named_framebuffer_data(gl::uint_t framebuffer, gl::sizei_t numAttachments, const  gl::enum_t * attachments);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void invalidate_named_framebuffer_sub_data(gl::uint_t framebuffer, gl::sizei_t numAttachments, const  gl::enum_t * attachments, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void * map_named_buffer(gl::uint_t buffer, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void * map_named_buffer_range(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t length, gl::bitfield_t access);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_buffer_data(gl::uint_t buffer, gl::sizeiptr_t size, const  void * data, gl::enum_t usage);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_buffer_storage(gl::uint_t buffer, gl::sizeiptr_t size, const  void * data, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_buffer_sub_data(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_framebuffer_draw_buffer(gl::uint_t framebuffer, gl::enum_t buf);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_framebuffer_draw_buffers(gl::uint_t framebuffer, gl::sizei_t n, const  gl::enum_t * bufs);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_framebuffer_parameteri(gl::uint_t framebuffer, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_framebuffer_read_buffer(gl::uint_t framebuffer, gl::enum_t src);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_framebuffer_renderbuffer(gl::uint_t framebuffer, gl::enum_t attachment, gl::enum_t renderbuffertarget, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_framebuffer_texture(gl::uint_t framebuffer, gl::enum_t attachment, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_framebuffer_texture_layer(gl::uint_t framebuffer, gl::enum_t attachment, gl::uint_t texture, gl::int_t level, gl::int_t layer);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_renderbuffer_storage(gl::uint_t renderbuffer, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void named_renderbuffer_storage_multisample(gl::uint_t renderbuffer, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_buffer(gl::uint_t texture, gl::enum_t internalformat, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_buffer_range(gl::uint_t texture, gl::enum_t internalformat, gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_parameter_iiv(gl::uint_t texture, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_parameter_iuiv(gl::uint_t texture, gl::enum_t pname, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_parameterf(gl::uint_t texture, gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_parameterfv(gl::uint_t texture, gl::enum_t pname, const  gl::float_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_parameteri(gl::uint_t texture, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_parameteriv(gl::uint_t texture, gl::enum_t pname, const  gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_storage_1d(gl::uint_t texture, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_storage_2d(gl::uint_t texture, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_storage_2d_multisample(gl::uint_t texture, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_storage_3d(gl::uint_t texture, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_storage_3d_multisample(gl::uint_t texture, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_sub_image_1d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, gl::enum_t format, gl::enum_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_sub_image_2d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, gl::enum_t format, gl::enum_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void texture_sub_image_3d(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::enum_t format, gl::enum_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void transform_feedback_buffer_base(gl::uint_t xfb, gl::uint_t index, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void transform_feedback_buffer_range(gl::uint_t xfb, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    gl::boolean_t unmap_named_buffer(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void vertex_array_attrib_binding(gl::uint_t vaobj, gl::uint_t attribindex, gl::uint_t bindingindex);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void vertex_array_attrib_format(gl::uint_t vaobj, gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::boolean_t normalized, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void vertex_array_attrib_i_format(gl::uint_t vaobj, gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void vertex_array_attrib_l_format(gl::uint_t vaobj, gl::uint_t attribindex, gl::int_t size, gl::enum_t type, gl::uint_t relativeoffset);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void vertex_array_binding_divisor(gl::uint_t vaobj, gl::uint_t bindingindex, gl::uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void vertex_array_element_buffer(gl::uint_t vaobj, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void vertex_array_vertex_buffer(gl::uint_t vaobj, gl::uint_t bindingindex, gl::uint_t buffer, gl::intptr_t offset, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_ARB_direct_state_access (glcore,gl)
    */
    void vertex_array_vertex_buffers(gl::uint_t vaobj, gl::uint_t first, gl::sizei_t count, const  gl::uint_t * buffers, const  gl::intptr_t * offsets, const  gl::sizei_t * strides);

   /**
    * Required by extensions:
    *  - GL_NV_draw_texture (gl)
    */
    void draw_texture_nv(gl::uint_t texture, gl::uint_t sampler, gl::float_t x0, gl::float_t y0, gl::float_t x1, gl::float_t y1, gl::float_t z, gl::float_t s0, gl::float_t t0, gl::float_t s1, gl::float_t t1);

   /**
    * Required by extensions:
    *  - GL_ARB_shading_language_include (glcore,gl)
    */
    void compile_shader_include_arb(gl::uint_t shader, gl::sizei_t count, const  gl::char_t ** path, const  gl::int_t * length);

   /**
    * Required by extensions:
    *  - GL_ARB_shading_language_include (glcore,gl)
    */
    void delete_named_string_arb(gl::int_t namelen, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shading_language_include (glcore,gl)
    */
    void get_named_string_arb(gl::int_t namelen, const  gl::char_t * name, gl::sizei_t bufSize, gl::int_t * stringlen, gl::char_t * string);

   /**
    * Required by extensions:
    *  - GL_ARB_shading_language_include (glcore,gl)
    */
    void get_named_stringiv_arb(gl::int_t namelen, const  gl::char_t * name, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shading_language_include (glcore,gl)
    */
    gl::boolean_t is_named_string_arb(gl::int_t namelen, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shading_language_include (glcore,gl)
    */
    void named_string_arb(gl::enum_t type, gl::int_t namelen, const  gl::char_t * name, gl::int_t stringlen, const  gl::char_t * string);

   /**
    * Required by extensions:
    *  - GL_EXT_polygon_offset (gl)
    */
    void polygon_offset_ext(gl::float_t factor, gl::float_t bias);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_storage (glcore,gl)
    */
    void tex_storage_1d(gl::enum_t target, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_storage (glcore,gl)
    */
    void tex_storage_2d(gl::enum_t target, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_storage (glcore,gl)
    */
    void tex_storage_3d(gl::enum_t target, gl::sizei_t levels, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void disable_indexed_ext(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void enable_indexed_ext(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void get_boolean_indexedv_ext(gl::enum_t target, gl::uint_t index, gl::boolean_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void get_integer_indexedv_ext(gl::enum_t target, gl::uint_t index, gl::int_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    gl::boolean_t is_enabled_indexed_ext(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_multi_draw_indirect (gl)
    */
    void multi_draw_arrays_indirect_bindless_nv(gl::enum_t mode, const  void * indirect, gl::sizei_t drawCount, gl::sizei_t stride, gl::int_t vertexBufferCount);

   /**
    * Required by extensions:
    *  - GL_NV_bindless_multi_draw_indirect (gl)
    */
    void multi_draw_elements_indirect_bindless_nv(gl::enum_t mode, gl::enum_t type, const  void * indirect, gl::sizei_t drawCount, gl::sizei_t stride, gl::int_t vertexBufferCount);

   /**
    * Required by extensions:
    *  - GL_ARB_copy_image (glcore,gl)
    */
    void copy_image_sub_data(gl::uint_t srcName, gl::enum_t srcTarget, gl::int_t srcLevel, gl::int_t srcX, gl::int_t srcY, gl::int_t srcZ, gl::uint_t dstName, gl::enum_t dstTarget, gl::int_t dstLevel, gl::int_t dstX, gl::int_t dstY, gl::int_t dstZ, gl::sizei_t srcWidth, gl::sizei_t srcHeight, gl::sizei_t srcDepth);

   /**
    * Required by extensions:
    *  - GL_ARB_ES3_1_compatibility (glcore,gl)
    */
    void memory_barrier_by_region(gl::bitfield_t barriers);

   /**
    * Required by extensions:
    *  - GL_ARB_sample_shading (glcore,gl)
    */
    void min_sample_shading_arb(gl::float_t value);

   /**
    * Required by extensions:
    *  - GL_ARB_clear_buffer_object (glcore,gl)
    */
    void clear_buffer_data(gl::enum_t target, gl::enum_t internalformat, gl::enum_t format, gl::enum_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_clear_buffer_object (glcore,gl)
    */
    void clear_buffer_sub_data(gl::enum_t target, gl::enum_t internalformat, gl::intptr_t offset, gl::sizeiptr_t size, gl::enum_t format, gl::enum_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_arrays (gles1,gles2,gl)
    */
    void multi_draw_arrays_ext(primitive_type_t mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_arrays (gles1,gles2,gl)
    */
    void multi_draw_elements_ext(primitive_type_t mode, const  gl::sizei_t * count, draw_elements_type_t type, const  void * * indices, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_SGIS_pixel_texture (gl)
    */
    void get_pixel_tex_gen_parameterfv_sgis(pixel_tex_gen_parameter_name_sgis_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIS_pixel_texture (gl)
    */
    void get_pixel_tex_gen_parameteriv_sgis(pixel_tex_gen_parameter_name_sgis_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIS_pixel_texture (gl)
    */
    void pixel_tex_gen_parameterf_sgis(pixel_tex_gen_parameter_name_sgis_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_SGIS_pixel_texture (gl)
    */
    void pixel_tex_gen_parameterfv_sgis(pixel_tex_gen_parameter_name_sgis_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIS_pixel_texture (gl)
    */
    void pixel_tex_gen_parameteri_sgis(pixel_tex_gen_parameter_name_sgis_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_SGIS_pixel_texture (gl)
    */
    void pixel_tex_gen_parameteriv_sgis(pixel_tex_gen_parameter_name_sgis_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_internalformat_query2 (glcore,gl)
    */
    void get_internalformati_64v(gl::enum_t target, gl::enum_t internalformat, gl::enum_t pname, gl::sizei_t bufSize, gl::int64_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_label (gles2,gl)
    */
    void get_object_label_ext(gl::enum_t type, gl::uint_t object, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_label (gles2,gl)
    */
    void label_object_ext(gl::enum_t type, gl::uint_t object, gl::sizei_t length, const  gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_SGIX_instruments (gl)
    */
    gl::int_t get_instruments_sgix();

   /**
    * Required by extensions:
    *  - GL_SGIX_instruments (gl)
    */
    void instruments_buffer_sgix(gl::sizei_t size, gl::int_t * buffer);

   /**
    * Required by extensions:
    *  - GL_SGIX_instruments (gl)
    */
    gl::int_t poll_instruments_sgix(gl::int_t * marker_p);

   /**
    * Required by extensions:
    *  - GL_SGIX_instruments (gl)
    */
    void read_instruments_sgix(gl::int_t marker);

   /**
    * Required by extensions:
    *  - GL_SGIX_instruments (gl)
    */
    void start_instruments_sgix();

   /**
    * Required by extensions:
    *  - GL_SGIX_instruments (gl)
    */
    void stop_instruments_sgix(gl::int_t marker);

   /**
    * Required by extensions:
    *  - GL_NV_conditional_render (gles2,gl)
    */
    void begin_conditional_render_nv(gl::uint_t id, gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_NV_conditional_render (gles2,gl)
    */
    void end_conditional_render_nv();

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void color_3f_vertex_3f_sun(gl::float_t r, gl::float_t g, gl::float_t b, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void color_3f_vertex_3fv_sun(const  gl::float_t * c, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void color_4f_normal_3f_vertex_3f_sun(gl::float_t r, gl::float_t g, gl::float_t b, gl::float_t a, gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void color_4f_normal_3f_vertex_3fv_sun(const  gl::float_t * c, const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void color_4ub_vertex_2f_sun(gl::ubyte_t r, gl::ubyte_t g, gl::ubyte_t b, gl::ubyte_t a, gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void color_4ub_vertex_2fv_sun(const  gl::ubyte_t * c, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void color_4ub_vertex_3f_sun(gl::ubyte_t r, gl::ubyte_t g, gl::ubyte_t b, gl::ubyte_t a, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void color_4ub_vertex_3fv_sun(const  gl::ubyte_t * c, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void normal_3f_vertex_3f_sun(gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void normal_3f_vertex_3fv_sun(const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_color_3f_vertex_3f_sun(gl::uint_t rc, gl::float_t r, gl::float_t g, gl::float_t b, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_color_3f_vertex_3fv_sun(const  gl::uint_t * rc, const  gl::float_t * c, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_color_4f_normal_3f_vertex_3f_sun(gl::uint_t rc, gl::float_t r, gl::float_t g, gl::float_t b, gl::float_t a, gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_color_4f_normal_3f_vertex_3fv_sun(const  gl::uint_t * rc, const  gl::float_t * c, const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_color_4ub_vertex_3f_sun(gl::uint_t rc, gl::ubyte_t r, gl::ubyte_t g, gl::ubyte_t b, gl::ubyte_t a, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_color_4ub_vertex_3fv_sun(const  gl::uint_t * rc, const  gl::ubyte_t * c, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_normal_3f_vertex_3f_sun(gl::uint_t rc, gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_normal_3f_vertex_3fv_sun(const  gl::uint_t * rc, const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_tex_coord_2f_color_4f_normal_3f_vertex_3f_sun(gl::uint_t rc, gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t g, gl::float_t b, gl::float_t a, gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_tex_coord_2f_color_4f_normal_3f_vertex_3fv_sun(const  gl::uint_t * rc, const  gl::float_t * tc, const  gl::float_t * c, const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_tex_coord_2f_normal_3f_vertex_3f_sun(gl::uint_t rc, gl::float_t s, gl::float_t t, gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_tex_coord_2f_normal_3f_vertex_3fv_sun(const  gl::uint_t * rc, const  gl::float_t * tc, const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_tex_coord_2f_vertex_3f_sun(gl::uint_t rc, gl::float_t s, gl::float_t t, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_tex_coord_2f_vertex_3fv_sun(const  gl::uint_t * rc, const  gl::float_t * tc, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_vertex_3f_sun(gl::uint_t rc, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void replacement_codeui_vertex_3fv_sun(const  gl::uint_t * rc, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_color_3f_vertex_3f_sun(gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t g, gl::float_t b, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_color_3f_vertex_3fv_sun(const  gl::float_t * tc, const  gl::float_t * c, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_color_4f_normal_3f_vertex_3f_sun(gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t g, gl::float_t b, gl::float_t a, gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_color_4f_normal_3f_vertex_3fv_sun(const  gl::float_t * tc, const  gl::float_t * c, const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_color_4ub_vertex_3f_sun(gl::float_t s, gl::float_t t, gl::ubyte_t r, gl::ubyte_t g, gl::ubyte_t b, gl::ubyte_t a, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_color_4ub_vertex_3fv_sun(const  gl::float_t * tc, const  gl::ubyte_t * c, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_normal_3f_vertex_3f_sun(gl::float_t s, gl::float_t t, gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_normal_3f_vertex_3fv_sun(const  gl::float_t * tc, const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_vertex_3f_sun(gl::float_t s, gl::float_t t, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_2f_vertex_3fv_sun(const  gl::float_t * tc, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_4f_color_4f_normal_3f_vertex_4f_sun(gl::float_t s, gl::float_t t, gl::float_t p, gl::float_t q, gl::float_t r, gl::float_t g, gl::float_t b, gl::float_t a, gl::float_t nx, gl::float_t ny, gl::float_t nz, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_4f_color_4f_normal_3f_vertex_4fv_sun(const  gl::float_t * tc, const  gl::float_t * c, const  gl::float_t * n, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_4f_vertex_4f_sun(gl::float_t s, gl::float_t t, gl::float_t p, gl::float_t q, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_SUN_vertex (gl)
    */
    void tex_coord_4f_vertex_4fv_sun(const  gl::float_t * tc, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_geometry_program4 (gl)
    *  - GL_EXT_geometry_shader (gles2)
    */
    void framebuffer_texture_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_NV_pixel_data_range (gl)
    */
    void flush_pixel_data_range_nv(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_NV_pixel_data_range (gl)
    */
    void pixel_data_range_nv(gl::enum_t target, gl::sizei_t length, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_minmax (gles1,gles2,gl)
    */
    void blend_equation_ext(blend_equation_mode_ext_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_blit (gl)
    */
    void blit_framebuffer_ext(gl::int_t srcX0, gl::int_t srcY0, gl::int_t srcX1, gl::int_t srcY1, gl::int_t dstX0, gl::int_t dstY0, gl::int_t dstX1, gl::int_t dstY1, gl::bitmask<clear_buffer_flags_t> mask, gl::enum_t filter);

   /**
    * Required by extensions:
    *  - GL_AMD_multi_draw_indirect (gl)
    */
    void multi_draw_arrays_indirect_amd(gl::enum_t mode, const  void * indirect, gl::sizei_t primcount, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_AMD_multi_draw_indirect (gl)
    */
    void multi_draw_elements_indirect_amd(gl::enum_t mode, gl::enum_t type, const  void * indirect, gl::sizei_t primcount, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_SGIX_igloo_interface (gl)
    */
    void igloo_interface_sgix(gl::enum_t pname, const  void * params);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void copy_path_nv(gl::uint_t resultPath, gl::uint_t srcPath);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void cover_fill_path_instanced_nv(gl::sizei_t numPaths, gl::enum_t pathNameType, const  void * paths, gl::uint_t pathBase, gl::enum_t coverMode, gl::enum_t transformType, const  gl::float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void cover_fill_path_nv(gl::uint_t path, gl::enum_t coverMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void cover_stroke_path_instanced_nv(gl::sizei_t numPaths, gl::enum_t pathNameType, const  void * paths, gl::uint_t pathBase, gl::enum_t coverMode, gl::enum_t transformType, const  gl::float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void cover_stroke_path_nv(gl::uint_t path, gl::enum_t coverMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void delete_paths_nv(gl::uint_t path, gl::sizei_t range);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::uint_t gen_paths_nv(gl::sizei_t range);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_color_genfv_nv(gl::enum_t color, gl::enum_t pname, gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_color_geniv_nv(gl::enum_t color, gl::enum_t pname, gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_commands_nv(gl::uint_t path, gl::ubyte_t * commands);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_coords_nv(gl::uint_t path, gl::float_t * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_dash_array_nv(gl::uint_t path, gl::float_t * dashArray);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::float_t get_path_length_nv(gl::uint_t path, gl::sizei_t startSegment, gl::sizei_t numSegments);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_metric_range_nv(gl::bitfield_t metricQueryMask, gl::uint_t firstPathName, gl::sizei_t numPaths, gl::sizei_t stride, gl::float_t * metrics);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_metrics_nv(gl::bitfield_t metricQueryMask, gl::sizei_t numPaths, gl::enum_t pathNameType, const  void * paths, gl::uint_t pathBase, gl::sizei_t stride, gl::float_t * metrics);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_parameterfv_nv(gl::uint_t path, gl::enum_t pname, gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_parameteriv_nv(gl::uint_t path, gl::enum_t pname, gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_spacing_nv(gl::enum_t pathListMode, gl::sizei_t numPaths, gl::enum_t pathNameType, const  void * paths, gl::uint_t pathBase, gl::float_t advanceScale, gl::float_t kerningScale, gl::enum_t transformType, gl::float_t * returnedSpacing);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_tex_genfv_nv(texture_unit_t texCoordSet, gl::enum_t pname, gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_path_tex_geniv_nv(texture_unit_t texCoordSet, gl::enum_t pname, gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void get_program_resourcefv_nv(gl::uint_t program, gl::enum_t programInterface, gl::uint_t index, gl::sizei_t propCount, const  gl::enum_t * props, gl::sizei_t bufSize, gl::sizei_t * length, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void interpolate_paths_nv(gl::uint_t resultPath, gl::uint_t pathA, gl::uint_t pathB, gl::float_t weight);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::boolean_t is_path_nv(gl::uint_t path);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::boolean_t is_point_in_fill_path_nv(gl::uint_t path, gl::uint_t mask, gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::boolean_t is_point_in_stroke_path_nv(gl::uint_t path, gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_load_3x_2f_nv(gl::enum_t matrixMode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_load_3x_3f_nv(gl::enum_t matrixMode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_load_transpose_3x_3f_nv(gl::enum_t matrixMode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_mult_3x_2f_nv(gl::enum_t matrixMode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_mult_3x_3f_nv(gl::enum_t matrixMode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void matrix_mult_transpose_3x_3f_nv(gl::enum_t matrixMode, const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_color_gen_nv(gl::enum_t color, gl::enum_t genMode, gl::enum_t colorFormat, const  gl::float_t * coeffs);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_commands_nv(gl::uint_t path, gl::sizei_t numCommands, const  gl::ubyte_t * commands, gl::sizei_t numCoords, gl::enum_t coordType, const  void * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_coords_nv(gl::uint_t path, gl::sizei_t numCoords, gl::enum_t coordType, const  void * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_cover_depth_func_nv(depth_function_t func);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_dash_array_nv(gl::uint_t path, gl::sizei_t dashCount, const  gl::float_t * dashArray);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_fog_gen_nv(gl::enum_t genMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::enum_t path_glyph_index_array_nv(gl::uint_t firstPathName, gl::enum_t fontTarget, const  void * fontName, gl::bitfield_t fontStyle, gl::uint_t firstGlyphIndex, gl::sizei_t numGlyphs, gl::uint_t pathParameterTemplate, gl::float_t emScale);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::enum_t path_glyph_index_range_nv(gl::enum_t fontTarget, const  void * fontName, gl::bitfield_t fontStyle, gl::uint_t pathParameterTemplate, gl::float_t emScale, gl::uint_t * baseAndCount);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_glyph_range_nv(gl::uint_t firstPathName, gl::enum_t fontTarget, const  void * fontName, gl::bitfield_t fontStyle, gl::uint_t firstGlyph, gl::sizei_t numGlyphs, gl::enum_t handleMissingGlyphs, gl::uint_t pathParameterTemplate, gl::float_t emScale);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_glyphs_nv(gl::uint_t firstPathName, gl::enum_t fontTarget, const  void * fontName, gl::bitfield_t fontStyle, gl::sizei_t numGlyphs, gl::enum_t type, const  void * charcodes, gl::enum_t handleMissingGlyphs, gl::uint_t pathParameterTemplate, gl::float_t emScale);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::enum_t path_memory_glyph_index_array_nv(gl::uint_t firstPathName, gl::enum_t fontTarget, gl::sizeiptr_t fontSize, const  void * fontData, gl::sizei_t faceIndex, gl::uint_t firstGlyphIndex, gl::sizei_t numGlyphs, gl::uint_t pathParameterTemplate, gl::float_t emScale);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_parameterf_nv(gl::uint_t path, gl::enum_t pname, gl::float_t value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_parameterfv_nv(gl::uint_t path, gl::enum_t pname, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_parameteri_nv(gl::uint_t path, gl::enum_t pname, gl::int_t value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_parameteriv_nv(gl::uint_t path, gl::enum_t pname, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_stencil_depth_offset_nv(gl::float_t factor, gl::float_t units);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_stencil_func_nv(stencil_function_t func, gl::int_t ref, gl::uint_t mask);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_string_nv(gl::uint_t path, gl::enum_t format, gl::sizei_t length, const  void * pathString);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_sub_commands_nv(gl::uint_t path, gl::sizei_t commandStart, gl::sizei_t commandsToDelete, gl::sizei_t numCommands, const  gl::ubyte_t * commands, gl::sizei_t numCoords, gl::enum_t coordType, const  void * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_sub_coords_nv(gl::uint_t path, gl::sizei_t coordStart, gl::sizei_t numCoords, gl::enum_t coordType, const  void * coords);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void path_tex_gen_nv(gl::enum_t texCoordSet, gl::enum_t genMode, gl::int_t components, const  gl::float_t * coeffs);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    gl::boolean_t point_along_path_nv(gl::uint_t path, gl::sizei_t startSegment, gl::sizei_t numSegments, gl::float_t distance, gl::float_t * x, gl::float_t * y, gl::float_t * tangentX, gl::float_t * tangentY);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void program_path_fragment_input_gen_nv(gl::uint_t program, gl::int_t location, gl::enum_t genMode, gl::int_t components, const  gl::float_t * coeffs);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_fill_path_instanced_nv(gl::sizei_t numPaths, gl::enum_t pathNameType, const  void * paths, gl::uint_t pathBase, gl::enum_t fillMode, gl::uint_t mask, gl::enum_t transformType, const  gl::float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_fill_path_nv(gl::uint_t path, gl::enum_t fillMode, gl::uint_t mask);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_stroke_path_instanced_nv(gl::sizei_t numPaths, gl::enum_t pathNameType, const  void * paths, gl::uint_t pathBase, gl::int_t reference, gl::uint_t mask, gl::enum_t transformType, const  gl::float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_stroke_path_nv(gl::uint_t path, gl::int_t reference, gl::uint_t mask);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_then_cover_fill_path_instanced_nv(gl::sizei_t numPaths, gl::enum_t pathNameType, const  void * paths, gl::uint_t pathBase, gl::enum_t fillMode, gl::uint_t mask, gl::enum_t coverMode, gl::enum_t transformType, const  gl::float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_then_cover_fill_path_nv(gl::uint_t path, gl::enum_t fillMode, gl::uint_t mask, gl::enum_t coverMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_then_cover_stroke_path_instanced_nv(gl::sizei_t numPaths, gl::enum_t pathNameType, const  void * paths, gl::uint_t pathBase, gl::int_t reference, gl::uint_t mask, gl::enum_t coverMode, gl::enum_t transformType, const  gl::float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void stencil_then_cover_stroke_path_nv(gl::uint_t path, gl::int_t reference, gl::uint_t mask, gl::enum_t coverMode);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void transform_path_nv(gl::uint_t resultPath, gl::uint_t srcPath, gl::enum_t transformType, const  gl::float_t * transformValues);

   /**
    * Required by extensions:
    *  - GL_NV_path_rendering (gles2,gl)
    */
    void weight_paths_nv(gl::uint_t resultPath, gl::sizei_t numPaths, const  gl::uint_t * paths, const  gl::float_t * weights);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void get_vertex_attrib_iiv_ext(gl::uint_t index, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void get_vertex_attrib_iuiv_ext(gl::uint_t index, gl::enum_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i1i_ext(gl::uint_t index, gl::int_t x);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i1iv_ext(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i1ui_ext(gl::uint_t index, gl::uint_t x);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i1uiv_ext(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i2i_ext(gl::uint_t index, gl::int_t x, gl::int_t y);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i2iv_ext(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i2ui_ext(gl::uint_t index, gl::uint_t x, gl::uint_t y);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i2uiv_ext(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i3i_ext(gl::uint_t index, gl::int_t x, gl::int_t y, gl::int_t z);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i3iv_ext(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i3ui_ext(gl::uint_t index, gl::uint_t x, gl::uint_t y, gl::uint_t z);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i3uiv_ext(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i4bv_ext(gl::uint_t index, const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i4i_ext(gl::uint_t index, gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i4iv_ext(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i4sv_ext(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i4ubv_ext(gl::uint_t index, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i4ui_ext(gl::uint_t index, gl::uint_t x, gl::uint_t y, gl::uint_t z, gl::uint_t w);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i4uiv_ext(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i4usv_ext(gl::uint_t index, const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_vertex_program4 (gl)
    */
    void vertex_attrib_i_pointer_ext(gl::uint_t index, gl::int_t size, gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_base_instance (glcore,gl)
    */
    void draw_arrays_instanced_base_instance(primitive_type_t mode, gl::int_t first, gl::sizei_t count, gl::sizei_t instancecount, gl::uint_t baseinstance);

   /**
    * Required by extensions:
    *  - GL_ARB_base_instance (glcore,gl)
    */
    void draw_elements_instanced_base_instance(primitive_type_t mode, gl::sizei_t count, gl::enum_t type, const  void * indices, gl::sizei_t instancecount, gl::uint_t baseinstance);

   /**
    * Required by extensions:
    *  - GL_ARB_base_instance (glcore,gl)
    */
    void draw_elements_instanced_base_vertex_base_instance(primitive_type_t mode, gl::sizei_t count, gl::enum_t type, const  void * indices, gl::sizei_t instancecount, gl::int_t basevertex, gl::uint_t baseinstance);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    *  - GL_EXT_timer_query (gl)
    */
    void get_query_objecti_64v_ext(gl::uint_t id, gl::enum_t pname, gl::int64_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    *  - GL_EXT_timer_query (gl)
    */
    void get_query_objectui_64v_ext(gl::uint_t id, gl::enum_t pname, gl::uint64_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_compute_shader (glcore,gl)
    */
    void dispatch_compute(gl::uint_t num_groups_x, gl::uint_t num_groups_y, gl::uint_t num_groups_z);

   /**
    * Required by extensions:
    *  - GL_ARB_compute_shader (glcore,gl)
    */
    void dispatch_compute_indirect(gl::intptr_t indirect);

   /**
    * Required by extensions:
    *  - GL_SUN_global_alpha (gl)
    */
    void global_alpha_factorb_sun(gl::byte_t factor);

   /**
    * Required by extensions:
    *  - GL_SUN_global_alpha (gl)
    */
    void global_alpha_factord_sun(gl::double_t factor);

   /**
    * Required by extensions:
    *  - GL_SUN_global_alpha (gl)
    */
    void global_alpha_factorf_sun(gl::float_t factor);

   /**
    * Required by extensions:
    *  - GL_SUN_global_alpha (gl)
    */
    void global_alpha_factori_sun(gl::int_t factor);

   /**
    * Required by extensions:
    *  - GL_SUN_global_alpha (gl)
    */
    void global_alpha_factors_sun(gl::short_t factor);

   /**
    * Required by extensions:
    *  - GL_SUN_global_alpha (gl)
    */
    void global_alpha_factorub_sun(gl::ubyte_t factor);

   /**
    * Required by extensions:
    *  - GL_SUN_global_alpha (gl)
    */
    void global_alpha_factorui_sun(gl::uint_t factor);

   /**
    * Required by extensions:
    *  - GL_SUN_global_alpha (gl)
    */
    void global_alpha_factorus_sun(gl::ushort_t factor);

   /**
    * Required by extensions:
    *  - GL_SGIS_fog_function (gl)
    */
    void fog_func_sgis(gl::sizei_t n, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_SGIS_fog_function (gl)
    */
    void get_fog_func_sgis(gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_EXT_x11_sync_object (gl)
    */
    gl::sync_t import_sync_ext(gl::enum_t external_sync_type, gl::intptr_t external_sync, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_ARB_blend_func_extended (glcore,gl)
    */
    void bind_frag_data_location_indexed(gl::uint_t program, gl::uint_t colorNumber, gl::uint_t index, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_blend_func_extended (glcore,gl)
    */
    gl::int_t get_frag_data_index(gl::uint_t program, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_IBM_vertex_array_lists (gl)
    */
    void color_pointer_list_ibm(gl::int_t size, color_pointer_type_t type, gl::int_t stride, const  void ** pointer, gl::int_t ptrstride);

   /**
    * Required by extensions:
    *  - GL_IBM_vertex_array_lists (gl)
    */
    void edge_flag_pointer_list_ibm(gl::int_t stride, const  gl::boolean_t ** pointer, gl::int_t ptrstride);

   /**
    * Required by extensions:
    *  - GL_IBM_vertex_array_lists (gl)
    */
    void fog_coord_pointer_list_ibm(fog_pointer_type_ibm_t type, gl::int_t stride, const  void ** pointer, gl::int_t ptrstride);

   /**
    * Required by extensions:
    *  - GL_IBM_vertex_array_lists (gl)
    */
    void index_pointer_list_ibm(index_pointer_type_t type, gl::int_t stride, const  void ** pointer, gl::int_t ptrstride);

   /**
    * Required by extensions:
    *  - GL_IBM_vertex_array_lists (gl)
    */
    void normal_pointer_list_ibm(normal_pointer_type_t type, gl::int_t stride, const  void ** pointer, gl::int_t ptrstride);

   /**
    * Required by extensions:
    *  - GL_IBM_vertex_array_lists (gl)
    */
    void secondary_color_pointer_list_ibm(gl::int_t size, gl::enum_t type, gl::int_t stride, const  void ** pointer, gl::int_t ptrstride);

   /**
    * Required by extensions:
    *  - GL_IBM_vertex_array_lists (gl)
    */
    void tex_coord_pointer_list_ibm(gl::int_t size, tex_coord_pointer_type_t type, gl::int_t stride, const  void ** pointer, gl::int_t ptrstride);

   /**
    * Required by extensions:
    *  - GL_IBM_vertex_array_lists (gl)
    */
    void vertex_pointer_list_ibm(gl::int_t size, vertex_pointer_type_t type, gl::int_t stride, const  void ** pointer, gl::int_t ptrstride);

   /**
    * Required by extensions:
    *  - GL_ARB_multi_draw_indirect (glcore,gl)
    */
    void multi_draw_arrays_indirect(gl::enum_t mode, const  void * indirect, gl::sizei_t drawcount, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_ARB_multi_draw_indirect (glcore,gl)
    */
    void multi_draw_elements_indirect(gl::enum_t mode, gl::enum_t type, const  void * indirect, gl::sizei_t drawcount, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_EXT_subtexture (gl)
    */
    void tex_sub_image_1dext(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_subtexture (gl)
    */
    void tex_sub_image_2dext(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_ARB_color_buffer_float (gl)
    */
    void clamp_color_arb(gl::enum_t target, gl::enum_t clamp);

   /**
    * Required by extensions:
    *  - GL_NV_sample_locations (gl)
    */
    void framebuffer_sample_locationsfv_nv(gl::enum_t target, gl::uint_t start, gl::sizei_t count, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_sample_locations (gl)
    */
    void named_framebuffer_sample_locationsfv_nv(gl::uint_t framebuffer, gl::uint_t start, gl::sizei_t count, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_sample_locations (gl)
    */
    void resolve_depth_values_nv();

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void flush_vertex_array_range_apple(gl::sizei_t length, void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void vertex_array_parameteri_apple(gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void vertex_array_range_apple(gl::sizei_t length, void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2d_arb(gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2dv_arb(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2f_arb(gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2fv_arb(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2i_arb(gl::int_t x, gl::int_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2iv_arb(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2s_arb(gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2sv_arb(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3d_arb(gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3dv_arb(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3f_arb(gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3fv_arb(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3i_arb(gl::int_t x, gl::int_t y, gl::int_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3iv_arb(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3s_arb(gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3sv_arb(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_internalformat_query (glcore,gl)
    */
    void get_internalformativ(gl::enum_t target, gl::enum_t internalformat, gl::enum_t pname, gl::sizei_t bufSize, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_raster_multisample (gl)
    *  - GL_NV_framebuffer_mixed_samples (gl)
    *  - GL_EXT_texture_filter_minmax (gl)
    */
    void raster_samples_ext(gl::uint_t samples, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    */
    void clear_color_ii_ext(gl::int_t red, gl::int_t green, gl::int_t blue, gl::int_t alpha);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    */
    void clear_color_iui_ext(gl::uint_t red, gl::uint_t green, gl::uint_t blue, gl::uint_t alpha);

   /**
    * Required by extensions:
    *  - GL_NV_texture_multisample (gl)
    */
    void tex_image_2d_multisample_coverage_nv(gl::enum_t target, gl::sizei_t coverageSamples, gl::sizei_t colorSamples, gl::int_t internalFormat, gl::sizei_t width, gl::sizei_t height, gl::boolean_t fixedSampleLocations);

   /**
    * Required by extensions:
    *  - GL_NV_texture_multisample (gl)
    */
    void tex_image_3d_multisample_coverage_nv(gl::enum_t target, gl::sizei_t coverageSamples, gl::sizei_t colorSamples, gl::int_t internalFormat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t fixedSampleLocations);

   /**
    * Required by extensions:
    *  - GL_NV_texture_multisample (gl)
    */
    void texture_image_2d_multisample_coverage_nv(gl::uint_t texture, gl::enum_t target, gl::sizei_t coverageSamples, gl::sizei_t colorSamples, gl::int_t internalFormat, gl::sizei_t width, gl::sizei_t height, gl::boolean_t fixedSampleLocations);

   /**
    * Required by extensions:
    *  - GL_NV_texture_multisample (gl)
    */
    void texture_image_2d_multisample_nv(gl::uint_t texture, gl::enum_t target, gl::sizei_t samples, gl::int_t internalFormat, gl::sizei_t width, gl::sizei_t height, gl::boolean_t fixedSampleLocations);

   /**
    * Required by extensions:
    *  - GL_NV_texture_multisample (gl)
    */
    void texture_image_3d_multisample_coverage_nv(gl::uint_t texture, gl::enum_t target, gl::sizei_t coverageSamples, gl::sizei_t colorSamples, gl::int_t internalFormat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t fixedSampleLocations);

   /**
    * Required by extensions:
    *  - GL_NV_texture_multisample (gl)
    */
    void texture_image_3d_multisample_nv(gl::uint_t texture, gl::enum_t target, gl::sizei_t samples, gl::int_t internalFormat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t fixedSampleLocations);

   /**
    * Required by extensions:
    *  - GL_AMD_name_gen_delete (gl)
    */
    void delete_names_amd(gl::enum_t identifier, gl::uint_t num, const  gl::uint_t * names);

   /**
    * Required by extensions:
    *  - GL_AMD_name_gen_delete (gl)
    */
    void gen_names_amd(gl::enum_t identifier, gl::uint_t num, gl::uint_t * names);

   /**
    * Required by extensions:
    *  - GL_AMD_name_gen_delete (gl)
    */
    gl::boolean_t is_name_amd(gl::enum_t identifier, gl::uint_t name);

   /**
    * Required by extensions:
    *  - GL_EXT_shader_image_load_store (gl)
    */
    void bind_image_texture_ext(gl::uint_t index, gl::uint_t texture, gl::int_t level, gl::boolean_t layered, gl::int_t layer, gl::enum_t access, gl::int_t format);

   /**
    * Required by extensions:
    *  - GL_EXT_shader_image_load_store (gl)
    */
    void memory_barrier_ext(gl::bitfield_t barriers);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void eval_maps_nv(gl::enum_t target, gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void get_map_attrib_parameterfv_nv(gl::enum_t target, gl::uint_t index, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void get_map_attrib_parameteriv_nv(gl::enum_t target, gl::uint_t index, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void get_map_control_points_nv(gl::enum_t target, gl::uint_t index, gl::enum_t type, gl::sizei_t ustride, gl::sizei_t vstride, gl::boolean_t packed, void * points);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void get_map_parameterfv_nv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void get_map_parameteriv_nv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void map_control_points_nv(gl::enum_t target, gl::uint_t index, gl::enum_t type, gl::sizei_t ustride, gl::sizei_t vstride, gl::int_t uorder, gl::int_t vorder, gl::boolean_t packed, const  void * points);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void map_parameterfv_nv(gl::enum_t target, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_evaluators (gl)
    */
    void map_parameteriv_nv(gl::enum_t target, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_multisample (glcore,gl)
    */
    void get_multisamplefv(gl::enum_t pname, gl::uint_t index, gl::float_t * val);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_multisample (glcore,gl)
    */
    void sample_maski(gl::uint_t maskNumber, gl::bitfield_t mask);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_multisample (glcore,gl)
    */
    void tex_image_2d_multisample(gl::enum_t target, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_multisample (glcore,gl)
    */
    void tex_image_3d_multisample(gl::enum_t target, gl::sizei_t samples, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::boolean_t fixedsamplelocations);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_multisample (gl)
    *  - GL_EXT_multisampled_render_to_texture (gles2,gles1)
    */
    void renderbuffer_storage_multisample_ext(renderbuffer_target_t target, gl::sizei_t samples, internal_format_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_SGIS_texture_filter4 (gl)
    */
    void get_tex_filter_func_sgis(texture_target_t target, gl::enum_t filter, gl::float_t * weights);

   /**
    * Required by extensions:
    *  - GL_SGIS_texture_filter4 (gl)
    */
    void tex_filter_func_sgis(texture_target_t target, gl::enum_t filter, gl::sizei_t n, const  gl::float_t * weights);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void begin_perf_monitor_amd(gl::uint_t monitor);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void delete_perf_monitors_amd(gl::sizei_t n, gl::uint_t * monitors);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void end_perf_monitor_amd(gl::uint_t monitor);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void gen_perf_monitors_amd(gl::sizei_t n, gl::uint_t * monitors);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_counter_data_amd(gl::uint_t monitor, gl::enum_t pname, gl::sizei_t dataSize, gl::uint_t * data, gl::int_t * bytesWritten);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_counter_info_amd(gl::uint_t group, gl::uint_t counter, gl::enum_t pname, void * data);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_counter_string_amd(gl::uint_t group, gl::uint_t counter, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * counterString);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_counters_amd(gl::uint_t group, gl::int_t * numCounters, gl::int_t * maxActiveCounters, gl::sizei_t counterSize, gl::uint_t * counters);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_group_string_amd(gl::uint_t group, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * groupString);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void get_perf_monitor_groups_amd(gl::int_t * numGroups, gl::sizei_t groupsSize, gl::uint_t * groups);

   /**
    * Required by extensions:
    *  - GL_AMD_performance_monitor (gles2,gl)
    */
    void select_perf_monitor_counters_amd(gl::uint_t monitor, gl::boolean_t enable, gl::uint_t group, gl::int_t numCounters, gl::uint_t * counterList);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void accumx_oes(gl::enum_t op, gl::fixed_t value);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void alpha_funcx_oes(gl::enum_t func, gl::fixed_t ref);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void bitmapx_oes(gl::sizei_t width, gl::sizei_t height, gl::fixed_t xorig, gl::fixed_t yorig, gl::fixed_t xmove, gl::fixed_t ymove, const  gl::ubyte_t * bitmap);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void blend_colorx_oes(gl::fixed_t red, gl::fixed_t green, gl::fixed_t blue, gl::fixed_t alpha);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void clear_accumx_oes(gl::fixed_t red, gl::fixed_t green, gl::fixed_t blue, gl::fixed_t alpha);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void clear_colorx_oes(gl::fixed_t red, gl::fixed_t green, gl::fixed_t blue, gl::fixed_t alpha);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void clear_depthx_oes(gl::fixed_t depth);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void clip_planex_oes(gl::enum_t plane, const  gl::fixed_t * equation);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void color_3x_oes(gl::fixed_t red, gl::fixed_t green, gl::fixed_t blue);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void color_3xv_oes(const  gl::fixed_t * components);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void color_4x_oes(gl::fixed_t red, gl::fixed_t green, gl::fixed_t blue, gl::fixed_t alpha);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void color_4xv_oes(const  gl::fixed_t * components);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void convolution_parameterx_oes(gl::enum_t target, gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void convolution_parameterxv_oes(gl::enum_t target, gl::enum_t pname, const  gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void depth_rangex_oes(gl::fixed_t n, gl::fixed_t f);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void eval_coord_1x_oes(gl::fixed_t u);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void eval_coord_1xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void eval_coord_2x_oes(gl::fixed_t u, gl::fixed_t v);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void eval_coord_2xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void feedback_bufferx_oes(gl::sizei_t n, gl::enum_t type, const  gl::fixed_t * buffer);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void fogx_oes(gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void fogxv_oes(gl::enum_t pname, const  gl::fixed_t * param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void frustumx_oes(gl::fixed_t l, gl::fixed_t r, gl::fixed_t b, gl::fixed_t t, gl::fixed_t n, gl::fixed_t f);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_clip_planex_oes(gl::enum_t plane, gl::fixed_t * equation);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_convolution_parameterxv_oes(gl::enum_t target, gl::enum_t pname, gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_fixedv_oes(gl::enum_t pname, gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_histogram_parameterxv_oes(gl::enum_t target, gl::enum_t pname, gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_lightx_oes(gl::enum_t light, gl::enum_t pname, gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_mapxv_oes(gl::enum_t target, gl::enum_t query, gl::fixed_t * v);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_materialx_oes(gl::enum_t face, gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_pixel_mapxv(gl::enum_t map, gl::int_t size, gl::fixed_t * values);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_tex_envxv_oes(gl::enum_t target, gl::enum_t pname, gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_tex_level_parameterxv_oes(gl::enum_t target, gl::int_t level, gl::enum_t pname, gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_tex_parameterxv_oes(gl::enum_t target, gl::enum_t pname, gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void indexx_oes(gl::fixed_t component);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void indexxv_oes(const  gl::fixed_t * component);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void light_modelx_oes(gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void light_modelxv_oes(gl::enum_t pname, const  gl::fixed_t * param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void lightx_oes(gl::enum_t light, gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void lightxv_oes(gl::enum_t light, gl::enum_t pname, const  gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void line_widthx_oes(gl::fixed_t width);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void load_matrixx_oes(const  gl::fixed_t * m);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void load_transpose_matrixx_oes(const  gl::fixed_t * m);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void map_1x_oes(gl::enum_t target, gl::fixed_t u1, gl::fixed_t u2, gl::int_t stride, gl::int_t order, gl::fixed_t points);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void map_2x_oes(gl::enum_t target, gl::fixed_t u1, gl::fixed_t u2, gl::int_t ustride, gl::int_t uorder, gl::fixed_t v1, gl::fixed_t v2, gl::int_t vstride, gl::int_t vorder, gl::fixed_t points);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void map_grid_1x_oes(gl::int_t n, gl::fixed_t u1, gl::fixed_t u2);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void map_grid_2x_oes(gl::int_t n, gl::fixed_t u1, gl::fixed_t u2, gl::fixed_t v1, gl::fixed_t v2);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void materialx_oes(gl::enum_t face, gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void materialxv_oes(gl::enum_t face, gl::enum_t pname, const  gl::fixed_t * param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void mult_matrixx_oes(const  gl::fixed_t * m);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void mult_transpose_matrixx_oes(const  gl::fixed_t * m);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void multi_tex_coord_1x_oes(gl::enum_t texture, gl::fixed_t s);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void multi_tex_coord_1xv_oes(gl::enum_t texture, const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void multi_tex_coord_2x_oes(gl::enum_t texture, gl::fixed_t s, gl::fixed_t t);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void multi_tex_coord_2xv_oes(gl::enum_t texture, const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void multi_tex_coord_3x_oes(gl::enum_t texture, gl::fixed_t s, gl::fixed_t t, gl::fixed_t r);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void multi_tex_coord_3xv_oes(gl::enum_t texture, const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void multi_tex_coord_4x_oes(gl::enum_t texture, gl::fixed_t s, gl::fixed_t t, gl::fixed_t r, gl::fixed_t q);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void multi_tex_coord_4xv_oes(gl::enum_t texture, const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void normal_3x_oes(gl::fixed_t nx, gl::fixed_t ny, gl::fixed_t nz);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void normal_3xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void orthox_oes(gl::fixed_t l, gl::fixed_t r, gl::fixed_t b, gl::fixed_t t, gl::fixed_t n, gl::fixed_t f);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void pass_throughx_oes(gl::fixed_t token);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void pixel_mapx(gl::enum_t map, gl::int_t size, const  gl::fixed_t * values);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void pixel_storex(gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void pixel_transferx_oes(gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void pixel_zoomx_oes(gl::fixed_t xfactor, gl::fixed_t yfactor);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void point_parameterxv_oes(gl::enum_t pname, const  gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void point_sizex_oes(gl::fixed_t size);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void polygon_offsetx_oes(gl::fixed_t factor, gl::fixed_t units);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void prioritize_texturesx_oes(gl::sizei_t n, const  gl::uint_t * textures, const  gl::fixed_t * priorities);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void raster_pos_2x_oes(gl::fixed_t x, gl::fixed_t y);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void raster_pos_2xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void raster_pos_3x_oes(gl::fixed_t x, gl::fixed_t y, gl::fixed_t z);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void raster_pos_3xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void raster_pos_4x_oes(gl::fixed_t x, gl::fixed_t y, gl::fixed_t z, gl::fixed_t w);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void raster_pos_4xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void rectx_oes(gl::fixed_t x1, gl::fixed_t y1, gl::fixed_t x2, gl::fixed_t y2);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void rectxv_oes(const  gl::fixed_t * v1, const  gl::fixed_t * v2);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void rotatex_oes(gl::fixed_t angle, gl::fixed_t x, gl::fixed_t y, gl::fixed_t z);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void sample_coverage_oes(gl::fixed_t value, gl::boolean_t invert);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void scalex_oes(gl::fixed_t x, gl::fixed_t y, gl::fixed_t z);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_coord_1x_oes(gl::fixed_t s);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_coord_1xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_coord_2x_oes(gl::fixed_t s, gl::fixed_t t);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_coord_2xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_coord_3x_oes(gl::fixed_t s, gl::fixed_t t, gl::fixed_t r);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_coord_3xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_coord_4x_oes(gl::fixed_t s, gl::fixed_t t, gl::fixed_t r, gl::fixed_t q);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_coord_4xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_envx_oes(gl::enum_t target, gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_envxv_oes(gl::enum_t target, gl::enum_t pname, const  gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_parameterx_oes(gl::enum_t target, gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_parameterxv_oes(gl::enum_t target, gl::enum_t pname, const  gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void translatex_oes(gl::fixed_t x, gl::fixed_t y, gl::fixed_t z);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void vertex_2x_oes(gl::fixed_t x);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void vertex_2xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void vertex_3x_oes(gl::fixed_t x, gl::fixed_t y);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void vertex_3xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void vertex_4x_oes(gl::fixed_t x, gl::fixed_t y, gl::fixed_t z);

   /**
    * Required by extensions:
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void vertex_4xv_oes(const  gl::fixed_t * coords);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners2 (gl)
    */
    void combiner_stage_parameterfv_nv(gl::enum_t stage, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_register_combiners2 (gl)
    */
    void get_combiner_stage_parameterfv_nv(gl::enum_t stage, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_stencil_clear_tag (gl)
    */
    void stencil_clear_tag_ext(gl::sizei_t stencilTagBits, gl::uint_t stencilClearTag);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void get_vertex_attrib_ldv_ext(gl::uint_t index, gl::enum_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l1d_ext(gl::uint_t index, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l1dv_ext(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l2d_ext(gl::uint_t index, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l2dv_ext(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l3d_ext(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l3dv_ext(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l4d_ext(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l4dv_ext(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_vertex_attrib_64bit (gl)
    */
    void vertex_attrib_l_pointer_ext(gl::uint_t index, gl::int_t size, gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_AMD_vertex_shader_tessellator (gl)
    */
    void tessellation_factor_amd(gl::float_t factor);

   /**
    * Required by extensions:
    *  - GL_AMD_vertex_shader_tessellator (gl)
    */
    void tessellation_mode_amd(gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_ARB_invalidate_subdata (glcore,gl)
    */
    void invalidate_buffer_data(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_invalidate_subdata (glcore,gl)
    */
    void invalidate_buffer_sub_data(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t length);

   /**
    * Required by extensions:
    *  - GL_ARB_invalidate_subdata (glcore,gl)
    */
    void invalidate_framebuffer(gl::enum_t target, gl::sizei_t numAttachments, const  gl::enum_t * attachments);

   /**
    * Required by extensions:
    *  - GL_ARB_invalidate_subdata (glcore,gl)
    */
    void invalidate_sub_framebuffer(gl::enum_t target, gl::sizei_t numAttachments, const  gl::enum_t * attachments, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_invalidate_subdata (glcore,gl)
    */
    void invalidate_tex_image(gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_ARB_invalidate_subdata (glcore,gl)
    */
    void invalidate_tex_sub_image(gl::uint_t texture, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth);

   /**
    * Required by extensions:
    *  - GL_NV_present_video (gl)
    */
    void get_videoi_64v_nv(gl::uint_t video_slot, gl::enum_t pname, gl::int64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_present_video (gl)
    */
    void get_videoiv_nv(gl::uint_t video_slot, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_present_video (gl)
    */
    void get_videoui_64v_nv(gl::uint_t video_slot, gl::enum_t pname, gl::uint64EXT_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_present_video (gl)
    */
    void get_videouiv_nv(gl::uint_t video_slot, gl::enum_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_present_video (gl)
    */
    void present_frame_dual_fill_nv(gl::uint_t video_slot, gl::uint64EXT_t minPresentTime, gl::uint_t beginPresentTimeId, gl::uint_t presentDurationId, gl::enum_t type, gl::enum_t target0, gl::uint_t fill0, gl::enum_t target1, gl::uint_t fill1, gl::enum_t target2, gl::uint_t fill2, gl::enum_t target3, gl::uint_t fill3);

   /**
    * Required by extensions:
    *  - GL_NV_present_video (gl)
    */
    void present_frame_keyed_nv(gl::uint_t video_slot, gl::uint64EXT_t minPresentTime, gl::uint_t beginPresentTimeId, gl::uint_t presentDurationId, gl::enum_t type, gl::enum_t target0, gl::uint_t fill0, gl::uint_t key0, gl::enum_t target1, gl::uint_t fill1, gl::uint_t key1);

   /**
    * Required by extensions:
    *  - GL_OES_texture_cube_map (gles1)
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void get_tex_genxv_oes(gl::enum_t coord, gl::enum_t pname, gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_OES_texture_cube_map (gles1)
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_genx_oes(gl::enum_t coord, gl::enum_t pname, gl::fixed_t param);

   /**
    * Required by extensions:
    *  - GL_OES_texture_cube_map (gles1)
    *  - GL_OES_fixed_point (gles1,gl)
    */
    void tex_genxv_oes(gl::enum_t coord, gl::enum_t pname, const  gl::fixed_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_program_parameters (gl)
    */
    void program_env_parameters_4fv_ext(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_program_parameters (gl)
    */
    void program_local_parameters_4fv_ext(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_list_priority (gl)
    */
    void get_list_parameterfv_sgix(gl::uint_t list, list_parameter_name_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_list_priority (gl)
    */
    void get_list_parameteriv_sgix(gl::uint_t list, list_parameter_name_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_list_priority (gl)
    */
    void list_parameterf_sgix(gl::uint_t list, list_parameter_name_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_list_priority (gl)
    */
    void list_parameterfv_sgix(gl::uint_t list, list_parameter_name_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_SGIX_list_priority (gl)
    */
    void list_parameteri_sgix(gl::uint_t list, list_parameter_name_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_SGIX_list_priority (gl)
    */
    void list_parameteriv_sgix(gl::uint_t list, list_parameter_name_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_buffers (gl)
    */
    void draw_buffers_arb(gl::sizei_t n, const  gl::enum_t * bufs);

   /**
    * Required by extensions:
    *  - GL_ARB_compute_variable_group_size (glcore,gl)
    */
    void dispatch_compute_group_size_arb(gl::uint_t num_groups_x, gl::uint_t num_groups_y, gl::uint_t num_groups_z, gl::uint_t group_size_x, gl::uint_t group_size_y, gl::uint_t group_size_z);

   /**
    * Required by extensions:
    *  - GL_SGIS_texture4D (gl)
    */
    void tex_image_4dsgis(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::sizei_t size4d, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_SGIS_texture4D (gl)
    */
    void tex_sub_image_4dsgis(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::int_t woffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::sizei_t size4d, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_texture3D (gl)
    */
    void tex_image_3dext(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_EXT_texture3D (gl)
    */
    void tex_sub_image_3dext(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, pixel_type_t type, const  void * pixels);

   /**
    * Required by extensions:
    *  - GL_AMD_interleaved_elements (gl)
    */
    void vertex_attrib_parameteri_amd(gl::uint_t index, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void active_texture_arb(texture_unit_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void client_active_texture_arb(texture_unit_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1d_arb(texture_unit_t target, gl::double_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1dv_arb(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1f_arb(texture_unit_t target, gl::float_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1fv_arb(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1i_arb(texture_unit_t target, gl::int_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1iv_arb(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1s_arb(texture_unit_t target, gl::short_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1sv_arb(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2d_arb(texture_unit_t target, gl::double_t s, gl::double_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2dv_arb(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2f_arb(texture_unit_t target, gl::float_t s, gl::float_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2fv_arb(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2i_arb(texture_unit_t target, gl::int_t s, gl::int_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2iv_arb(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2s_arb(texture_unit_t target, gl::short_t s, gl::short_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2sv_arb(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3d_arb(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3dv_arb(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3f_arb(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3fv_arb(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3i_arb(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3iv_arb(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3s_arb(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3sv_arb(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4d_arb(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r, gl::double_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4dv_arb(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4f_arb(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4fv_arb(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4i_arb(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r, gl::int_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4iv_arb(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4s_arb(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r, gl::short_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4sv_arb(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3b_ext(gl::byte_t red, gl::byte_t green, gl::byte_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3bv_ext(const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3d_ext(gl::double_t red, gl::double_t green, gl::double_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3dv_ext(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3f_ext(gl::float_t red, gl::float_t green, gl::float_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3fv_ext(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3i_ext(gl::int_t red, gl::int_t green, gl::int_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3iv_ext(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3s_ext(gl::short_t red, gl::short_t green, gl::short_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3sv_ext(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ub_ext(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ubv_ext(const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ui_ext(gl::uint_t red, gl::uint_t green, gl::uint_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3uiv_ext(const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3us_ext(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3usv_ext(const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_pointer_ext(gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_NV_conservative_raster (gl)
    */
    void subpixel_precision_bias_nv(gl::uint_t xbits, gl::uint_t ybits);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_elements_base_vertex (glcore,gl)
    */
    void draw_elements_base_vertex(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_elements_base_vertex (glcore,gl)
    */
    void draw_elements_instanced_base_vertex(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::sizei_t instancecount, gl::int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_elements_base_vertex (glcore,gl)
    */
    void draw_range_elements_base_vertex(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_elements_base_vertex (glcore,gl)
    */
    void multi_draw_elements_base_vertex(gl::enum_t mode, const  gl::sizei_t * count, draw_elements_type_t type, const  void ** indices, gl::sizei_t drawcount, const  gl::int_t * basevertex);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void depth_range_arrayv(gl::uint_t first, gl::sizei_t count, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void depth_range_indexed(gl::uint_t index, gl::double_t n, gl::double_t f);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void get_doublei_v(gl::enum_t target, gl::uint_t index, gl::double_t * data);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void get_floati_v(gl::enum_t target, gl::uint_t index, gl::float_t * data);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void scissor_arrayv(gl::uint_t first, gl::sizei_t count, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void scissor_indexed(gl::uint_t index, gl::int_t left, gl::int_t bottom, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void scissor_indexedv(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void viewport_arrayv(gl::uint_t first, gl::sizei_t count, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void viewport_indexedf(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t w, gl::float_t h);

   /**
    * Required by extensions:
    *  - GL_ARB_viewport_array (glcore,gl)
    */
    void viewport_indexedfv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void active_shader_program(gl::uint_t pipeline, gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void bind_program_pipeline(gl::uint_t pipeline);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    gl::uint_t create_shader_programv(gl::enum_t type, gl::sizei_t count, const  gl::char_t ** strings);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void delete_program_pipelines(gl::sizei_t n, const  gl::uint_t * pipelines);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void gen_program_pipelines(gl::sizei_t n, gl::uint_t * pipelines);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void get_program_pipeline_info_log(gl::uint_t pipeline, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * infoLog);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void get_program_pipelineiv(gl::uint_t pipeline, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    gl::boolean_t is_program_pipeline(gl::uint_t pipeline);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_1d(gl::uint_t program, gl::int_t location, gl::double_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_1dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_1f(gl::uint_t program, gl::int_t location, gl::float_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_1fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_1i(gl::uint_t program, gl::int_t location, gl::int_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_1iv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_1ui(gl::uint_t program, gl::int_t location, gl::uint_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_1uiv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_2d(gl::uint_t program, gl::int_t location, gl::double_t v0, gl::double_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_2dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_2f(gl::uint_t program, gl::int_t location, gl::float_t v0, gl::float_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_2fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_2i(gl::uint_t program, gl::int_t location, gl::int_t v0, gl::int_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_2iv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_2ui(gl::uint_t program, gl::int_t location, gl::uint_t v0, gl::uint_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_2uiv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_3d(gl::uint_t program, gl::int_t location, gl::double_t v0, gl::double_t v1, gl::double_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_3dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_3f(gl::uint_t program, gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_3fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_3i(gl::uint_t program, gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_3iv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_3ui(gl::uint_t program, gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_3uiv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_4d(gl::uint_t program, gl::int_t location, gl::double_t v0, gl::double_t v1, gl::double_t v2, gl::double_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_4dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_4f(gl::uint_t program, gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2, gl::float_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_4fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_4i(gl::uint_t program, gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2, gl::int_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_4iv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_4ui(gl::uint_t program, gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2, gl::uint_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_4uiv(gl::uint_t program, gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_2dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_2fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_2x_3dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_2x_3fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_2x_4dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_2x_4fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_3dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_3fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_3x_2dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_3x_2fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_3x_4dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_3x_4fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_4dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_4fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_4x_2dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_4x_2fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_4x_3dv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void program_uniform_matrix_4x_3fv(gl::uint_t program, gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void use_program_stages(gl::uint_t pipeline, gl::bitmask<use_program_stage_flags_t> stages, gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_separate_shader_objects (glcore,gl)
    */
    void validate_program_pipeline(gl::uint_t pipeline);

   /**
    * Required by extensions:
    *  - GL_AMD_sample_positions (gl)
    */
    void set_multisamplefv_amd(gl::enum_t pname, gl::uint_t index, const  gl::float_t * val);

   /**
    * Required by extensions:
    *  - GL_ATI_draw_buffers (gl)
    */
    void draw_buffers_ati(gl::sizei_t n, const  gl::enum_t * bufs);

   /**
    * Required by extensions:
    *  - GL_EXT_depth_bounds_test (gl)
    */
    void depth_bounds_ext(gl::clampd_t zmin, gl::clampd_t zmax);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void array_object_ati(enable_cap_t array, gl::int_t size, gl::enum_t type, gl::sizei_t stride, gl::uint_t buffer, gl::uint_t offset);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void free_object_buffer_ati(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void get_array_objectfv_ati(enable_cap_t array, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void get_array_objectiv_ati(enable_cap_t array, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void get_object_bufferfv_ati(gl::uint_t buffer, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void get_object_bufferiv_ati(gl::uint_t buffer, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void get_variant_array_objectfv_ati(gl::uint_t id, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void get_variant_array_objectiv_ati(gl::uint_t id, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    gl::boolean_t is_object_buffer_ati(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    gl::uint_t new_object_buffer_ati(gl::sizei_t size, const  void * pointer, gl::enum_t usage);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void update_object_buffer_ati(gl::uint_t buffer, gl::uint_t offset, gl::sizei_t size, const  void * pointer, gl::enum_t preserve);

   /**
    * Required by extensions:
    *  - GL_ATI_vertex_array_object (gl)
    */
    void variant_array_object_ati(gl::uint_t id, gl::enum_t type, gl::sizei_t stride, gl::uint_t buffer, gl::uint_t offset);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void active_varying_nv(gl::uint_t program, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void begin_transform_feedback_nv(gl::enum_t primitiveMode);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void bind_buffer_base_nv(gl::enum_t target, gl::uint_t index, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void bind_buffer_offset_nv(gl::enum_t target, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void bind_buffer_range_nv(gl::enum_t target, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void end_transform_feedback_nv();

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void get_active_varying_nv(gl::uint_t program, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::sizei_t * size, gl::enum_t * type, gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void get_transform_feedback_varying_nv(gl::uint_t program, gl::uint_t index, gl::int_t * location);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    gl::int_t get_varying_location_nv(gl::uint_t program, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void transform_feedback_attribs_nv(gl::sizei_t count, const  gl::int_t * attribs, gl::enum_t bufferMode);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void transform_feedback_stream_attribs_nv(gl::sizei_t count, const  gl::int_t * attribs, gl::sizei_t nbuffers, const  gl::int_t * bufstreams, gl::enum_t bufferMode);

   /**
    * Required by extensions:
    *  - GL_NV_transform_feedback (gl)
    */
    void transform_feedback_varyings_nv(gl::uint_t program, gl::sizei_t count, const  gl::int_t * locations, gl::enum_t bufferMode);

   /**
    * Required by extensions:
    *  - GL_NV_occlusion_query (gl)
    */
    void begin_occlusion_query_nv(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_NV_occlusion_query (gl)
    */
    void delete_occlusion_queries_nv(gl::sizei_t n, const  gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_NV_occlusion_query (gl)
    */
    void end_occlusion_query_nv();

   /**
    * Required by extensions:
    *  - GL_NV_occlusion_query (gl)
    */
    void gen_occlusion_queries_nv(gl::sizei_t n, gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_NV_occlusion_query (gl)
    */
    void get_occlusion_queryiv_nv(gl::uint_t id, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_occlusion_query (gl)
    */
    void get_occlusion_queryuiv_nv(gl::uint_t id, gl::enum_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_occlusion_query (gl)
    */
    gl::boolean_t is_occlusion_query_nv(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ATI_element_array (gl)
    */
    void draw_element_array_ati(primitive_type_t mode, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_ATI_element_array (gl)
    */
    void draw_range_element_array_ati(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_ATI_element_array (gl)
    */
    void element_pointer_ati(gl::enum_t type, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_indirect_parameters (glcore,gl)
    */
    void multi_draw_arrays_indirect_count_arb(gl::enum_t mode, gl::intptr_t indirect, gl::intptr_t drawcount, gl::sizei_t maxdrawcount, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_ARB_indirect_parameters (glcore,gl)
    */
    void multi_draw_elements_indirect_count_arb(gl::enum_t mode, gl::enum_t type, gl::intptr_t indirect, gl::intptr_t drawcount, gl::sizei_t maxdrawcount, gl::sizei_t stride);

   /**
    * Required by extensions:
    *  - GL_NV_fragment_program (gl)
    */
    void get_program_named_parameterdv_nv(gl::uint_t id, gl::sizei_t len, const  gl::ubyte_t * name, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_fragment_program (gl)
    */
    void get_program_named_parameterfv_nv(gl::uint_t id, gl::sizei_t len, const  gl::ubyte_t * name, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_fragment_program (gl)
    */
    void program_named_parameter_4d_nv(gl::uint_t id, gl::sizei_t len, const  gl::ubyte_t * name, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_NV_fragment_program (gl)
    */
    void program_named_parameter_4dv_nv(gl::uint_t id, gl::sizei_t len, const  gl::ubyte_t * name, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_NV_fragment_program (gl)
    */
    void program_named_parameter_4f_nv(gl::uint_t id, gl::sizei_t len, const  gl::ubyte_t * name, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_NV_fragment_program (gl)
    */
    void program_named_parameter_4fv_nv(gl::uint_t id, gl::sizei_t len, const  gl::ubyte_t * name, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_AMD_stencil_operation_extended (gl)
    */
    void stencil_op_value_amd(stencil_face_direction_t face, gl::uint_t value);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void begin_video_capture_nv(gl::uint_t video_capture_slot);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void bind_video_capture_stream_buffer_nv(gl::uint_t video_capture_slot, gl::uint_t stream, gl::enum_t frame_region, gl::intptrARB_t offset);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void bind_video_capture_stream_texture_nv(gl::uint_t video_capture_slot, gl::uint_t stream, gl::enum_t frame_region, gl::enum_t target, gl::uint_t texture);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void end_video_capture_nv(gl::uint_t video_capture_slot);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void get_video_capture_streamdv_nv(gl::uint_t video_capture_slot, gl::uint_t stream, gl::enum_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void get_video_capture_streamfv_nv(gl::uint_t video_capture_slot, gl::uint_t stream, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void get_video_capture_streamiv_nv(gl::uint_t video_capture_slot, gl::uint_t stream, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void get_video_captureiv_nv(gl::uint_t video_capture_slot, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    gl::enum_t video_capture_nv(gl::uint_t video_capture_slot, gl::uint_t * sequence_num, gl::uint64EXT_t * capture_time);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void video_capture_stream_parameterdv_nv(gl::uint_t video_capture_slot, gl::uint_t stream, gl::enum_t pname, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void video_capture_stream_parameterfv_nv(gl::uint_t video_capture_slot, gl::uint_t stream, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_video_capture (gl)
    */
    void video_capture_stream_parameteriv_nv(gl::uint_t video_capture_slot, gl::uint_t stream, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void bind_sampler(gl::uint_t unit, gl::uint_t sampler);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void delete_samplers(gl::sizei_t count, const  gl::uint_t * samplers);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void gen_samplers(gl::sizei_t count, gl::uint_t * samplers);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void get_sampler_parameter_iiv(gl::uint_t sampler, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void get_sampler_parameter_iuiv(gl::uint_t sampler, gl::enum_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void get_sampler_parameterfv(gl::uint_t sampler, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void get_sampler_parameteriv(gl::uint_t sampler, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    gl::boolean_t is_sampler(gl::uint_t sampler);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void sampler_parameter_iiv(gl::uint_t sampler, gl::enum_t pname, const  gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void sampler_parameter_iuiv(gl::uint_t sampler, gl::enum_t pname, const  gl::uint_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void sampler_parameterf(gl::uint_t sampler, gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void sampler_parameterfv(gl::uint_t sampler, gl::enum_t pname, const  gl::float_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void sampler_parameteri(gl::uint_t sampler, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_sampler_objects (glcore,gl)
    */
    void sampler_parameteriv(gl::uint_t sampler, gl::enum_t pname, const  gl::int_t * param);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void get_uniformdv(gl::uint_t program, gl::int_t location, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_1d(gl::int_t location, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_1dv(gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_2d(gl::int_t location, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_2dv(gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_3d(gl::int_t location, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_3dv(gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_4d(gl::int_t location, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_4dv(gl::int_t location, gl::sizei_t count, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_2dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_2x_3dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_2x_4dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_3dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_3x_2dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_3x_4dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_4dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_4x_2dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_gpu_shader_fp64 (glcore,gl)
    */
    void uniform_matrix_4x_3dv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::double_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_copy_texture (gl)
    */
    void copy_tex_image_1dext(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::int_t border);

   /**
    * Required by extensions:
    *  - GL_EXT_copy_texture (gl)
    */
    void copy_tex_image_2dext(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, gl::int_t border);

   /**
    * Required by extensions:
    *  - GL_EXT_copy_texture (gl)
    */
    void copy_tex_sub_image_1dext(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_EXT_copy_texture (gl)
    */
    void copy_tex_sub_image_2dext(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_copy_texture (gl)
    */
    void copy_tex_sub_image_3dext(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_matrix_palette (gl)
    */
    void current_palette_matrix_arb(gl::int_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_matrix_palette (gl)
    */
    void matrix_index_pointer_arb(gl::int_t size, gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_matrix_palette (gl)
    */
    void matrix_indexubv_arb(gl::int_t size, const  gl::ubyte_t * indices);

   /**
    * Required by extensions:
    *  - GL_ARB_matrix_palette (gl)
    */
    void matrix_indexuiv_arb(gl::int_t size, const  gl::uint_t * indices);

   /**
    * Required by extensions:
    *  - GL_ARB_matrix_palette (gl)
    */
    void matrix_indexusv_arb(gl::int_t size, const  gl::ushort_t * indices);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void multi_tex_coord_1b_oes(gl::enum_t texture, gl::byte_t s);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void multi_tex_coord_1bv_oes(gl::enum_t texture, const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void multi_tex_coord_2b_oes(gl::enum_t texture, gl::byte_t s, gl::byte_t t);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void multi_tex_coord_2bv_oes(gl::enum_t texture, const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void multi_tex_coord_3b_oes(gl::enum_t texture, gl::byte_t s, gl::byte_t t, gl::byte_t r);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void multi_tex_coord_3bv_oes(gl::enum_t texture, const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void multi_tex_coord_4b_oes(gl::enum_t texture, gl::byte_t s, gl::byte_t t, gl::byte_t r, gl::byte_t q);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void multi_tex_coord_4bv_oes(gl::enum_t texture, const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void tex_coord_1b_oes(gl::byte_t s);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void tex_coord_1bv_oes(const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void tex_coord_2b_oes(gl::byte_t s, gl::byte_t t);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void tex_coord_2bv_oes(const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void tex_coord_3b_oes(gl::byte_t s, gl::byte_t t, gl::byte_t r);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void tex_coord_3bv_oes(const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void tex_coord_4b_oes(gl::byte_t s, gl::byte_t t, gl::byte_t r, gl::byte_t q);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void tex_coord_4bv_oes(const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void vertex_2b_oes(gl::byte_t x, gl::byte_t y);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void vertex_2bv_oes(const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void vertex_3b_oes(gl::byte_t x, gl::byte_t y, gl::byte_t z);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void vertex_3bv_oes(const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void vertex_4b_oes(gl::byte_t x, gl::byte_t y, gl::byte_t z, gl::byte_t w);

   /**
    * Required by extensions:
    *  - GL_OES_byte_coordinates (gles1,gl)
    */
    void vertex_4bv_oes(const  gl::byte_t * coords);

   /**
    * Required by extensions:
    *  - GL_NV_parameter_buffer_object (gl)
    */
    void program_buffer_parameters_iiv_nv(gl::enum_t target, gl::uint_t bindingIndex, gl::uint_t wordIndex, gl::sizei_t count, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_parameter_buffer_object (gl)
    */
    void program_buffer_parameters_iuiv_nv(gl::enum_t target, gl::uint_t bindingIndex, gl::uint_t wordIndex, gl::sizei_t count, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_NV_parameter_buffer_object (gl)
    */
    void program_buffer_parametersfv_nv(gl::enum_t target, gl::uint_t bindingIndex, gl::uint_t wordIndex, gl::sizei_t count, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_range_elements (gl)
    */
    void draw_range_elements_ext(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::sizei_t count, draw_elements_type_t type, const  void * indices);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    void vdpau_fini_nv();

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    void vdpau_get_surfaceiv_nv(gl::vdpauSurfaceNV_t surface, gl::enum_t pname, gl::sizei_t bufSize, gl::sizei_t * length, gl::int_t * values);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    void vdpau_init_nv(const  void * vdpDevice, const  void * getProcAddress);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    gl::boolean_t vdpau_is_surface_nv(gl::vdpauSurfaceNV_t surface);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    void vdpau_map_surfaces_nv(gl::sizei_t numSurfaces, const  gl::vdpauSurfaceNV_t * surfaces);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    gl::vdpauSurfaceNV_t vdpau_register_output_surface_nv(const  void * vdpSurface, gl::enum_t target, gl::sizei_t numTextureNames, const  gl::uint_t * textureNames);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    gl::vdpauSurfaceNV_t vdpau_register_video_surface_nv(const  void * vdpSurface, gl::enum_t target, gl::sizei_t numTextureNames, const  gl::uint_t * textureNames);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    void vdpau_surface_access_nv(gl::vdpauSurfaceNV_t surface, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    void vdpau_unmap_surfaces_nv(gl::sizei_t numSurface, const  gl::vdpauSurfaceNV_t * surfaces);

   /**
    * Required by extensions:
    *  - GL_NV_vdpau_interop (gl)
    */
    void vdpau_unregister_surface_nv(gl::vdpauSurfaceNV_t surface);

   /**
    * Required by extensions:
    *  - GL_ARB_sparse_buffer (glcore,gl)
    */
    void buffer_page_commitment_arb(gl::enum_t target, gl::intptr_t offset, gl::sizeiptr_t size, gl::boolean_t commit);

   /**
    * Required by extensions:
    *  - GL_ARB_sparse_buffer (glcore,gl)
    */
    void named_buffer_page_commitment_arb(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size, gl::boolean_t commit);

   /**
    * Required by extensions:
    *  - GL_ARB_sparse_buffer (glcore,gl)
    */
    void named_buffer_page_commitment_ext(gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size, gl::boolean_t commit);

   /**
    * Required by extensions:
    *  - GL_GREMEDY_string_marker (gl)
    */
    void string_marker_gremedy(gl::sizei_t len, const  void * string);

} // namespace gl2

#endif // #ifndef EXTENSIONS__H
