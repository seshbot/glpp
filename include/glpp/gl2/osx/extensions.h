/**
 * This file was autogenerated by glgen (https://github.com/seshbot/glgen) on 2015-06-16
 * Command line: src/gen.py assets/gl.xml -p assets/gl-patch.xml -o ../glpp/ --includesubdir include/glpp --sourcesubdir src --namespace gl2:osx --force --cpp --gl2only --extensionsimportfile assets/extensions_osx.txt --extensionsoutputfilename extensions
 */

#ifndef GL2_OSX_EXTENSIONS__H
#define GL2_OSX_EXTENSIONS__H


#include "../../types.h"
#include "../enums.h"
#include "../extensions_enums.h"

namespace gl2 {
namespace osx {

   /**
    * command aliases
    */
  
   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void draw_element_array(primitive_type_t mode, gl::int_t first, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void draw_range_element_array(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::int_t first, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void element_pointer(gl::enum_t type, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void multi_draw_element_array(primitive_type_t mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void multi_draw_range_element_array(primitive_type_t mode, gl::uint_t start, gl::uint_t end, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void delete_fences(gl::sizei_t n, const  gl::uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void finish_fence(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void finish_object(gl::enum_t object, gl::int_t name);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void gen_fences(gl::sizei_t n, gl::uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t is_fence(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void set_fence(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t test_fence(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t test_object(gl::enum_t object, gl::uint_t name);

   /**
    * Required by extensions:
    *  - GL_APPLE_flush_buffer_range (gl)
    */
    void buffer_parameteri(gl::enum_t target, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_APPLE_flush_buffer_range (gl)
    */
    void flush_mapped_buffer_range(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_APPLE_object_purgeable (gl)
    */
    gl::enum_t object_purgeable(gl::enum_t objectType, gl::uint_t name, gl::enum_t option);

   /**
    * Required by extensions:
    *  - GL_APPLE_object_purgeable (gl)
    */
    gl::enum_t object_unpurgeable(gl::enum_t objectType, gl::uint_t name, gl::enum_t option);

   /**
    * Required by extensions:
    *  - GL_APPLE_texture_range (gl)
    */
    void get_tex_parameter_pointerv(gl::enum_t target, gl::enum_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_APPLE_texture_range (gl)
    */
    void texture_range(gl::enum_t target, gl::sizei_t length, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void bind_vertex_array(gl::uint_t array);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void delete_vertex_arrays(gl::sizei_t n, const  gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void gen_vertex_arrays(gl::sizei_t n, gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    gl::boolean_t is_vertex_array(gl::uint_t array);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void flush_vertex_array_range(gl::sizei_t length, void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void vertex_array_parameteri(gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void vertex_array_range(gl::sizei_t length, void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void disable_vertex_attrib(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void enable_vertex_attrib(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    gl::boolean_t is_vertex_attrib_enabled(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_1d(gl::uint_t index, gl::uint_t size, gl::double_t u1, gl::double_t u2, gl::int_t stride, gl::int_t order, const  gl::double_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_1f(gl::uint_t index, gl::uint_t size, gl::float_t u1, gl::float_t u2, gl::int_t stride, gl::int_t order, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_2d(gl::uint_t index, gl::uint_t size, gl::double_t u1, gl::double_t u2, gl::int_t ustride, gl::int_t uorder, gl::double_t v1, gl::double_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::double_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_2f(gl::uint_t index, gl::uint_t size, gl::float_t u1, gl::float_t u2, gl::int_t ustride, gl::int_t uorder, gl::float_t v1, gl::float_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_ARB_color_buffer_float (gl)
    */
    void clamp_color(gl::enum_t target, gl::enum_t clamp);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_buffers (gl)
    */
    void draw_buffers(gl::sizei_t n, const  gl::enum_t * bufs);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_instanced (gl)
    */
    void draw_arrays_instanced(primitive_type_t mode, gl::int_t first, gl::sizei_t count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_instanced (gl)
    */
    void draw_elements_instanced(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void bind_program(gl::enum_t target, gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void delete_programs(gl::sizei_t n, const  gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void gen_programs(gl::sizei_t n, gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_env_parameterdv(gl::enum_t target, gl::uint_t index, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_env_parameterfv(gl::enum_t target, gl::uint_t index, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_local_parameterdv(gl::enum_t target, gl::uint_t index, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_local_parameterfv(gl::enum_t target, gl::uint_t index, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_string(gl::enum_t target, gl::enum_t pname, void * string);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_programiv(gl::enum_t target, get_programiv_p_name_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    gl::boolean_t is_program(gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_env_parameter_4d(gl::enum_t target, gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_env_parameter_4dv(gl::enum_t target, gl::uint_t index, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_env_parameter_4f(gl::enum_t target, gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_env_parameter_4fv(gl::enum_t target, gl::uint_t index, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_local_parameter_4d(gl::enum_t target, gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_local_parameter_4dv(gl::enum_t target, gl::uint_t index, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_local_parameter_4f(gl::enum_t target, gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_local_parameter_4fv(gl::enum_t target, gl::uint_t index, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_string(gl::enum_t target, gl::enum_t format, gl::sizei_t len, const  void * string);

   /**
    * Required by extensions:
    *  - GL_ARB_instanced_arrays (gl)
    */
    void vertex_attrib_divisor(gl::uint_t index, gl::uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_ARB_multisample (gl)
    */
    void sample_coverage(gl::float_t value, gl::boolean_t invert);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void active_texture(texture_unit_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void client_active_texture(texture_unit_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1d(texture_unit_t target, gl::double_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1dv(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1f(texture_unit_t target, gl::float_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1fv(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1i(texture_unit_t target, gl::int_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1iv(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1s(texture_unit_t target, gl::short_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1sv(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2d(texture_unit_t target, gl::double_t s, gl::double_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2dv(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2f(texture_unit_t target, gl::float_t s, gl::float_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2fv(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2i(texture_unit_t target, gl::int_t s, gl::int_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2iv(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2s(texture_unit_t target, gl::short_t s, gl::short_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2sv(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3d(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3dv(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3f(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3fv(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3i(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3iv(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3s(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3sv(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4d(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r, gl::double_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4dv(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4f(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4fv(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4i(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r, gl::int_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4iv(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4s(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r, gl::short_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4sv(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void begin_query(gl::enum_t target, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void delete_queries(gl::sizei_t n, const  gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void end_query(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void gen_queries(gl::sizei_t n, gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_query_objectiv(gl::uint_t id, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_query_objectuiv(gl::uint_t id, gl::enum_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_queryiv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    gl::boolean_t is_query(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_point_parameters (gl)
    */
    void point_parameterf(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_point_parameters (gl)
    */
    void point_parameterfv(gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void attach_object(gl::handleARB_t containerObj, gl::handleARB_t obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void compile_shader(gl::handleARB_t shaderObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t create_program_object();

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t create_shader_object(gl::enum_t shaderType);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void delete_object(gl::handleARB_t obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void detach_object(gl::handleARB_t containerObj, gl::handleARB_t attachedObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_active_uniform(gl::handleARB_t programObj, gl::uint_t index, gl::sizei_t maxLength, gl::sizei_t * length, gl::int_t * size, uniform_type_t * type, gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_attached_objects(gl::handleARB_t containerObj, gl::sizei_t maxCount, gl::sizei_t * count, gl::handleARB_t * obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t get_handle(gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_info_log(gl::handleARB_t obj, gl::sizei_t maxLength, gl::sizei_t * length, gl::charARB_t * infoLog);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_object_parameterfv(gl::handleARB_t obj, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_object_parameteriv(gl::handleARB_t obj, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_shader_source(gl::handleARB_t obj, gl::sizei_t maxLength, gl::sizei_t * length, gl::charARB_t * source);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::int_t get_uniform_location(gl::handleARB_t programObj, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_uniformfv(gl::handleARB_t programObj, gl::int_t location, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_uniformiv(gl::handleARB_t programObj, gl::int_t location, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void link_program(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void shader_source(gl::handleARB_t shaderObj, gl::sizei_t count, const  gl::charARB_t ** string, const  gl::int_t * length);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1f(gl::int_t location, gl::float_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1i(gl::int_t location, gl::int_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2f(gl::int_t location, gl::float_t v0, gl::float_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2i(gl::int_t location, gl::int_t v0, gl::int_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3f(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3i(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4f(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2, gl::float_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4i(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2, gl::int_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_2fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_3fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_4fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void use_program_object(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void validate_program(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_1d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_2d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_3d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_1d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_2d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_3d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void get_compressed_tex_image(texture_target_t target, gl::int_t level, void * img);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void load_transpose_matrixd(const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void load_transpose_matrixf(const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void mult_transpose_matrixd(const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void mult_transpose_matrixf(const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void vertex_blend(gl::int_t count);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weight_pointer(gl::int_t size, gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightbv(gl::int_t size, const  gl::byte_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightdv(gl::int_t size, const  gl::double_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightfv(gl::int_t size, const  gl::float_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightiv(gl::int_t size, const  gl::int_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightsv(gl::int_t size, const  gl::short_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightubv(gl::int_t size, const  gl::ubyte_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightuiv(gl::int_t size, const  gl::uint_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightusv(gl::int_t size, const  gl::ushort_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void bind_buffer(buffer_target_arb_t target, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void buffer_data(buffer_target_arb_t target, gl::sizeiptrARB_t size, const  void * data, buffer_usage_arb_t usage);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void buffer_sub_data(buffer_target_arb_t target, gl::intptrARB_t offset, gl::sizeiptrARB_t size, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void delete_buffers(gl::sizei_t n, const  gl::uint_t * buffers);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void gen_buffers(gl::sizei_t n, gl::uint_t * buffers);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_parameteriv(buffer_target_arb_t target, buffer_p_name_arb_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_pointerv(buffer_target_arb_t target, gl::enum_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_sub_data(buffer_target_arb_t target, gl::intptrARB_t offset, gl::sizeiptrARB_t size, void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    gl::boolean_t is_buffer(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void * map_buffer(buffer_target_arb_t target, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    gl::boolean_t unmap_buffer(buffer_target_arb_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void disable_vertex_attrib_array(gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void enable_vertex_attrib_array(gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attrib_pointerv(gl::uint_t index, vertex_attrib_pointer_property_arb_t pname, void ** pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribdv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribfv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribiv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1d(gl::uint_t index, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1dv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1f(gl::uint_t index, gl::float_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1fv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1s(gl::uint_t index, gl::short_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1sv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2d(gl::uint_t index, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2dv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2f(gl::uint_t index, gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2fv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2s(gl::uint_t index, gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2sv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3d(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3dv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3f(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3fv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3s(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3sv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nbv(gl::uint_t index, const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_niv(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nsv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nub(gl::uint_t index, gl::ubyte_t x, gl::ubyte_t y, gl::ubyte_t z, gl::ubyte_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nubv(gl::uint_t index, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nuiv(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nusv(gl::uint_t index, const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4bv(gl::uint_t index, const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4d(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4dv(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4f(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4fv(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4iv(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4s(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4sv(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4ubv(gl::uint_t index, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4uiv(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4usv(gl::uint_t index, const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_pointer(gl::uint_t index, gl::int_t size, vertex_attrib_pointer_type_t type, gl::boolean_t normalized, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    void bind_attrib_location(gl::handleARB_t programObj, gl::uint_t index, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_active_attrib(gl::handleARB_t programObj, gl::uint_t index, gl::sizei_t maxLength, gl::sizei_t * length, gl::int_t * size, attrib_type_t * type, gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    gl::int_t get_attrib_location(gl::handleARB_t programObj, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2d(gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2dv(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2f(gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2fv(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2i(gl::int_t x, gl::int_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2iv(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2s(gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2sv(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3d(gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3dv(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3f(gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3fv(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3i(gl::int_t x, gl::int_t y, gl::int_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3iv(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3s(gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3sv(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    gl::int_t get_uniform_buffer_size(gl::uint_t program, gl::int_t location);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    gl::intptr_t get_uniform_offset(gl::uint_t program, gl::int_t location);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    void uniform_buffer(gl::uint_t program, gl::int_t location, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_equation_separate (gl)
    */
    void blend_equation_separate(blend_equation_mode_ext_t modeRGB, blend_equation_mode_ext_t modeAlpha);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_func_separate (gl)
    */
    void blend_func_separate(blend_func_separate_parameter_ext_t sfactorRGB, blend_func_separate_parameter_ext_t dfactorRGB, blend_func_separate_parameter_ext_t sfactorAlpha, blend_func_separate_parameter_ext_t dfactorAlpha);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_label (gl,gles2)
    */
    void get_object_label(gl::enum_t type, gl::uint_t object, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_label (gl,gles2)
    */
    void label_object(gl::enum_t type, gl::uint_t object, gl::sizei_t length, const  gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gl,gles2)
    */
    void insert_event_marker(gl::sizei_t length, const  gl::char_t * marker);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gl,gles2)
    */
    void pop_group_marker();

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gl,gles2)
    */
    void push_group_marker(gl::sizei_t length, const  gl::char_t * marker);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void disable_indexed(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void enable_indexed(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void get_boolean_indexedv(gl::enum_t target, gl::uint_t index, gl::boolean_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void get_integer_indexedv(gl::enum_t target, gl::uint_t index, gl::int_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    gl::boolean_t is_enabled_indexed(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    *  - GL_EXT_timer_query (gl)
    */
    void get_query_objecti_64v(gl::uint_t id, gl::enum_t pname, gl::int64_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    *  - GL_EXT_timer_query (gl)
    */
    void get_query_objectui_64v(gl::uint_t id, gl::enum_t pname, gl::uint64_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void color_mask_indexed(gl::uint_t index, gl::boolean_t r, gl::boolean_t g, gl::boolean_t b, gl::boolean_t a);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_range_elements (gl)
    */
    void draw_range_elements(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::sizei_t count, draw_elements_type_t type, const  void * indices);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coord_pointer(fog_pointer_type_ext_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordd(gl::double_t coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coorddv(const  gl::double_t * coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordf(gl::float_t coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordfv(const  gl::float_t * coord);

   /**
    * Required by extensions:
    *  - GL_EXT_geometry_shader4 (gl)
    */
    void program_parameteri(gl::uint_t program, gl::enum_t pname, gl::int_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_program_parameters (gl)
    */
    void program_env_parameters_4fv(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_program_parameters (gl)
    */
    void program_local_parameters_4fv(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void bind_frag_data_location(gl::uint_t program, gl::uint_t color, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    gl::int_t get_frag_data_location(gl::uint_t program, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void get_uniformuiv(gl::uint_t program, gl::int_t location, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_1ui(gl::int_t location, gl::uint_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_1uiv(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_2ui(gl::int_t location, gl::uint_t v0, gl::uint_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_2uiv(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_3ui(gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_3uiv(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_4ui(gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2, gl::uint_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_4uiv(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_arrays (gl,gles1,gles2)
    */
    void multi_draw_arrays(primitive_type_t mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_arrays (gl,gles1,gles2)
    */
    void multi_draw_elements(primitive_type_t mode, const  gl::sizei_t * count, draw_elements_type_t type, const  void * * indices, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3b(gl::byte_t red, gl::byte_t green, gl::byte_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3bv(const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3d(gl::double_t red, gl::double_t green, gl::double_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3dv(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3f(gl::float_t red, gl::float_t green, gl::float_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3fv(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3i(gl::int_t red, gl::int_t green, gl::int_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3iv(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3s(gl::short_t red, gl::short_t green, gl::short_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3sv(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ub(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ubv(const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ui(gl::uint_t red, gl::uint_t green, gl::uint_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3uiv(const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3us(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3usv(const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_pointer(gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_stencil_two_side (gl)
    */
    void active_stencil_face(stencil_face_direction_t face);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    *  - GL_EXT_texture_integer (gl)
    */
    void get_tex_parameter_iiv(texture_target_t target, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    *  - GL_EXT_texture_integer (gl)
    */
    void get_tex_parameter_iuiv(texture_target_t target, get_texture_parameter_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    *  - GL_EXT_texture_integer (gl)
    */
    void tex_parameter_iiv(texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    *  - GL_EXT_texture_integer (gl)
    */
    void tex_parameter_iuiv(texture_target_t target, texture_parameter_name_t pname, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    */
    void clear_color_ii(gl::int_t red, gl::int_t green, gl::int_t blue, gl::int_t alpha);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    */
    void clear_color_iui(gl::uint_t red, gl::uint_t green, gl::uint_t blue, gl::uint_t alpha);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void begin_transform_feedback(gl::enum_t primitiveMode);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_base(gl::enum_t target, gl::uint_t index, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_offset(gl::enum_t target, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_range(gl::enum_t target, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void end_transform_feedback();

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void get_transform_feedback_varying(gl::uint_t program, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::sizei_t * size, gl::enum_t * type, gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void transform_feedback_varyings(gl::uint_t program, gl::sizei_t count, const  gl::char_t ** varyings, gl::enum_t bufferMode);

   /**
    * Required by extensions:
    *  - GL_NV_conditional_render (gl,gles2)
    */
    void begin_conditional_render(gl::uint_t id, gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_NV_conditional_render (gl,gles2)
    */
    void end_conditional_render();

   /**
    * Required by extensions:
    *  - GL_NV_texture_barrier (gl)
    */
    void texture_barrier();


   /**
    * non-aliased commands
    */
  
   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void draw_element_array_apple(primitive_type_t mode, gl::int_t first, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void draw_range_element_array_apple(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::int_t first, gl::sizei_t count);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void element_pointer_apple(gl::enum_t type, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void multi_draw_element_array_apple(primitive_type_t mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_APPLE_element_array (gl)
    */
    void multi_draw_range_element_array_apple(primitive_type_t mode, gl::uint_t start, gl::uint_t end, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void delete_fences_apple(gl::sizei_t n, const  gl::uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void finish_fence_apple(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void finish_object_apple(gl::enum_t object, gl::int_t name);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void gen_fences_apple(gl::sizei_t n, gl::uint_t * fences);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t is_fence_apple(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    void set_fence_apple(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t test_fence_apple(gl::uint_t fence);

   /**
    * Required by extensions:
    *  - GL_APPLE_fence (gl)
    */
    gl::boolean_t test_object_apple(gl::enum_t object, gl::uint_t name);

   /**
    * Required by extensions:
    *  - GL_APPLE_flush_buffer_range (gl)
    */
    void buffer_parameteri_apple(gl::enum_t target, gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_APPLE_flush_buffer_range (gl)
    */
    void flush_mapped_buffer_range_apple(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_APPLE_object_purgeable (gl)
    */
    void get_object_parameteriv_apple(gl::enum_t objectType, gl::uint_t name, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_APPLE_object_purgeable (gl)
    */
    gl::enum_t object_purgeable_apple(gl::enum_t objectType, gl::uint_t name, gl::enum_t option);

   /**
    * Required by extensions:
    *  - GL_APPLE_object_purgeable (gl)
    */
    gl::enum_t object_unpurgeable_apple(gl::enum_t objectType, gl::uint_t name, gl::enum_t option);

   /**
    * Required by extensions:
    *  - GL_APPLE_texture_range (gl)
    */
    void get_tex_parameter_pointerv_apple(gl::enum_t target, gl::enum_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_APPLE_texture_range (gl)
    */
    void texture_range_apple(gl::enum_t target, gl::sizei_t length, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void bind_vertex_array_apple(gl::uint_t array);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void delete_vertex_arrays_apple(gl::sizei_t n, const  gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    void gen_vertex_arrays_apple(gl::sizei_t n, gl::uint_t * arrays);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_object (gl)
    */
    gl::boolean_t is_vertex_array_apple(gl::uint_t array);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void flush_vertex_array_range_apple(gl::sizei_t length, void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void vertex_array_parameteri_apple(gl::enum_t pname, gl::int_t param);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_array_range (gl)
    */
    void vertex_array_range_apple(gl::sizei_t length, void * pointer);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void disable_vertex_attrib_apple(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void enable_vertex_attrib_apple(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    gl::boolean_t is_vertex_attrib_enabled_apple(gl::uint_t index, gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_1d_apple(gl::uint_t index, gl::uint_t size, gl::double_t u1, gl::double_t u2, gl::int_t stride, gl::int_t order, const  gl::double_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_1f_apple(gl::uint_t index, gl::uint_t size, gl::float_t u1, gl::float_t u2, gl::int_t stride, gl::int_t order, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_2d_apple(gl::uint_t index, gl::uint_t size, gl::double_t u1, gl::double_t u2, gl::int_t ustride, gl::int_t uorder, gl::double_t v1, gl::double_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::double_t * points);

   /**
    * Required by extensions:
    *  - GL_APPLE_vertex_program_evaluators (gl)
    */
    void map_vertex_attrib_2f_apple(gl::uint_t index, gl::uint_t size, gl::float_t u1, gl::float_t u2, gl::int_t ustride, gl::int_t uorder, gl::float_t v1, gl::float_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::float_t * points);

   /**
    * Required by extensions:
    *  - GL_ARB_color_buffer_float (gl)
    */
    void clamp_color_arb(gl::enum_t target, gl::enum_t clamp);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_buffers (gl)
    */
    void draw_buffers_arb(gl::sizei_t n, const  gl::enum_t * bufs);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_elements_base_vertex (gl,glcore)
    */
    void draw_elements_base_vertex(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_elements_base_vertex (gl,glcore)
    */
    void draw_elements_instanced_base_vertex(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::sizei_t instancecount, gl::int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_elements_base_vertex (gl,glcore)
    */
    void draw_range_elements_base_vertex(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::int_t basevertex);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_elements_base_vertex (gl,glcore)
    */
    void multi_draw_elements_base_vertex(gl::enum_t mode, const  gl::sizei_t * count, draw_elements_type_t type, const  void ** indices, gl::sizei_t drawcount, const  gl::int_t * basevertex);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_instanced (gl)
    */
    void draw_arrays_instanced_arb(primitive_type_t mode, gl::int_t first, gl::sizei_t count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ARB_draw_instanced (gl)
    */
    void draw_elements_instanced_arb(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void bind_program_arb(gl::enum_t target, gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void delete_programs_arb(gl::sizei_t n, const  gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void gen_programs_arb(gl::sizei_t n, gl::uint_t * programs);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_env_parameterdv_arb(gl::enum_t target, gl::uint_t index, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_env_parameterfv_arb(gl::enum_t target, gl::uint_t index, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_local_parameterdv_arb(gl::enum_t target, gl::uint_t index, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_local_parameterfv_arb(gl::enum_t target, gl::uint_t index, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_program_string_arb(gl::enum_t target, gl::enum_t pname, void * string);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void get_programiv_arb(gl::enum_t target, get_programiv_p_name_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    gl::boolean_t is_program_arb(gl::uint_t program);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_env_parameter_4d_arb(gl::enum_t target, gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_env_parameter_4dv_arb(gl::enum_t target, gl::uint_t index, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_env_parameter_4f_arb(gl::enum_t target, gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_env_parameter_4fv_arb(gl::enum_t target, gl::uint_t index, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_local_parameter_4d_arb(gl::enum_t target, gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_local_parameter_4dv_arb(gl::enum_t target, gl::uint_t index, const  gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_local_parameter_4f_arb(gl::enum_t target, gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_local_parameter_4fv_arb(gl::enum_t target, gl::uint_t index, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_fragment_program (gl)
    *  - GL_ARB_vertex_program (gl)
    */
    void program_string_arb(gl::enum_t target, gl::enum_t format, gl::sizei_t len, const  void * string);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void bind_framebuffer(framebuffer_target_t target, gl::uint_t framebuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void bind_renderbuffer(renderbuffer_target_t target, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void blit_framebuffer(gl::int_t srcX0, gl::int_t srcY0, gl::int_t srcX1, gl::int_t srcY1, gl::int_t dstX0, gl::int_t dstY0, gl::int_t dstX1, gl::int_t dstY1, gl::bitmask<clear_buffer_flags_t> mask, gl::enum_t filter);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    framebuffer_status_t check_framebuffer_status(framebuffer_target_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void delete_framebuffers(gl::sizei_t n, const  gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void delete_renderbuffers(gl::sizei_t n, const  gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void framebuffer_renderbuffer(framebuffer_target_t target, framebuffer_attachment_t attachment, renderbuffer_target_t renderbuffertarget, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void framebuffer_texture_1d(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void framebuffer_texture_2d(framebuffer_target_t target, framebuffer_attachment_t attachment, framebuffer_texture_target_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void framebuffer_texture_3d(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t textarget, gl::uint_t texture, gl::int_t level, gl::int_t zoffset);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void framebuffer_texture_layer(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, gl::int_t layer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void gen_framebuffers(gl::sizei_t n, gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void gen_renderbuffers(gl::sizei_t n, gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void generate_mipmap(mipmap_target_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void get_framebuffer_attachment_parameteriv(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void get_renderbuffer_parameteriv(renderbuffer_target_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    gl::boolean_t is_framebuffer(gl::uint_t framebuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    gl::boolean_t is_renderbuffer(gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void renderbuffer_storage(renderbuffer_target_t target, internal_format_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_framebuffer_object (gl,glcore)
    */
    void renderbuffer_storage_multisample(renderbuffer_target_t target, gl::sizei_t samples, internal_format_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void blend_color(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void blend_equation(blend_equation_mode_t mode);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void color_sub_table(gl::enum_t target, gl::sizei_t start, gl::sizei_t count, pixel_format_t format, pixel_type_t type, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void color_table(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * table);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void color_table_parameterfv(gl::enum_t target, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void color_table_parameteriv(gl::enum_t target, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void convolution_filter_1d(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * image);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void convolution_filter_2d(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * image);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void convolution_parameterf(gl::enum_t target, gl::enum_t pname, gl::float_t params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void convolution_parameterfv(gl::enum_t target, gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void convolution_parameteri(gl::enum_t target, gl::enum_t pname, gl::int_t params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void convolution_parameteriv(gl::enum_t target, gl::enum_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void copy_color_sub_table(gl::enum_t target, gl::sizei_t start, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void copy_color_table(gl::enum_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void copy_convolution_filter_1d(gl::enum_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void copy_convolution_filter_2d(gl::enum_t target, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_color_table(gl::enum_t target, pixel_format_t format, pixel_type_t type, void * table);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_color_table_parameterfv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_color_table_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_convolution_filter(gl::enum_t target, pixel_format_t format, pixel_type_t type, void * image);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_convolution_parameterfv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_convolution_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_histogram(gl::enum_t target, gl::boolean_t reset, pixel_format_t format, pixel_type_t type, void * values);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_histogram_parameterfv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_histogram_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_minmax(gl::enum_t target, gl::boolean_t reset, pixel_format_t format, pixel_type_t type, void * values);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_minmax_parameterfv(gl::enum_t target, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_minmax_parameteriv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void get_separable_filter(gl::enum_t target, pixel_format_t format, pixel_type_t type, void * row, void * column, void * span);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void histogram(gl::enum_t target, gl::sizei_t width, gl::enum_t internalformat, gl::boolean_t sink);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void minmax(gl::enum_t target, gl::enum_t internalformat, gl::boolean_t sink);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void reset_histogram(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void reset_minmax(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_imaging (gl,glcore)
    */
    void separable_filter_2d(gl::enum_t target, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * row, const  void * column);

   /**
    * Required by extensions:
    *  - GL_ARB_instanced_arrays (gl)
    */
    void vertex_attrib_divisor_arb(gl::uint_t index, gl::uint_t divisor);

   /**
    * Required by extensions:
    *  - GL_ARB_multisample (gl)
    */
    void sample_coverage_arb(gl::float_t value, gl::boolean_t invert);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void active_texture_arb(texture_unit_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void client_active_texture_arb(texture_unit_t texture);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1d_arb(texture_unit_t target, gl::double_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1dv_arb(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1f_arb(texture_unit_t target, gl::float_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1fv_arb(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1i_arb(texture_unit_t target, gl::int_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1iv_arb(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1s_arb(texture_unit_t target, gl::short_t s);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_1sv_arb(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2d_arb(texture_unit_t target, gl::double_t s, gl::double_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2dv_arb(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2f_arb(texture_unit_t target, gl::float_t s, gl::float_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2fv_arb(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2i_arb(texture_unit_t target, gl::int_t s, gl::int_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2iv_arb(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2s_arb(texture_unit_t target, gl::short_t s, gl::short_t t);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_2sv_arb(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3d_arb(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3dv_arb(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3f_arb(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3fv_arb(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3i_arb(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3iv_arb(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3s_arb(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_3sv_arb(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4d_arb(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r, gl::double_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4dv_arb(texture_unit_t target, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4f_arb(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4fv_arb(texture_unit_t target, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4i_arb(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r, gl::int_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4iv_arb(texture_unit_t target, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4s_arb(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r, gl::short_t q);

   /**
    * Required by extensions:
    *  - GL_ARB_multitexture (gl)
    */
    void multi_tex_coord_4sv_arb(texture_unit_t target, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void begin_query_arb(gl::enum_t target, gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void delete_queries_arb(gl::sizei_t n, const  gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void end_query_arb(gl::enum_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void gen_queries_arb(gl::sizei_t n, gl::uint_t * ids);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_query_objectiv_arb(gl::uint_t id, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_query_objectuiv_arb(gl::uint_t id, gl::enum_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    void get_queryiv_arb(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_occlusion_query (gl)
    */
    gl::boolean_t is_query_arb(gl::uint_t id);

   /**
    * Required by extensions:
    *  - GL_ARB_point_parameters (gl)
    */
    void point_parameterf_arb(gl::enum_t pname, gl::float_t param);

   /**
    * Required by extensions:
    *  - GL_ARB_point_parameters (gl)
    */
    void point_parameterfv_arb(gl::enum_t pname, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_provoking_vertex (gl,glcore)
    */
    void provoking_vertex(gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void attach_object_arb(gl::handleARB_t containerObj, gl::handleARB_t obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void compile_shader_arb(gl::handleARB_t shaderObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t create_program_object_arb();

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t create_shader_object_arb(gl::enum_t shaderType);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void delete_object_arb(gl::handleARB_t obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void detach_object_arb(gl::handleARB_t containerObj, gl::handleARB_t attachedObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_active_uniform_arb(gl::handleARB_t programObj, gl::uint_t index, gl::sizei_t maxLength, gl::sizei_t * length, gl::int_t * size, uniform_type_t * type, gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_attached_objects_arb(gl::handleARB_t containerObj, gl::sizei_t maxCount, gl::sizei_t * count, gl::handleARB_t * obj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::handleARB_t get_handle_arb(gl::enum_t pname);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_info_log_arb(gl::handleARB_t obj, gl::sizei_t maxLength, gl::sizei_t * length, gl::charARB_t * infoLog);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_object_parameterfv_arb(gl::handleARB_t obj, gl::enum_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_object_parameteriv_arb(gl::handleARB_t obj, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_shader_source_arb(gl::handleARB_t obj, gl::sizei_t maxLength, gl::sizei_t * length, gl::charARB_t * source);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    gl::int_t get_uniform_location_arb(gl::handleARB_t programObj, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_uniformfv_arb(gl::handleARB_t programObj, gl::int_t location, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void get_uniformiv_arb(gl::handleARB_t programObj, gl::int_t location, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void link_program_arb(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void shader_source_arb(gl::handleARB_t shaderObj, gl::sizei_t count, const  gl::charARB_t ** string, const  gl::int_t * length);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1f_arb(gl::int_t location, gl::float_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1fv_arb(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1i_arb(gl::int_t location, gl::int_t v0);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_1iv_arb(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2f_arb(gl::int_t location, gl::float_t v0, gl::float_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2fv_arb(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2i_arb(gl::int_t location, gl::int_t v0, gl::int_t v1);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_2iv_arb(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3f_arb(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3fv_arb(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3i_arb(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_3iv_arb(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4f_arb(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2, gl::float_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4fv_arb(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4i_arb(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2, gl::int_t v3);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_4iv_arb(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_2fv_arb(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_3fv_arb(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void uniform_matrix_4fv_arb(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void use_program_object_arb(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_shader_objects (gl)
    */
    void validate_program_arb(gl::handleARB_t programObj);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (gl,glcore)
    */
    gl::enum_t client_wait_sync(gl::sync_t sync, gl::bitfield_t flags, gl::uint64_t timeout);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (gl,glcore)
    */
    void delete_sync(gl::sync_t sync);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (gl,glcore)
    */
    gl::sync_t fence_sync(gl::enum_t condition, gl::bitfield_t flags);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (gl,glcore)
    */
    void get_integer_64v(gl::enum_t pname, gl::int64_t * data);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (gl,glcore)
    */
    void get_synciv(gl::sync_t sync, gl::enum_t pname, gl::sizei_t bufSize, gl::sizei_t * length, gl::int_t * values);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (gl,glcore)
    */
    gl::boolean_t is_sync(gl::sync_t sync);

   /**
    * Required by extensions:
    *  - GL_ARB_sync (gl,glcore)
    */
    void wait_sync(gl::sync_t sync, gl::bitfield_t flags, gl::uint64_t timeout);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_1darb(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_2darb(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_image_3darb(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_1darb(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_2darb(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void compressed_tex_sub_image_3darb(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_texture_compression (gl)
    */
    void get_compressed_tex_image_arb(texture_target_t target, gl::int_t level, void * img);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void load_transpose_matrixd_arb(const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void load_transpose_matrixf_arb(const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void mult_transpose_matrixd_arb(const  gl::double_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_transpose_matrix (gl)
    */
    void mult_transpose_matrixf_arb(const  gl::float_t * m);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void vertex_blend_arb(gl::int_t count);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weight_pointer_arb(gl::int_t size, gl::enum_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightbv_arb(gl::int_t size, const  gl::byte_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightdv_arb(gl::int_t size, const  gl::double_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightfv_arb(gl::int_t size, const  gl::float_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightiv_arb(gl::int_t size, const  gl::int_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightsv_arb(gl::int_t size, const  gl::short_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightubv_arb(gl::int_t size, const  gl::ubyte_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightuiv_arb(gl::int_t size, const  gl::uint_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_blend (gl)
    */
    void weightusv_arb(gl::int_t size, const  gl::ushort_t * weights);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void bind_buffer_arb(buffer_target_arb_t target, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void buffer_data_arb(buffer_target_arb_t target, gl::sizeiptrARB_t size, const  void * data, buffer_usage_arb_t usage);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void buffer_sub_data_arb(buffer_target_arb_t target, gl::intptrARB_t offset, gl::sizeiptrARB_t size, const  void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void delete_buffers_arb(gl::sizei_t n, const  gl::uint_t * buffers);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void gen_buffers_arb(gl::sizei_t n, gl::uint_t * buffers);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_parameteriv_arb(buffer_target_arb_t target, buffer_p_name_arb_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_pointerv_arb(buffer_target_arb_t target, gl::enum_t pname, void ** params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void get_buffer_sub_data_arb(buffer_target_arb_t target, gl::intptrARB_t offset, gl::sizeiptrARB_t size, void * data);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    gl::boolean_t is_buffer_arb(gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    void * map_buffer_arb(buffer_target_arb_t target, gl::enum_t access);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_buffer_object (gl)
    */
    gl::boolean_t unmap_buffer_arb(buffer_target_arb_t target);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void disable_vertex_attrib_array_arb(gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void enable_vertex_attrib_array_arb(gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attrib_pointerv_arb(gl::uint_t index, vertex_attrib_pointer_property_arb_t pname, void ** pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribdv_arb(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::double_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribfv_arb(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_vertex_attribiv_arb(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1d_arb(gl::uint_t index, gl::double_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1dv_arb(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1f_arb(gl::uint_t index, gl::float_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1fv_arb(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1s_arb(gl::uint_t index, gl::short_t x);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_1sv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2d_arb(gl::uint_t index, gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2dv_arb(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2f_arb(gl::uint_t index, gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2fv_arb(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2s_arb(gl::uint_t index, gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_2sv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3d_arb(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3dv_arb(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3f_arb(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3fv_arb(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3s_arb(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_3sv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nbv_arb(gl::uint_t index, const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_niv_arb(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nsv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nub_arb(gl::uint_t index, gl::ubyte_t x, gl::ubyte_t y, gl::ubyte_t z, gl::ubyte_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nubv_arb(gl::uint_t index, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nuiv_arb(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4_nusv_arb(gl::uint_t index, const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4bv_arb(gl::uint_t index, const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4d_arb(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4dv_arb(gl::uint_t index, const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4f_arb(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4fv_arb(gl::uint_t index, const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4iv_arb(gl::uint_t index, const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4s_arb(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4sv_arb(gl::uint_t index, const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4ubv_arb(gl::uint_t index, const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4uiv_arb(gl::uint_t index, const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_4usv_arb(gl::uint_t index, const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_program (gl)
    *  - GL_ARB_vertex_shader (gl)
    */
    void vertex_attrib_pointer_arb(gl::uint_t index, gl::int_t size, vertex_attrib_pointer_type_t type, gl::boolean_t normalized, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    void bind_attrib_location_arb(gl::handleARB_t programObj, gl::uint_t index, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    void get_active_attrib_arb(gl::handleARB_t programObj, gl::uint_t index, gl::sizei_t maxLength, gl::sizei_t * length, gl::int_t * size, attrib_type_t * type, gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_vertex_shader (gl)
    */
    gl::int_t get_attrib_location_arb(gl::handleARB_t programObj, const  gl::charARB_t * name);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2d_arb(gl::double_t x, gl::double_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2dv_arb(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2f_arb(gl::float_t x, gl::float_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2fv_arb(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2i_arb(gl::int_t x, gl::int_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2iv_arb(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2s_arb(gl::short_t x, gl::short_t y);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_2sv_arb(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3d_arb(gl::double_t x, gl::double_t y, gl::double_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3dv_arb(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3f_arb(gl::float_t x, gl::float_t y, gl::float_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3fv_arb(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3i_arb(gl::int_t x, gl::int_t y, gl::int_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3iv_arb(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3s_arb(gl::short_t x, gl::short_t y, gl::short_t z);

   /**
    * Required by extensions:
    *  - GL_ARB_window_pos (gl)
    */
    void window_pos_3sv_arb(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_ATI_separate_stencil (gl)
    */
    void stencil_func_separate_ati(stencil_function_t frontfunc, stencil_function_t backfunc, gl::int_t ref, gl::uint_t mask);

   /**
    * Required by extensions:
    *  - GL_ATI_separate_stencil (gl)
    */
    void stencil_op_separate_ati(stencil_face_direction_t face, stencil_op_t sfail, stencil_op_t dpfail, stencil_op_t dppass);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    gl::int_t get_uniform_buffer_size_ext(gl::uint_t program, gl::int_t location);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    gl::intptr_t get_uniform_offset_ext(gl::uint_t program, gl::int_t location);

   /**
    * Required by extensions:
    *  - GL_EXT_bindable_uniform (gl)
    */
    void uniform_buffer_ext(gl::uint_t program, gl::int_t location, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_color (gl)
    */
    void blend_color_ext(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_equation_separate (gl)
    */
    void blend_equation_separate_ext(blend_equation_mode_ext_t modeRGB, blend_equation_mode_ext_t modeAlpha);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_func_separate (gl)
    */
    void blend_func_separate_ext(blend_func_separate_parameter_ext_t sfactorRGB, blend_func_separate_parameter_ext_t dfactorRGB, blend_func_separate_parameter_ext_t sfactorAlpha, blend_func_separate_parameter_ext_t dfactorAlpha);

   /**
    * Required by extensions:
    *  - GL_EXT_blend_minmax (gl,gles1,gles2)
    */
    void blend_equation_ext(blend_equation_mode_ext_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_label (gl,gles2)
    */
    void get_object_label_ext(gl::enum_t type, gl::uint_t object, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_label (gl,gles2)
    */
    void label_object_ext(gl::enum_t type, gl::uint_t object, gl::sizei_t length, const  gl::char_t * label);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gl,gles2)
    */
    void insert_event_marker_ext(gl::sizei_t length, const  gl::char_t * marker);

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gl,gles2)
    */
    void pop_group_marker_ext();

   /**
    * Required by extensions:
    *  - GL_EXT_debug_marker (gl,gles2)
    */
    void push_group_marker_ext(gl::sizei_t length, const  gl::char_t * marker);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void disable_indexed_ext(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void enable_indexed_ext(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void get_boolean_indexedv_ext(gl::enum_t target, gl::uint_t index, gl::boolean_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void get_integer_indexedv_ext(gl::enum_t target, gl::uint_t index, gl::int_t * data);

   /**
    * Required by extensions:
    *  - GL_EXT_direct_state_access (gl)
    *  - GL_EXT_draw_buffers2 (gl)
    */
    gl::boolean_t is_enabled_indexed_ext(gl::enum_t target, gl::uint_t index);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    *  - GL_EXT_timer_query (gl)
    */
    void get_query_objecti_64v_ext(gl::uint_t id, gl::enum_t pname, gl::int64_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_disjoint_timer_query (gles2)
    *  - GL_EXT_timer_query (gl)
    */
    void get_query_objectui_64v_ext(gl::uint_t id, gl::enum_t pname, gl::uint64_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_buffers2 (gl)
    */
    void color_mask_indexed_ext(gl::uint_t index, gl::boolean_t r, gl::boolean_t g, gl::boolean_t b, gl::boolean_t a);

   /**
    * Required by extensions:
    *  - GL_EXT_draw_range_elements (gl)
    */
    void draw_range_elements_ext(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::sizei_t count, draw_elements_type_t type, const  void * indices);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coord_pointer_ext(fog_pointer_type_ext_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordd_ext(gl::double_t coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coorddv_ext(const  gl::double_t * coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordf_ext(gl::float_t coord);

   /**
    * Required by extensions:
    *  - GL_EXT_fog_coord (gl)
    */
    void fog_coordfv_ext(const  gl::float_t * coord);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_blit (gl)
    */
    void blit_framebuffer_ext(gl::int_t srcX0, gl::int_t srcY0, gl::int_t srcX1, gl::int_t srcY1, gl::int_t dstX0, gl::int_t dstY0, gl::int_t dstX1, gl::int_t dstY1, gl::bitmask<clear_buffer_flags_t> mask, gl::enum_t filter);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_multisample (gl)
    *  - GL_EXT_multisampled_render_to_texture (gles1,gles2)
    */
    void renderbuffer_storage_multisample_ext(renderbuffer_target_t target, gl::sizei_t samples, internal_format_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void bind_framebuffer_ext(framebuffer_target_t target, gl::uint_t framebuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void bind_renderbuffer_ext(renderbuffer_target_t target, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    gl::enum_t check_framebuffer_status_ext(framebuffer_target_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void delete_framebuffers_ext(gl::sizei_t n, const  gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void delete_renderbuffers_ext(gl::sizei_t n, const  gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void framebuffer_renderbuffer_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, renderbuffer_target_t renderbuffertarget, gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void framebuffer_texture_1dext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void framebuffer_texture_2dext(framebuffer_target_t target, framebuffer_attachment_t attachment, framebuffer_texture_target_t textarget, gl::uint_t texture, gl::int_t level);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void framebuffer_texture_3dext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t textarget, gl::uint_t texture, gl::int_t level, gl::int_t zoffset);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void gen_framebuffers_ext(gl::sizei_t n, gl::uint_t * framebuffers);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void gen_renderbuffers_ext(gl::sizei_t n, gl::uint_t * renderbuffers);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void generate_mipmap_ext(mipmap_target_t target);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void get_framebuffer_attachment_parameteriv_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void get_renderbuffer_parameteriv_ext(renderbuffer_target_t target, gl::enum_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    gl::boolean_t is_framebuffer_ext(gl::uint_t framebuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    gl::boolean_t is_renderbuffer_ext(gl::uint_t renderbuffer);

   /**
    * Required by extensions:
    *  - GL_EXT_framebuffer_object (gl)
    */
    void renderbuffer_storage_ext(renderbuffer_target_t target, internal_format_t internalformat, gl::sizei_t width, gl::sizei_t height);

   /**
    * Required by extensions:
    *  - GL_EXT_geometry_shader4 (gl)
    */
    void program_parameteri_ext(gl::uint_t program, gl::enum_t pname, gl::int_t value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_program_parameters (gl)
    */
    void program_env_parameters_4fv_ext(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_program_parameters (gl)
    */
    void program_local_parameters_4fv_ext(gl::enum_t target, gl::uint_t index, gl::sizei_t count, const  gl::float_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void bind_frag_data_location_ext(gl::uint_t program, gl::uint_t color, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    gl::int_t get_frag_data_location_ext(gl::uint_t program, const  gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void get_uniformuiv_ext(gl::uint_t program, gl::int_t location, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_1ui_ext(gl::int_t location, gl::uint_t v0);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_1uiv_ext(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_2ui_ext(gl::int_t location, gl::uint_t v0, gl::uint_t v1);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_2uiv_ext(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_3ui_ext(gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_3uiv_ext(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_4ui_ext(gl::int_t location, gl::uint_t v0, gl::uint_t v1, gl::uint_t v2, gl::uint_t v3);

   /**
    * Required by extensions:
    *  - GL_EXT_gpu_shader4 (gl)
    */
    void uniform_4uiv_ext(gl::int_t location, gl::sizei_t count, const  gl::uint_t * value);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_arrays (gl,gles1,gles2)
    */
    void multi_draw_arrays_ext(primitive_type_t mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_multi_draw_arrays (gl,gles1,gles2)
    */
    void multi_draw_elements_ext(primitive_type_t mode, const  gl::sizei_t * count, draw_elements_type_t type, const  void * * indices, gl::sizei_t primcount);

   /**
    * Required by extensions:
    *  - GL_EXT_provoking_vertex (gl)
    */
    void provoking_vertex_ext(gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3b_ext(gl::byte_t red, gl::byte_t green, gl::byte_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3bv_ext(const  gl::byte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3d_ext(gl::double_t red, gl::double_t green, gl::double_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3dv_ext(const  gl::double_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3f_ext(gl::float_t red, gl::float_t green, gl::float_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3fv_ext(const  gl::float_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3i_ext(gl::int_t red, gl::int_t green, gl::int_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3iv_ext(const  gl::int_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3s_ext(gl::short_t red, gl::short_t green, gl::short_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3sv_ext(const  gl::short_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ub_ext(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ubv_ext(const  gl::ubyte_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3ui_ext(gl::uint_t red, gl::uint_t green, gl::uint_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3uiv_ext(const  gl::uint_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3us_ext(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_3usv_ext(const  gl::ushort_t * v);

   /**
    * Required by extensions:
    *  - GL_EXT_secondary_color (gl)
    */
    void secondary_color_pointer_ext(gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

   /**
    * Required by extensions:
    *  - GL_EXT_stencil_two_side (gl)
    */
    void active_stencil_face_ext(stencil_face_direction_t face);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_array (gl)
    *  - GL_NV_geometry_program4 (gl)
    */
    void framebuffer_texture_layer_ext(framebuffer_target_t target, framebuffer_attachment_t attachment, gl::uint_t texture, gl::int_t level, gl::int_t layer);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    *  - GL_EXT_texture_integer (gl)
    */
    void get_tex_parameter_iiv_ext(texture_target_t target, get_texture_parameter_t pname, gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    *  - GL_EXT_texture_integer (gl)
    */
    void get_tex_parameter_iuiv_ext(texture_target_t target, get_texture_parameter_t pname, gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    *  - GL_EXT_texture_integer (gl)
    */
    void tex_parameter_iiv_ext(texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_border_clamp (gles2)
    *  - GL_EXT_texture_integer (gl)
    */
    void tex_parameter_iuiv_ext(texture_target_t target, texture_parameter_name_t pname, const  gl::uint_t * params);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    */
    void clear_color_ii_ext(gl::int_t red, gl::int_t green, gl::int_t blue, gl::int_t alpha);

   /**
    * Required by extensions:
    *  - GL_EXT_texture_integer (gl)
    */
    void clear_color_iui_ext(gl::uint_t red, gl::uint_t green, gl::uint_t blue, gl::uint_t alpha);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void begin_transform_feedback_ext(gl::enum_t primitiveMode);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_base_ext(gl::enum_t target, gl::uint_t index, gl::uint_t buffer);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_offset_ext(gl::enum_t target, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void bind_buffer_range_ext(gl::enum_t target, gl::uint_t index, gl::uint_t buffer, gl::intptr_t offset, gl::sizeiptr_t size);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void end_transform_feedback_ext();

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void get_transform_feedback_varying_ext(gl::uint_t program, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::sizei_t * size, gl::enum_t * type, gl::char_t * name);

   /**
    * Required by extensions:
    *  - GL_EXT_transform_feedback (gl)
    */
    void transform_feedback_varyings_ext(gl::uint_t program, gl::sizei_t count, const  gl::char_t ** varyings, gl::enum_t bufferMode);

   /**
    * Required by extensions:
    *  - GL_NV_conditional_render (gl,gles2)
    */
    void begin_conditional_render_nv(gl::uint_t id, gl::enum_t mode);

   /**
    * Required by extensions:
    *  - GL_NV_conditional_render (gl,gles2)
    */
    void end_conditional_render_nv();

   /**
    * Required by extensions:
    *  - GL_NV_texture_barrier (gl)
    */
    void texture_barrier_nv();

} // namespace osx
} // namespace gl2

#endif // #ifndef GL2_OSX_EXTENSIONS__H
