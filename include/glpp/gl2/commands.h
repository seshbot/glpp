/**
 * This file was autogenerated by glgen (https://github.com/seshbot/glgen) on 2015-06-13
 * Command line: src/gen.py assets/gl.xml -p assets/gl-patch.xml -o ../glpp/ --includesubdir include/glpp --sourcesubdir src --namespace gl2 --force --cpp --gl2only
 */

#ifndef COMMANDS__H
#define COMMANDS__H


#include "../types.h"
#include "enums.h"

namespace gl2 {
    void accum(accum_op_t op, gl::float_t value);

    void active_texture(texture_unit_t texture);

    void alpha_func(alpha_function_t func, gl::float_t ref);

    gl::boolean_t are_textures_resident(gl::sizei_t n, const  gl::uint_t * textures, gl::boolean_t * residences);

    void array_element(gl::int_t i);

    void attach_shader(gl::uint_t program, gl::uint_t shader);

    void begin(primitive_type_t mode);

    void begin_query(gl::enum_t target, gl::uint_t id);

    void bind_attrib_location(gl::uint_t program, gl::uint_t index, const  gl::char_t * name);

    void bind_buffer(buffer_target_arb_t target, gl::uint_t buffer);

    void bind_texture(texture_target_t target, gl::uint_t texture);

    void bitmap(gl::sizei_t width, gl::sizei_t height, gl::float_t xorig, gl::float_t yorig, gl::float_t xmove, gl::float_t ymove, const  gl::ubyte_t * bitmap);

    void blend_color(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha);

    void blend_equation(blend_equation_mode_t mode);

    void blend_equation_separate(blend_equation_mode_ext_t modeRGB, blend_equation_mode_ext_t modeAlpha);

    void blend_func(blending_factor_src_t sfactor, blending_factor_dest_t dfactor);

    void blend_func_separate(blend_func_separate_parameter_ext_t sfactorRGB, blend_func_separate_parameter_ext_t dfactorRGB, blend_func_separate_parameter_ext_t sfactorAlpha, blend_func_separate_parameter_ext_t dfactorAlpha);

    void buffer_data(buffer_target_arb_t target, gl::sizeiptr_t size, const  void * data, buffer_usage_arb_t usage);

    void buffer_sub_data(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t size, const  void * data);

    void call_list(gl::uint_t list);

    void call_lists(gl::sizei_t n, list_name_type_t type, const  void * lists);

    void clear(gl::bitmask<clear_buffer_flags_t> mask);

    void clear_accum(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha);

    void clear_color(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha);

    void clear_depth(gl::double_t depth);

    void clear_index(gl::float_t c);

    void clear_stencil(gl::int_t s);

    void client_active_texture(texture_unit_t texture);

    void clip_plane(clip_plane_name_t plane, const  gl::double_t * equation);

    void color_3b(gl::byte_t red, gl::byte_t green, gl::byte_t blue);

    void color_3bv(const  gl::byte_t * v);

    void color_3d(gl::double_t red, gl::double_t green, gl::double_t blue);

    void color_3dv(const  gl::double_t * v);

    void color_3f(gl::float_t red, gl::float_t green, gl::float_t blue);

    void color_3fv(const  gl::float_t * v);

    void color_3i(gl::int_t red, gl::int_t green, gl::int_t blue);

    void color_3iv(const  gl::int_t * v);

    void color_3s(gl::short_t red, gl::short_t green, gl::short_t blue);

    void color_3sv(const  gl::short_t * v);

    void color_3ub(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue);

    void color_3ubv(const  gl::ubyte_t * v);

    void color_3ui(gl::uint_t red, gl::uint_t green, gl::uint_t blue);

    void color_3uiv(const  gl::uint_t * v);

    void color_3us(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue);

    void color_3usv(const  gl::ushort_t * v);

    void color_4b(gl::byte_t red, gl::byte_t green, gl::byte_t blue, gl::byte_t alpha);

    void color_4bv(const  gl::byte_t * v);

    void color_4d(gl::double_t red, gl::double_t green, gl::double_t blue, gl::double_t alpha);

    void color_4dv(const  gl::double_t * v);

    void color_4f(gl::float_t red, gl::float_t green, gl::float_t blue, gl::float_t alpha);

    void color_4fv(const  gl::float_t * v);

    void color_4i(gl::int_t red, gl::int_t green, gl::int_t blue, gl::int_t alpha);

    void color_4iv(const  gl::int_t * v);

    void color_4s(gl::short_t red, gl::short_t green, gl::short_t blue, gl::short_t alpha);

    void color_4sv(const  gl::short_t * v);

    void color_4ub(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue, gl::ubyte_t alpha);

    void color_4ubv(const  gl::ubyte_t * v);

    void color_4ui(gl::uint_t red, gl::uint_t green, gl::uint_t blue, gl::uint_t alpha);

    void color_4uiv(const  gl::uint_t * v);

    void color_4us(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue, gl::ushort_t alpha);

    void color_4usv(const  gl::ushort_t * v);

    void color_mask(gl::boolean_t red, gl::boolean_t green, gl::boolean_t blue, gl::boolean_t alpha);

    void color_material(material_face_t face, color_material_parameter_t mode);

    void color_pointer(gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

    void compile_shader(gl::uint_t shader);

    void compressed_tex_image_1d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::int_t border, gl::sizei_t imageSize, const  void * data);

    void compressed_tex_image_2d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, gl::sizei_t imageSize, const  void * data);

    void compressed_tex_image_3d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, gl::sizei_t imageSize, const  void * data);

    void compressed_tex_sub_image_1d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

    void compressed_tex_sub_image_2d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

    void compressed_tex_sub_image_3d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, gl::sizei_t imageSize, const  void * data);

    void copy_pixels(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, pixel_copy_type_t type);

    void copy_tex_image_1d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::int_t border);

    void copy_tex_image_2d(texture_target_t target, gl::int_t level, gl::enum_t internalformat, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, gl::int_t border);

    void copy_tex_sub_image_1d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t x, gl::int_t y, gl::sizei_t width);

    void copy_tex_sub_image_2d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

    void copy_tex_sub_image_3d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

    gl::uint_t create_program();

    gl::uint_t create_shader(shader_type_t type);

    void cull_face(cull_face_mode_t mode);

    void delete_buffers(gl::sizei_t n, const  gl::uint_t * buffers);

    void delete_lists(gl::uint_t list, gl::sizei_t range);

    void delete_program(gl::uint_t program);

    void delete_queries(gl::sizei_t n, const  gl::uint_t * ids);

    void delete_shader(gl::uint_t shader);

    void delete_textures(gl::sizei_t n, const  gl::uint_t * textures);

    void depth_func(depth_function_t func);

    void depth_mask(gl::boolean_t flag);

    void depth_range(gl::double_t near_, gl::double_t far_);

    void detach_shader(gl::uint_t program, gl::uint_t shader);

    void disable(enable_cap_t cap);

    void disable_client_state(enable_cap_t array);

    void disable_vertex_attrib_array(gl::uint_t index);

    void draw_arrays(primitive_type_t mode, gl::int_t first, gl::sizei_t count);

    void draw_buffer(draw_buffer_mode_t buf);

    void draw_buffers(gl::sizei_t n, const  gl::enum_t * bufs);

    void draw_elements(primitive_type_t mode, gl::sizei_t count, draw_elements_type_t type, const  void * indices);

    void draw_pixels(gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * pixels);

    void draw_range_elements(primitive_type_t mode, gl::uint_t start, gl::uint_t end, gl::sizei_t count, draw_elements_type_t type, const  void * indices);

    void edge_flag(gl::boolean_t flag);

    void edge_flag_pointer(gl::sizei_t stride, const  void * pointer);

    void edge_flagv(const  gl::boolean_t * flag);

    void enable(enable_cap_t cap);

    void enable_client_state(enable_cap_t array);

    void enable_vertex_attrib_array(gl::uint_t index);

    void end();

    void end_list();

    void end_query(gl::enum_t target);

    void eval_coord_1d(gl::double_t u);

    void eval_coord_1dv(const  gl::double_t * u);

    void eval_coord_1f(gl::float_t u);

    void eval_coord_1fv(const  gl::float_t * u);

    void eval_coord_2d(gl::double_t u, gl::double_t v);

    void eval_coord_2dv(const  gl::double_t * u);

    void eval_coord_2f(gl::float_t u, gl::float_t v);

    void eval_coord_2fv(const  gl::float_t * u);

    void eval_mesh_1(mesh_mode_1_t mode, gl::int_t i1, gl::int_t i2);

    void eval_mesh_2(mesh_mode_2_t mode, gl::int_t i1, gl::int_t i2, gl::int_t j1, gl::int_t j2);

    void eval_point_1(gl::int_t i);

    void eval_point_2(gl::int_t i, gl::int_t j);

    void feedback_buffer(gl::sizei_t size, feedback_type_t type, gl::float_t * buffer);

    void finish();

    void flush();

    void fog_coord_pointer(fog_pointer_type_ext_t type, gl::sizei_t stride, const  void * pointer);

    void fog_coordd(gl::double_t coord);

    void fog_coorddv(const  gl::double_t * coord);

    void fog_coordf(gl::float_t coord);

    void fog_coordfv(const  gl::float_t * coord);

    void fogf(fog_parameter_t pname, gl::float_t param);

    void fogfv(fog_parameter_t pname, const  gl::float_t * params);

    void fogi(fog_parameter_t pname, gl::int_t param);

    void fogiv(fog_parameter_t pname, const  gl::int_t * params);

    void front_face(front_face_direction_t mode);

    void frustum(gl::double_t left, gl::double_t right, gl::double_t bottom, gl::double_t top, gl::double_t zNear, gl::double_t zFar);

    void gen_buffers(gl::sizei_t n, gl::uint_t * buffers);

    gl::uint_t gen_lists(gl::sizei_t range);

    void gen_queries(gl::sizei_t n, gl::uint_t * ids);

    void gen_textures(gl::sizei_t n, gl::uint_t * textures);

    void get_active_attrib(gl::uint_t program, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::int_t * size, attrib_type_t * type, gl::char_t * name);

    void get_active_uniform(gl::uint_t program, gl::uint_t index, gl::sizei_t bufSize, gl::sizei_t * length, gl::int_t * size, uniform_type_t * type, gl::char_t * name);

    void get_attached_shaders(gl::uint_t program, gl::sizei_t maxCount, gl::sizei_t * count, gl::uint_t * shaders);

    gl::int_t get_attrib_location(gl::uint_t program, const  gl::char_t * name);

    void get_booleanv(get_p_name_t pname, gl::boolean_t * data);

    void get_buffer_parameteriv(buffer_target_arb_t target, buffer_p_name_arb_t pname, gl::int_t * params);

    void get_buffer_pointerv(buffer_target_arb_t target, gl::enum_t pname, void ** params);

    void get_buffer_sub_data(buffer_target_arb_t target, gl::intptr_t offset, gl::sizeiptr_t size, void * data);

    void get_clip_plane(clip_plane_name_t plane, gl::double_t * equation);

    void get_compressed_tex_image(texture_target_t target, gl::int_t level, void * img);

    void get_doublev(get_p_name_t pname, gl::double_t * data);

    error_code_t get_error();

    void get_floatv(get_p_name_t pname, gl::float_t * data);

    void get_integerv(get_p_name_t pname, gl::int_t * data);

    void get_lightfv(light_name_t light, light_parameter_t pname, gl::float_t * params);

    void get_lightiv(light_name_t light, light_parameter_t pname, gl::int_t * params);

    void get_mapdv(map_target_t target, get_map_query_t query, gl::double_t * v);

    void get_mapfv(map_target_t target, get_map_query_t query, gl::float_t * v);

    void get_mapiv(map_target_t target, get_map_query_t query, gl::int_t * v);

    void get_materialfv(material_face_t face, material_parameter_t pname, gl::float_t * params);

    void get_materialiv(material_face_t face, material_parameter_t pname, gl::int_t * params);

    void get_pixel_mapfv(pixel_map_t map, gl::float_t * values);

    void get_pixel_mapuiv(pixel_map_t map, gl::uint_t * values);

    void get_pixel_mapusv(pixel_map_t map, gl::ushort_t * values);

    void get_pointerv(get_pointerv_p_name_t pname, void ** params);

    void get_polygon_stipple(gl::ubyte_t * mask);

    void get_program_info_log(gl::uint_t program, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * infoLog);

    void get_programiv(gl::uint_t program, get_programiv_p_name_t pname, gl::int_t * params);

    void get_query_objectiv(gl::uint_t id, gl::enum_t pname, gl::int_t * params);

    void get_query_objectuiv(gl::uint_t id, gl::enum_t pname, gl::uint_t * params);

    void get_queryiv(gl::enum_t target, gl::enum_t pname, gl::int_t * params);

    void get_shader_info_log(gl::uint_t shader, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * infoLog);

    void get_shader_source(gl::uint_t shader, gl::sizei_t bufSize, gl::sizei_t * length, gl::char_t * source);

    void get_shaderiv(gl::uint_t shader, get_shaderiv_p_name_t pname, gl::int_t * params);

    const gl::ubyte_t * get_string(string_name_t name);

    void get_tex_envfv(texture_env_target_t target, texture_env_parameter_t pname, gl::float_t * params);

    void get_tex_enviv(texture_env_target_t target, texture_env_parameter_t pname, gl::int_t * params);

    void get_tex_gendv(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::double_t * params);

    void get_tex_genfv(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::float_t * params);

    void get_tex_geniv(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::int_t * params);

    void get_tex_image(texture_target_t target, gl::int_t level, pixel_format_t format, pixel_type_t type, void * pixels);

    void get_tex_level_parameterfv(texture_target_t target, gl::int_t level, get_texture_parameter_t pname, gl::float_t * params);

    void get_tex_level_parameteriv(texture_target_t target, gl::int_t level, get_texture_parameter_t pname, gl::int_t * params);

    void get_tex_parameterfv(texture_target_t target, get_texture_parameter_t pname, gl::float_t * params);

    void get_tex_parameteriv(texture_target_t target, get_texture_parameter_t pname, gl::int_t * params);

    gl::int_t get_uniform_location(gl::uint_t program, const  gl::char_t * name);

    void get_uniformfv(gl::uint_t program, gl::int_t location, gl::float_t * params);

    void get_uniformiv(gl::uint_t program, gl::int_t location, gl::int_t * params);

    void get_vertex_attrib_pointerv(gl::uint_t index, vertex_attrib_pointer_property_arb_t pname, void ** pointer);

    void get_vertex_attribdv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::double_t * params);

    void get_vertex_attribfv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::float_t * params);

    void get_vertex_attribiv(gl::uint_t index, vertex_attrib_property_arb_t pname, gl::int_t * params);

    void hint(hint_target_t target, hint_mode_t mode);

    void index_mask(gl::uint_t mask);

    void index_pointer(index_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

    void indexd(gl::double_t c);

    void indexdv(const  gl::double_t * c);

    void indexf(gl::float_t c);

    void indexfv(const  gl::float_t * c);

    void indexi(gl::int_t c);

    void indexiv(const  gl::int_t * c);

    void indexs(gl::short_t c);

    void indexsv(const  gl::short_t * c);

    void indexub(gl::ubyte_t c);

    void indexubv(const  gl::ubyte_t * c);

    void init_names();

    void interleaved_arrays(interleaved_array_format_t format, gl::sizei_t stride, const  void * pointer);

    gl::boolean_t is_buffer(gl::uint_t buffer);

    gl::boolean_t is_enabled(enable_cap_t cap);

    gl::boolean_t is_list(gl::uint_t list);

    gl::boolean_t is_program(gl::uint_t program);

    gl::boolean_t is_query(gl::uint_t id);

    gl::boolean_t is_shader(gl::uint_t shader);

    gl::boolean_t is_texture(gl::uint_t texture);

    void light_modelf(light_model_parameter_t pname, gl::float_t param);

    void light_modelfv(light_model_parameter_t pname, const  gl::float_t * params);

    void light_modeli(light_model_parameter_t pname, gl::int_t param);

    void light_modeliv(light_model_parameter_t pname, const  gl::int_t * params);

    void lightf(light_name_t light, light_parameter_t pname, gl::float_t param);

    void lightfv(light_name_t light, light_parameter_t pname, const  gl::float_t * params);

    void lighti(light_name_t light, light_parameter_t pname, gl::int_t param);

    void lightiv(light_name_t light, light_parameter_t pname, const  gl::int_t * params);

    void line_stipple(gl::int_t factor, gl::ushort_t pattern);

    void line_width(gl::float_t width);

    void link_program(gl::uint_t program);

    void list_base(gl::uint_t base);

    void load_identity();

    void load_matrixd(const  gl::double_t * m);

    void load_matrixf(const  gl::float_t * m);

    void load_name(gl::uint_t name);

    void load_transpose_matrixd(const  gl::double_t * m);

    void load_transpose_matrixf(const  gl::float_t * m);

    void logic_op(logic_op_t opcode);

    void map_1d(map_target_t target, gl::double_t u1, gl::double_t u2, gl::int_t stride, gl::int_t order, const  gl::double_t * points);

    void map_1f(map_target_t target, gl::float_t u1, gl::float_t u2, gl::int_t stride, gl::int_t order, const  gl::float_t * points);

    void map_2d(map_target_t target, gl::double_t u1, gl::double_t u2, gl::int_t ustride, gl::int_t uorder, gl::double_t v1, gl::double_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::double_t * points);

    void map_2f(map_target_t target, gl::float_t u1, gl::float_t u2, gl::int_t ustride, gl::int_t uorder, gl::float_t v1, gl::float_t v2, gl::int_t vstride, gl::int_t vorder, const  gl::float_t * points);

    void * map_buffer(buffer_target_arb_t target, gl::enum_t access);

    void map_grid_1d(gl::int_t un, gl::double_t u1, gl::double_t u2);

    void map_grid_1f(gl::int_t un, gl::float_t u1, gl::float_t u2);

    void map_grid_2d(gl::int_t un, gl::double_t u1, gl::double_t u2, gl::int_t vn, gl::double_t v1, gl::double_t v2);

    void map_grid_2f(gl::int_t un, gl::float_t u1, gl::float_t u2, gl::int_t vn, gl::float_t v1, gl::float_t v2);

    void materialf(material_face_t face, material_parameter_t pname, gl::float_t param);

    void materialfv(material_face_t face, material_parameter_t pname, const  gl::float_t * params);

    void materiali(material_face_t face, material_parameter_t pname, gl::int_t param);

    void materialiv(material_face_t face, material_parameter_t pname, const  gl::int_t * params);

    void matrix_mode(matrix_mode_t mode);

    void mult_matrixd(const  gl::double_t * m);

    void mult_matrixf(const  gl::float_t * m);

    void mult_transpose_matrixd(const  gl::double_t * m);

    void mult_transpose_matrixf(const  gl::float_t * m);

    void multi_draw_arrays(primitive_type_t mode, const  gl::int_t * first, const  gl::sizei_t * count, gl::sizei_t drawcount);

    void multi_draw_elements(primitive_type_t mode, const  gl::sizei_t * count, draw_elements_type_t type, const  void ** indices, gl::sizei_t drawcount);

    void multi_tex_coord_1d(texture_unit_t target, gl::double_t s);

    void multi_tex_coord_1dv(texture_unit_t target, const  gl::double_t * v);

    void multi_tex_coord_1f(texture_unit_t target, gl::float_t s);

    void multi_tex_coord_1fv(texture_unit_t target, const  gl::float_t * v);

    void multi_tex_coord_1i(texture_unit_t target, gl::int_t s);

    void multi_tex_coord_1iv(texture_unit_t target, const  gl::int_t * v);

    void multi_tex_coord_1s(texture_unit_t target, gl::short_t s);

    void multi_tex_coord_1sv(texture_unit_t target, const  gl::short_t * v);

    void multi_tex_coord_2d(texture_unit_t target, gl::double_t s, gl::double_t t);

    void multi_tex_coord_2dv(texture_unit_t target, const  gl::double_t * v);

    void multi_tex_coord_2f(texture_unit_t target, gl::float_t s, gl::float_t t);

    void multi_tex_coord_2fv(texture_unit_t target, const  gl::float_t * v);

    void multi_tex_coord_2i(texture_unit_t target, gl::int_t s, gl::int_t t);

    void multi_tex_coord_2iv(texture_unit_t target, const  gl::int_t * v);

    void multi_tex_coord_2s(texture_unit_t target, gl::short_t s, gl::short_t t);

    void multi_tex_coord_2sv(texture_unit_t target, const  gl::short_t * v);

    void multi_tex_coord_3d(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r);

    void multi_tex_coord_3dv(texture_unit_t target, const  gl::double_t * v);

    void multi_tex_coord_3f(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r);

    void multi_tex_coord_3fv(texture_unit_t target, const  gl::float_t * v);

    void multi_tex_coord_3i(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r);

    void multi_tex_coord_3iv(texture_unit_t target, const  gl::int_t * v);

    void multi_tex_coord_3s(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r);

    void multi_tex_coord_3sv(texture_unit_t target, const  gl::short_t * v);

    void multi_tex_coord_4d(texture_unit_t target, gl::double_t s, gl::double_t t, gl::double_t r, gl::double_t q);

    void multi_tex_coord_4dv(texture_unit_t target, const  gl::double_t * v);

    void multi_tex_coord_4f(texture_unit_t target, gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t q);

    void multi_tex_coord_4fv(texture_unit_t target, const  gl::float_t * v);

    void multi_tex_coord_4i(texture_unit_t target, gl::int_t s, gl::int_t t, gl::int_t r, gl::int_t q);

    void multi_tex_coord_4iv(texture_unit_t target, const  gl::int_t * v);

    void multi_tex_coord_4s(texture_unit_t target, gl::short_t s, gl::short_t t, gl::short_t r, gl::short_t q);

    void multi_tex_coord_4sv(texture_unit_t target, const  gl::short_t * v);

    void new_list(gl::uint_t list, list_mode_t mode);

    void normal_3b(gl::byte_t nx, gl::byte_t ny, gl::byte_t nz);

    void normal_3bv(const  gl::byte_t * v);

    void normal_3d(gl::double_t nx, gl::double_t ny, gl::double_t nz);

    void normal_3dv(const  gl::double_t * v);

    void normal_3f(gl::float_t nx, gl::float_t ny, gl::float_t nz);

    void normal_3fv(const  gl::float_t * v);

    void normal_3i(gl::int_t nx, gl::int_t ny, gl::int_t nz);

    void normal_3iv(const  gl::int_t * v);

    void normal_3s(gl::short_t nx, gl::short_t ny, gl::short_t nz);

    void normal_3sv(const  gl::short_t * v);

    void normal_pointer(normal_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

    void ortho(gl::double_t left, gl::double_t right, gl::double_t bottom, gl::double_t top, gl::double_t zNear, gl::double_t zFar);

    void pass_through(gl::float_t token);

    void pixel_mapfv(pixel_map_t map, gl::sizei_t mapsize, const  gl::float_t * values);

    void pixel_mapuiv(pixel_map_t map, gl::sizei_t mapsize, const  gl::uint_t * values);

    void pixel_mapusv(pixel_map_t map, gl::sizei_t mapsize, const  gl::ushort_t * values);

    void pixel_storef(pixel_store_parameter_t pname, gl::float_t param);

    void pixel_storei(pixel_store_parameter_t pname, gl::int_t param);

    void pixel_transferf(pixel_transfer_parameter_t pname, gl::float_t param);

    void pixel_transferi(pixel_transfer_parameter_t pname, gl::int_t param);

    void pixel_zoom(gl::float_t xfactor, gl::float_t yfactor);

    void point_parameterf(gl::enum_t pname, gl::float_t param);

    void point_parameterfv(gl::enum_t pname, const  gl::float_t * params);

    void point_parameteri(gl::enum_t pname, gl::int_t param);

    void point_parameteriv(gl::enum_t pname, const  gl::int_t * params);

    void point_size(gl::float_t size);

    void polygon_mode(material_face_t face, polygon_mode_t mode);

    void polygon_offset(gl::float_t factor, gl::float_t units);

    void polygon_stipple(const  gl::ubyte_t * mask);

    void pop_attrib();

    void pop_client_attrib();

    void pop_matrix();

    void pop_name();

    void prioritize_textures(gl::sizei_t n, const  gl::uint_t * textures, const  gl::float_t * priorities);

    void push_attrib(gl::bitmask<attrib_flags_t> mask);

    void push_client_attrib(gl::bitmask<client_attrib_flags_t> mask);

    void push_matrix();

    void push_name(gl::uint_t name);

    void raster_pos_2d(gl::double_t x, gl::double_t y);

    void raster_pos_2dv(const  gl::double_t * v);

    void raster_pos_2f(gl::float_t x, gl::float_t y);

    void raster_pos_2fv(const  gl::float_t * v);

    void raster_pos_2i(gl::int_t x, gl::int_t y);

    void raster_pos_2iv(const  gl::int_t * v);

    void raster_pos_2s(gl::short_t x, gl::short_t y);

    void raster_pos_2sv(const  gl::short_t * v);

    void raster_pos_3d(gl::double_t x, gl::double_t y, gl::double_t z);

    void raster_pos_3dv(const  gl::double_t * v);

    void raster_pos_3f(gl::float_t x, gl::float_t y, gl::float_t z);

    void raster_pos_3fv(const  gl::float_t * v);

    void raster_pos_3i(gl::int_t x, gl::int_t y, gl::int_t z);

    void raster_pos_3iv(const  gl::int_t * v);

    void raster_pos_3s(gl::short_t x, gl::short_t y, gl::short_t z);

    void raster_pos_3sv(const  gl::short_t * v);

    void raster_pos_4d(gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

    void raster_pos_4dv(const  gl::double_t * v);

    void raster_pos_4f(gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

    void raster_pos_4fv(const  gl::float_t * v);

    void raster_pos_4i(gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w);

    void raster_pos_4iv(const  gl::int_t * v);

    void raster_pos_4s(gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

    void raster_pos_4sv(const  gl::short_t * v);

    void read_buffer(read_buffer_mode_t src);

    void read_pixels(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, void * pixels);

    void rectd(gl::double_t x1, gl::double_t y1, gl::double_t x2, gl::double_t y2);

    void rectdv(const  gl::double_t * v1, const  gl::double_t * v2);

    void rectf(gl::float_t x1, gl::float_t y1, gl::float_t x2, gl::float_t y2);

    void rectfv(const  gl::float_t * v1, const  gl::float_t * v2);

    void recti(gl::int_t x1, gl::int_t y1, gl::int_t x2, gl::int_t y2);

    void rectiv(const  gl::int_t * v1, const  gl::int_t * v2);

    void rects(gl::short_t x1, gl::short_t y1, gl::short_t x2, gl::short_t y2);

    void rectsv(const  gl::short_t * v1, const  gl::short_t * v2);

    gl::int_t render_mode(rendering_mode_t mode);

    void rotated(gl::double_t angle, gl::double_t x, gl::double_t y, gl::double_t z);

    void rotatef(gl::float_t angle, gl::float_t x, gl::float_t y, gl::float_t z);

    void sample_coverage(gl::float_t value, gl::boolean_t invert);

    void scaled(gl::double_t x, gl::double_t y, gl::double_t z);

    void scalef(gl::float_t x, gl::float_t y, gl::float_t z);

    void scissor(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

    void secondary_color_3b(gl::byte_t red, gl::byte_t green, gl::byte_t blue);

    void secondary_color_3bv(const  gl::byte_t * v);

    void secondary_color_3d(gl::double_t red, gl::double_t green, gl::double_t blue);

    void secondary_color_3dv(const  gl::double_t * v);

    void secondary_color_3f(gl::float_t red, gl::float_t green, gl::float_t blue);

    void secondary_color_3fv(const  gl::float_t * v);

    void secondary_color_3i(gl::int_t red, gl::int_t green, gl::int_t blue);

    void secondary_color_3iv(const  gl::int_t * v);

    void secondary_color_3s(gl::short_t red, gl::short_t green, gl::short_t blue);

    void secondary_color_3sv(const  gl::short_t * v);

    void secondary_color_3ub(gl::ubyte_t red, gl::ubyte_t green, gl::ubyte_t blue);

    void secondary_color_3ubv(const  gl::ubyte_t * v);

    void secondary_color_3ui(gl::uint_t red, gl::uint_t green, gl::uint_t blue);

    void secondary_color_3uiv(const  gl::uint_t * v);

    void secondary_color_3us(gl::ushort_t red, gl::ushort_t green, gl::ushort_t blue);

    void secondary_color_3usv(const  gl::ushort_t * v);

    void secondary_color_pointer(gl::int_t size, color_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

    void select_buffer(gl::sizei_t size, gl::uint_t * buffer);

    void shade_model(shading_model_t mode);

    void shader_source(gl::uint_t shader, gl::sizei_t count, const  gl::char_t ** string, const  gl::int_t * length);

    void stencil_func(stencil_function_t func, gl::int_t ref, gl::uint_t mask);

    void stencil_func_separate(stencil_face_direction_t face, stencil_function_t func, gl::int_t ref, gl::uint_t mask);

    void stencil_mask(gl::uint_t mask);

    void stencil_mask_separate(stencil_face_direction_t face, gl::uint_t mask);

    void stencil_op(stencil_op_t fail, stencil_op_t zfail, stencil_op_t zpass);

    void stencil_op_separate(stencil_face_direction_t face, stencil_op_t sfail, stencil_op_t dpfail, stencil_op_t dppass);

    void tex_coord_1d(gl::double_t s);

    void tex_coord_1dv(const  gl::double_t * v);

    void tex_coord_1f(gl::float_t s);

    void tex_coord_1fv(const  gl::float_t * v);

    void tex_coord_1i(gl::int_t s);

    void tex_coord_1iv(const  gl::int_t * v);

    void tex_coord_1s(gl::short_t s);

    void tex_coord_1sv(const  gl::short_t * v);

    void tex_coord_2d(gl::double_t s, gl::double_t t);

    void tex_coord_2dv(const  gl::double_t * v);

    void tex_coord_2f(gl::float_t s, gl::float_t t);

    void tex_coord_2fv(const  gl::float_t * v);

    void tex_coord_2i(gl::int_t s, gl::int_t t);

    void tex_coord_2iv(const  gl::int_t * v);

    void tex_coord_2s(gl::short_t s, gl::short_t t);

    void tex_coord_2sv(const  gl::short_t * v);

    void tex_coord_3d(gl::double_t s, gl::double_t t, gl::double_t r);

    void tex_coord_3dv(const  gl::double_t * v);

    void tex_coord_3f(gl::float_t s, gl::float_t t, gl::float_t r);

    void tex_coord_3fv(const  gl::float_t * v);

    void tex_coord_3i(gl::int_t s, gl::int_t t, gl::int_t r);

    void tex_coord_3iv(const  gl::int_t * v);

    void tex_coord_3s(gl::short_t s, gl::short_t t, gl::short_t r);

    void tex_coord_3sv(const  gl::short_t * v);

    void tex_coord_4d(gl::double_t s, gl::double_t t, gl::double_t r, gl::double_t q);

    void tex_coord_4dv(const  gl::double_t * v);

    void tex_coord_4f(gl::float_t s, gl::float_t t, gl::float_t r, gl::float_t q);

    void tex_coord_4fv(const  gl::float_t * v);

    void tex_coord_4i(gl::int_t s, gl::int_t t, gl::int_t r, gl::int_t q);

    void tex_coord_4iv(const  gl::int_t * v);

    void tex_coord_4s(gl::short_t s, gl::short_t t, gl::short_t r, gl::short_t q);

    void tex_coord_4sv(const  gl::short_t * v);

    void tex_coord_pointer(gl::int_t size, tex_coord_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

    void tex_envf(texture_env_target_t target, texture_env_parameter_t pname, gl::float_t param);

    void tex_envfv(texture_env_target_t target, texture_env_parameter_t pname, const  gl::float_t * params);

    void tex_envi(texture_env_target_t target, texture_env_parameter_t pname, gl::int_t param);

    void tex_enviv(texture_env_target_t target, texture_env_parameter_t pname, const  gl::int_t * params);

    void tex_gend(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::double_t param);

    void tex_gendv(texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::double_t * params);

    void tex_genf(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::float_t param);

    void tex_genfv(texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::float_t * params);

    void tex_geni(texture_coord_name_t coord, texture_gen_parameter_t pname, gl::int_t param);

    void tex_geniv(texture_coord_name_t coord, texture_gen_parameter_t pname, const  gl::int_t * params);

    void tex_image_1d(texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

    void tex_image_2d(texture_image_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

    void tex_image_3d(texture_target_t target, gl::int_t level, texture_component_count_t internalformat, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, gl::int_t border, pixel_format_t format, pixel_type_t type, const  void * pixels);

    void tex_parameterf(texture_target_t target, texture_parameter_name_t pname, gl::float_t param);

    void tex_parameterfv(texture_target_t target, texture_parameter_name_t pname, const  gl::float_t * params);

    void tex_parameteri(texture_target_t target, texture_parameter_name_t pname, gl::int_t param);

    void tex_parameteriv(texture_target_t target, texture_parameter_name_t pname, const  gl::int_t * params);

    void tex_sub_image_1d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::sizei_t width, pixel_format_t format, pixel_type_t type, const  void * pixels);

    void tex_sub_image_2d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::sizei_t width, gl::sizei_t height, pixel_format_t format, pixel_type_t type, const  void * pixels);

    void tex_sub_image_3d(texture_target_t target, gl::int_t level, gl::int_t xoffset, gl::int_t yoffset, gl::int_t zoffset, gl::sizei_t width, gl::sizei_t height, gl::sizei_t depth, pixel_format_t format, pixel_type_t type, const  void * pixels);

    void translated(gl::double_t x, gl::double_t y, gl::double_t z);

    void translatef(gl::float_t x, gl::float_t y, gl::float_t z);

    void uniform_1f(gl::int_t location, gl::float_t v0);

    void uniform_1fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

    void uniform_1i(gl::int_t location, gl::int_t v0);

    void uniform_1iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

    void uniform_2f(gl::int_t location, gl::float_t v0, gl::float_t v1);

    void uniform_2fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

    void uniform_2i(gl::int_t location, gl::int_t v0, gl::int_t v1);

    void uniform_2iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

    void uniform_3f(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2);

    void uniform_3fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

    void uniform_3i(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2);

    void uniform_3iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

    void uniform_4f(gl::int_t location, gl::float_t v0, gl::float_t v1, gl::float_t v2, gl::float_t v3);

    void uniform_4fv(gl::int_t location, gl::sizei_t count, const  gl::float_t * value);

    void uniform_4i(gl::int_t location, gl::int_t v0, gl::int_t v1, gl::int_t v2, gl::int_t v3);

    void uniform_4iv(gl::int_t location, gl::sizei_t count, const  gl::int_t * value);

    void uniform_matrix_2fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

    void uniform_matrix_3fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

    void uniform_matrix_4fv(gl::int_t location, gl::sizei_t count, gl::boolean_t transpose, const  gl::float_t * value);

    gl::boolean_t unmap_buffer(buffer_target_arb_t target);

    void use_program(gl::uint_t program);

    void validate_program(gl::uint_t program);

    void vertex_2d(gl::double_t x, gl::double_t y);

    void vertex_2dv(const  gl::double_t * v);

    void vertex_2f(gl::float_t x, gl::float_t y);

    void vertex_2fv(const  gl::float_t * v);

    void vertex_2i(gl::int_t x, gl::int_t y);

    void vertex_2iv(const  gl::int_t * v);

    void vertex_2s(gl::short_t x, gl::short_t y);

    void vertex_2sv(const  gl::short_t * v);

    void vertex_3d(gl::double_t x, gl::double_t y, gl::double_t z);

    void vertex_3dv(const  gl::double_t * v);

    void vertex_3f(gl::float_t x, gl::float_t y, gl::float_t z);

    void vertex_3fv(const  gl::float_t * v);

    void vertex_3i(gl::int_t x, gl::int_t y, gl::int_t z);

    void vertex_3iv(const  gl::int_t * v);

    void vertex_3s(gl::short_t x, gl::short_t y, gl::short_t z);

    void vertex_3sv(const  gl::short_t * v);

    void vertex_4d(gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

    void vertex_4dv(const  gl::double_t * v);

    void vertex_4f(gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

    void vertex_4fv(const  gl::float_t * v);

    void vertex_4i(gl::int_t x, gl::int_t y, gl::int_t z, gl::int_t w);

    void vertex_4iv(const  gl::int_t * v);

    void vertex_4s(gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

    void vertex_4sv(const  gl::short_t * v);

    void vertex_attrib_1d(gl::uint_t index, gl::double_t x);

    void vertex_attrib_1dv(gl::uint_t index, const  gl::double_t * v);

    void vertex_attrib_1f(gl::uint_t index, gl::float_t x);

    void vertex_attrib_1fv(gl::uint_t index, const  gl::float_t * v);

    void vertex_attrib_1s(gl::uint_t index, gl::short_t x);

    void vertex_attrib_1sv(gl::uint_t index, const  gl::short_t * v);

    void vertex_attrib_2d(gl::uint_t index, gl::double_t x, gl::double_t y);

    void vertex_attrib_2dv(gl::uint_t index, const  gl::double_t * v);

    void vertex_attrib_2f(gl::uint_t index, gl::float_t x, gl::float_t y);

    void vertex_attrib_2fv(gl::uint_t index, const  gl::float_t * v);

    void vertex_attrib_2s(gl::uint_t index, gl::short_t x, gl::short_t y);

    void vertex_attrib_2sv(gl::uint_t index, const  gl::short_t * v);

    void vertex_attrib_3d(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z);

    void vertex_attrib_3dv(gl::uint_t index, const  gl::double_t * v);

    void vertex_attrib_3f(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z);

    void vertex_attrib_3fv(gl::uint_t index, const  gl::float_t * v);

    void vertex_attrib_3s(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z);

    void vertex_attrib_3sv(gl::uint_t index, const  gl::short_t * v);

    void vertex_attrib_4_nbv(gl::uint_t index, const  gl::byte_t * v);

    void vertex_attrib_4_niv(gl::uint_t index, const  gl::int_t * v);

    void vertex_attrib_4_nsv(gl::uint_t index, const  gl::short_t * v);

    void vertex_attrib_4_nub(gl::uint_t index, gl::ubyte_t x, gl::ubyte_t y, gl::ubyte_t z, gl::ubyte_t w);

    void vertex_attrib_4_nubv(gl::uint_t index, const  gl::ubyte_t * v);

    void vertex_attrib_4_nuiv(gl::uint_t index, const  gl::uint_t * v);

    void vertex_attrib_4_nusv(gl::uint_t index, const  gl::ushort_t * v);

    void vertex_attrib_4bv(gl::uint_t index, const  gl::byte_t * v);

    void vertex_attrib_4d(gl::uint_t index, gl::double_t x, gl::double_t y, gl::double_t z, gl::double_t w);

    void vertex_attrib_4dv(gl::uint_t index, const  gl::double_t * v);

    void vertex_attrib_4f(gl::uint_t index, gl::float_t x, gl::float_t y, gl::float_t z, gl::float_t w);

    void vertex_attrib_4fv(gl::uint_t index, const  gl::float_t * v);

    void vertex_attrib_4iv(gl::uint_t index, const  gl::int_t * v);

    void vertex_attrib_4s(gl::uint_t index, gl::short_t x, gl::short_t y, gl::short_t z, gl::short_t w);

    void vertex_attrib_4sv(gl::uint_t index, const  gl::short_t * v);

    void vertex_attrib_4ubv(gl::uint_t index, const  gl::ubyte_t * v);

    void vertex_attrib_4uiv(gl::uint_t index, const  gl::uint_t * v);

    void vertex_attrib_4usv(gl::uint_t index, const  gl::ushort_t * v);

    void vertex_attrib_pointer(gl::uint_t index, gl::int_t size, vertex_attrib_pointer_type_t type, gl::boolean_t normalized, gl::sizei_t stride, const  void * pointer);

    void vertex_pointer(gl::int_t size, vertex_pointer_type_t type, gl::sizei_t stride, const  void * pointer);

    void viewport(gl::int_t x, gl::int_t y, gl::sizei_t width, gl::sizei_t height);

    void window_pos_2d(gl::double_t x, gl::double_t y);

    void window_pos_2dv(const  gl::double_t * v);

    void window_pos_2f(gl::float_t x, gl::float_t y);

    void window_pos_2fv(const  gl::float_t * v);

    void window_pos_2i(gl::int_t x, gl::int_t y);

    void window_pos_2iv(const  gl::int_t * v);

    void window_pos_2s(gl::short_t x, gl::short_t y);

    void window_pos_2sv(const  gl::short_t * v);

    void window_pos_3d(gl::double_t x, gl::double_t y, gl::double_t z);

    void window_pos_3dv(const  gl::double_t * v);

    void window_pos_3f(gl::float_t x, gl::float_t y, gl::float_t z);

    void window_pos_3fv(const  gl::float_t * v);

    void window_pos_3i(gl::int_t x, gl::int_t y, gl::int_t z);

    void window_pos_3iv(const  gl::int_t * v);

    void window_pos_3s(gl::short_t x, gl::short_t y, gl::short_t z);

    void window_pos_3sv(const  gl::short_t * v);

} // namespace gl2

#endif // #ifndef COMMANDS__H
